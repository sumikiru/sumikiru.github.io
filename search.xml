<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>7.1贪心算法篇(2)</title>
      <link href="/posts/5846fa02.html"/>
      <url>/posts/5846fa02.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> leetcode刷题笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> leetcode </tag>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7.贪心算法篇</title>
      <link href="/posts/dc2082d.html"/>
      <url>/posts/dc2082d.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> leetcode刷题笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> leetcode </tag>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6.1哈希表篇(2)</title>
      <link href="/posts/6f36f465.html"/>
      <url>/posts/6f36f465.html</url>
      
        <content type="html"><![CDATA[<h1 id="3-哈希表与统计"><a href="#3-哈希表与统计" class="headerlink" title="3.哈希表与统计"></a>3.哈希表与统计</h1><h2 id="3-1-最长和谐子序列：594"><a href="#3-1-最长和谐子序列：594" class="headerlink" title="3-1.最长和谐子序列：594"></a>3-1.最长和谐子序列：594</h2><p>法一：排序+滑动窗口</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findLHS</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>, right = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right &amp;&amp; right &lt;= nums.<span class="built_in">size</span>() - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">abs</span>(nums[right] - nums[left]) == <span class="number">1</span>) &#123;</span><br><span class="line">                ans = <span class="built_in">max</span>(right - left + <span class="number">1</span>, ans);</span><br><span class="line">                right++;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">abs</span>(nums[right] - nums[left]) &lt; <span class="number">1</span>) &#123;</span><br><span class="line">                right++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                left++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>法二：哈希表</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findLHS</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; cnt;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">            cnt[num]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> [key, val] : cnt) &#123;</span><br><span class="line">            <span class="keyword">if</span> (cnt.<span class="built_in">count</span>(key + <span class="number">1</span>)) &#123;</span><br><span class="line">                ans = <span class="built_in">max</span>(ans, val + cnt[key + <span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="3-2-两个数组的交集II：350"><a href="#3-2-两个数组的交集II：350" class="headerlink" title="3-2.两个数组的交集II：350"></a>3-2.两个数组的交集II：350</h2><p>两个数组的交集:349，详见《6.0哈希表篇1-2》</p><p>法一：哈希表(最优解)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">intersect</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums1, vector&lt;<span class="type">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; mp;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums1) &#123;</span><br><span class="line">            mp[num]++;</span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums2) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mp.<span class="built_in">count</span>(num) &amp;&amp; mp[num]) &#123;</span><br><span class="line">                mp[num]--;</span><br><span class="line">                res.<span class="built_in">emplace_back</span>(num);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>法二：排序+双指针</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">intersect</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums1, vector&lt;<span class="type">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">sort</span>(nums1.<span class="built_in">begin</span>(), nums1.<span class="built_in">end</span>());</span><br><span class="line">        <span class="built_in">sort</span>(nums2.<span class="built_in">begin</span>(), nums2.<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">int</span> index1 = <span class="number">0</span>, index2 = <span class="number">0</span>;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">        <span class="keyword">while</span> (index1 &lt; nums1.<span class="built_in">size</span>() &amp;&amp; index2 &lt; nums2.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="type">int</span> num1 = nums1[index1], num2 = nums2[index2];</span><br><span class="line">            <span class="keyword">if</span> (num1 == num2) &#123;</span><br><span class="line">                res.<span class="built_in">emplace_back</span>(num1);</span><br><span class="line">                index1++;</span><br><span class="line">                index2++;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (num1 &lt; num2) &#123;</span><br><span class="line">                index1++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                index2++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><pre><code>如果$&#123;nums&#125;_2$的元素存储在磁盘上，磁盘内存是有限的，并且你**不能一次加载所有的元素到内存中**。那么就无法高效地对$&#123;nums&#125;_2$进行排序，因此推荐使用方法一而不是方法二。在方法一中，$&#123;nums&#125;_2$只关系到查询操作，因此每次读取$&#123;nums&#125;_2$中的一部分数据，并进行处理即可。</code></pre><h2 id="3-3-砖墙：554"><a href="#3-3-砖墙：554" class="headerlink" title="3-3.砖墙：554"></a>3-3.砖墙：554</h2><p>哈希表</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">leastBricks</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; wall)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; mp;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; widths : wall) &#123;</span><br><span class="line">            <span class="type">int</span> n = widths.<span class="built_in">size</span>();</span><br><span class="line">            <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">                sum += widths[i];</span><br><span class="line">                mp[sum]++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> maxCnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; [_, value] : mp) &#123;</span><br><span class="line">            maxCnt = <span class="built_in">max</span>(maxCnt, value);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> wall.<span class="built_in">size</span>() - maxCnt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="3-4-在系统中查找重复文件：609"><a href="#3-4-在系统中查找重复文件：609" class="headerlink" title="3-4.在系统中查找重复文件：609"></a>3-4.在系统中查找重复文件：609</h2><p>法一：哈希表</p><pre><code>麻烦之处在于，不只是`&quot;root/a 1.txt(abcd)&quot;`一种格式，还可能是`&quot;root/a 1.txt(abcd) 2.txt(efgh)&quot;`。思路简单，但是写起来复杂。</code></pre><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;string&gt;&gt; <span class="built_in">findDuplicate</span>(vector&lt;string&gt;&amp; paths) &#123;</span><br><span class="line">        unordered_map&lt;string, vector&lt;string&gt;&gt; t;</span><br><span class="line">        <span class="keyword">auto</span> help = [](string s) -&gt; pair&lt;string, string&gt; &#123;</span><br><span class="line">            string name, content;</span><br><span class="line">            <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(; i&lt;s.<span class="built_in">size</span>() &amp;&amp; s[i] != <span class="string">&#x27;(&#x27;</span>; i++)&#123;</span><br><span class="line">                name += s[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(i++; i&lt;s.<span class="built_in">size</span>() &amp;&amp; s[i] != <span class="string">&#x27;)&#x27;</span>; i++)&#123;</span><br><span class="line">                content += s[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> &#123;name, content&#125;;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> path : paths)&#123;</span><br><span class="line">            string p;</span><br><span class="line">            <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(path[i] != <span class="string">&#x27; &#x27;</span>)&#123;</span><br><span class="line">                p += path[i];</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            string tmp;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> l=i, r=i+<span class="number">1</span>; r &lt; path.<span class="built_in">size</span>(); r++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(path[r] == <span class="string">&#x27; &#x27;</span> || r == path.<span class="built_in">size</span>() - <span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="keyword">auto</span> [name, content] = <span class="built_in">help</span>(path.<span class="built_in">substr</span>(l+<span class="number">1</span>, r-l));</span><br><span class="line">                    t[content].<span class="built_in">push_back</span>(p+<span class="string">&#x27;/&#x27;</span>+name);</span><br><span class="line">                    l = r;</span><br><span class="line">                    tmp.<span class="built_in">clear</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;vector&lt;string&gt;&gt; ans;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;[_, names] : t)&#123;</span><br><span class="line">            <span class="keyword">if</span>(names.<span class="built_in">size</span>() &gt; <span class="number">1</span>)</span><br><span class="line">                ans.<span class="built_in">emplace_back</span>(names);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>法二：istringstream</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;string&gt;&gt; <span class="built_in">findDuplicate</span>(vector&lt;string&gt;&amp; paths) &#123;</span><br><span class="line">        vector&lt;vector&lt;string&gt;&gt; ans;</span><br><span class="line">        unordered_map&lt;string, vector&lt;string&gt;&gt; um;   <span class="comment">//文件内容-&gt;文件路径</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">const</span> string&amp; path: paths) &#123;</span><br><span class="line">            <span class="function">istringstream <span class="title">iss</span><span class="params">(path)</span></span>;</span><br><span class="line">            string dir, tmp;</span><br><span class="line">            iss &gt;&gt; dir;</span><br><span class="line">            <span class="keyword">while</span> (iss &gt;&gt; tmp) &#123;</span><br><span class="line">                string key, val;</span><br><span class="line">                <span class="built_in">getKeyAndVal</span>(key, val, tmp, dir);</span><br><span class="line">                um[key].<span class="built_in">push_back</span>(val);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; p: um) &#123;</span><br><span class="line">            <span class="keyword">if</span> (p.second.<span class="built_in">size</span>() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                ans.<span class="built_in">push_back</span>(p.second);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">getKeyAndVal</span><span class="params">(string&amp; key, string&amp; val, <span class="type">const</span> string&amp; tmp, <span class="type">const</span> string&amp; dir)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (tmp[i] != <span class="string">&#x27;(&#x27;</span>) ++i;</span><br><span class="line">        val = dir + <span class="string">&quot;/&quot;</span> + tmp.<span class="built_in">substr</span>(<span class="number">0</span>, i);</span><br><span class="line">        <span class="type">int</span> j = i + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (tmp[j] != <span class="string">&#x27;)&#x27;</span>) ++j;</span><br><span class="line">        key = tmp.<span class="built_in">substr</span>(i + <span class="number">1</span>, j - i - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="关于stringstream"><a href="#关于stringstream" class="headerlink" title="关于stringstream"></a>关于stringstream</h2><pre><code>istringstream是继承于istream，ostringstream是继承于ostream，而他们使用的缓冲区类是stringbuf。二者详细说明：[istringstream及ostringstream超详细说明--知乎](https://zhuanlan.zhihu.com/p/367869633)</code></pre><p><img src="https://s2.loli.net/2024/04/07/eMHJ6g4Wcxmld8u.png" alt=""></p><pre><code>stringstream样例：[C++中stringstream样例-博客园](https://www.cnblogs.com/zhang-qc/p/9048977.html)在这段代码中，`istringstream` 用于从字符串中提取数据。针对每个 `path`，它创建了一个 `istringstream` 对象，然后使用 `iss &gt;&gt; dir` 语句提取第一个字符串（目录信息），之后使用 `iss &gt;&gt; tmp` 循环提取后续的字符串。</code></pre><p>优势：</p><ol><li><p><strong>方便的输入流操作</strong>：<code>istringstream</code> 提供了与标准输入输出流 <code>cin</code> 和 <code>cout</code> 相似的接口来处理字符串。</p></li><li><p><strong>轻量级</strong>：<code>istringstream</code> 是基于内存的输入流，因此操作速度快。</p></li><li><p><strong>可重复使用</strong>：可以重复使用 <code>istringstream</code> 对不同的字符串进行解析，而无需重新初始化。</p></li><li><p><strong>数据类型转换</strong>：<code>istringstream</code> 提供了可以轻松将不同类型数据从字符串中提取出来的方法。</p></li><li><p><strong>适用于分词</strong>：适用于从输入的字符串中提取单词或数据。可以使用 <code>&gt;&gt;</code> 操作符来<u>按空格等分隔符将字符串分词</u>。</p><p> 总之，<code>istringstream</code> 提供了一种方便、高效的方式来处理从字符串中提取数据，使得对文本进行解析和处理变得更加容易。在需要将字符串按照空格分割为各个部分并记录下对应值时，可以起到类似其他语言中<code>split(&#39; &#39;)</code>的作用。</p></li></ol><h2 id="3-5-四数相加II：454"><a href="#3-5-四数相加II：454" class="headerlink" title="3-5.四数相加II：454"></a>3-5.四数相加II：454</h2><p>💬难在思路: 分治+哈希表</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">fourSumCount</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums1, vector&lt;<span class="type">int</span>&gt;&amp; nums2, vector&lt;<span class="type">int</span>&gt;&amp; nums3, vector&lt;<span class="type">int</span>&gt;&amp; nums4)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; mp; <span class="comment">//累加和-&gt;组合数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>&amp; a : nums1) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span>&amp; b : nums2) &#123;</span><br><span class="line">                mp[a + b]++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>&amp; c : nums3) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span>&amp; d : nums4) &#123;</span><br><span class="line">                <span class="keyword">if</span> (mp.<span class="built_in">count</span>(-c - d)) &#123;</span><br><span class="line">                    ans += mp[-c - d]; <span class="comment">// 不能只加一次，可能多种情况</span></span><br><span class="line">                    <span class="comment">// 同时不应再改变mp[-c-d]的值</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><pre><code>三数之和：15,四数之和：18。这两题最优解为双指针，而不是哈希表。有时候哈希表时空开销太大时，双指针往往能很好地解决。</code></pre><h2 id="3-6-多数元素：169"><a href="#3-6-多数元素：169" class="headerlink" title="3-6.多数元素：169"></a>3-6.多数元素：169</h2><p>法一：哈希表(27ms,27.3MB)✅</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">majorityElement</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; counts;</span><br><span class="line">        <span class="type">int</span> majority = <span class="number">0</span>, cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">            ++counts[num];</span><br><span class="line">            <span class="keyword">if</span> (counts[num] &gt; cnt) &#123;</span><br><span class="line">                majority = num;</span><br><span class="line">                cnt = counts[num];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> majority;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>法二：排序+取众数(20ms,27.2MB)</p><blockquote><p>这里的”多数元素”出现次数超过总次数的一半，所以必定是众数，并且排序后位于中间的数一定是众数（数学思维）。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">majorityElement</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">return</span> nums[nums.<span class="built_in">size</span>() / <span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>虽然时间复杂度比法一高，但实际运行时间会更小。使用堆排序可以进一步减小空间开销。</p><p>法三：随机数(了解)</p><p>最坏时间复杂度为$O(\infty)$，可能一直找不到众数。用<code>rand()</code>生成随机数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">majorityElement</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="type">int</span> candidate = nums[<span class="built_in">rand</span>() % nums.<span class="built_in">size</span>()];</span><br><span class="line">            <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> num : nums)</span><br><span class="line">                <span class="keyword">if</span> (num == candidate)</span><br><span class="line">                    ++count;</span><br><span class="line">            <span class="keyword">if</span> (count &gt; nums.<span class="built_in">size</span>() / <span class="number">2</span>)</span><br><span class="line">                <span class="keyword">return</span> candidate;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>法四：分治(24ms,26MB)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">count_in_range</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target, <span class="type">int</span> lo, <span class="type">int</span> hi)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = lo; i &lt;= hi; ++i)</span><br><span class="line">            <span class="keyword">if</span> (nums[i] == target)</span><br><span class="line">                ++count;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">majority_element_rec</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> lo, <span class="type">int</span> hi)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (lo == hi)</span><br><span class="line">            <span class="keyword">return</span> nums[lo];</span><br><span class="line">        <span class="type">int</span> mid = (lo + hi) / <span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> left_majority = <span class="built_in">majority_element_rec</span>(nums, lo, mid);</span><br><span class="line">        <span class="type">int</span> right_majority = <span class="built_in">majority_element_rec</span>(nums, mid + <span class="number">1</span>, hi);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">count_in_range</span>(nums, left_majority, lo, hi) &gt; (hi - lo + <span class="number">1</span>) / <span class="number">2</span>)</span><br><span class="line">            <span class="keyword">return</span> left_majority;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">count_in_range</span>(nums, right_majority, lo, hi) &gt; (hi - lo + <span class="number">1</span>) / <span class="number">2</span>)</span><br><span class="line">            <span class="keyword">return</span> right_majority;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">majorityElement</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">majority_element_rec</span>(nums, <span class="number">0</span>, nums.<span class="built_in">size</span>() - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>法五：Boyer-Moore投票算法(17ms,26.1MB)✅</p><p>详见<a href="https://leetcode.cn/problems/majority-element/solutions/1/169-duo-shu-yuan-su-mo-er-tou-piao-qing-ledrh/">本题摩尔投票清晰图解</a>。核心思想为对拼消耗，如果元素出现次数不超过一半，则该方法失效，这时候就需要用到其泛化版———Misra-Gries算法。</p><p><a href="https://www.zhihu.com/question/49973163/answer/3202021480">如何理解摩尔投票算法？—力扣</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">majorityElement</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> x = <span class="number">0</span>, votes = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums)&#123;</span><br><span class="line">            <span class="keyword">if</span> (votes == <span class="number">0</span>) x = num;</span><br><span class="line">            votes += num == x ? <span class="number">1</span> : <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="拓展-多数元素II：229"><a href="#拓展-多数元素II：229" class="headerlink" title="拓展.多数元素II：229"></a>拓展.多数元素II：229</h3><p>法一：哈希表</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">majorityElement</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; counts;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; num : nums) &#123;</span><br><span class="line">            counts[num]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; cnt : counts) &#123;</span><br><span class="line">            <span class="keyword">if</span> (cnt.second &gt; n / <span class="number">3</span>) &#123;</span><br><span class="line">                ans.<span class="built_in">push_back</span>(cnt.first);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>法二：摩尔投票法✅</p><blockquote><p>出现次数超过$\lfloor\frac{n}{2}\rfloor$的最多只能有一个，出现次数超过$\lfloor\frac{n}{3}\rfloor$的最多只能有两个。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">majorityElement</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="comment">// 临时元素1和2，对应投票votes1和votes2</span></span><br><span class="line">        <span class="type">int</span> element1 = <span class="number">0</span>, element2 = <span class="number">0</span>, votes1 = <span class="number">0</span>, votes2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; num : nums) &#123;</span><br><span class="line">            <span class="keyword">if</span> (votes1 &gt; <span class="number">0</span> &amp;&amp; num == element1) &#123;</span><br><span class="line">                <span class="comment">// 如果该元素为第一个元素，则计数加1</span></span><br><span class="line">                votes1++;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (votes2 &amp;&amp; num == element2) &#123;</span><br><span class="line">                <span class="comment">// 如果该元素为第二个元素，则计数加1</span></span><br><span class="line">                votes2++;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (votes1 == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 选择第一个元素</span></span><br><span class="line">                element1 = num;</span><br><span class="line">                votes1++;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (votes2 == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 选择第二个元素</span></span><br><span class="line">                element2 = num;</span><br><span class="line">                votes2++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 如果三个元素均不相同，则相互抵消1次</span></span><br><span class="line">                votes1--;</span><br><span class="line">                votes2--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> cnt1 = <span class="number">0</span>, cnt2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; num : nums) &#123;</span><br><span class="line">            <span class="keyword">if</span> (votes1 &gt; <span class="number">0</span> &amp;&amp; num == element1) &#123;</span><br><span class="line">                cnt1++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (votes2 &gt; <span class="number">0</span> &amp;&amp; num == element2) &#123;</span><br><span class="line">                cnt2++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 检测元素出现的次数是否满足要求,因为不一定是存在两个数</span></span><br><span class="line">        <span class="keyword">if</span> (votes1 &gt; <span class="number">0</span> &amp;&amp; cnt1 &gt; n / <span class="number">3</span>) &#123;</span><br><span class="line">            ans.<span class="built_in">push_back</span>(element1);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (votes2 &gt; <span class="number">0</span> &amp;&amp; cnt2 &gt; n / <span class="number">3</span>) &#123;</span><br><span class="line">            ans.<span class="built_in">push_back</span>(element2);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>同理，可以使用该代码解决$\lfloor\frac{n}{m}\rfloor$的情况，只需要让备选element和votes的数目为$m-1$即可。</p><hr><h1 id="4-哈希表与前缀和-难理解"><a href="#4-哈希表与前缀和-难理解" class="headerlink" title="4.哈希表与前缀和(难理解)"></a>4.哈希表与前缀和(难理解)</h1><p>前缀思想推荐文章<a href="https://leetcode.cn/problems/continuous-subarray-sum/solutions/562196/de-liao-wo-ba-qian-zhui-he-miao-de-gan-g-c8kp/">【动画模拟】一文秒杀七道题—力扣（LeetCode）</a>,包括前缀和/奇数/积…</p><p><img src="https://s2.loli.net/2024/04/13/3PrTOI5fg9Czw6J.png" alt=""></p><h2 id="4-1-和为K的子数组：560"><a href="#4-1-和为K的子数组：560" class="headerlink" title="4-1.和为K的子数组：560"></a>4-1.和为K的子数组：560</h2><p>法一：枚举(超时)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">subarraySum</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> right = <span class="number">0</span>; right &lt; nums.<span class="built_in">size</span>(); right++) &#123;</span><br><span class="line">            <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> left = right; left &gt;= <span class="number">0</span>; left--) &#123;</span><br><span class="line">                sum += nums[left];</span><br><span class="line">                <span class="keyword">if</span> (sum == k) &#123;</span><br><span class="line">                    ans++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>该题用滑动窗口难以实现，因为存在负数。比如[-2,-1,0,1,2]，k=0。单纯的滑动窗口会使得漏掉[-1,0,1]。转而用动态规划，又容易导致内存溢出。</p></blockquote><p>法二：前缀和+哈希表优化</p><p><img src="https://s2.loli.net/2024/04/13/m1bqx9fNwlX4Ku8.png" alt=""></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">subarraySum</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; mp;<span class="comment">//前缀和，出现次数</span></span><br><span class="line">        mp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> pre = <span class="number">0</span>, ans = <span class="number">0</span>; <span class="comment">// pre记录前缀和</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; num : nums) &#123;</span><br><span class="line">            pre += num;</span><br><span class="line">            <span class="keyword">if</span> (mp.<span class="built_in">find</span>(pre - k) != mp.<span class="built_in">end</span>()) &#123;</span><br><span class="line">                ans += mp[pre - k];</span><br><span class="line">            &#125;</span><br><span class="line">            mp[pre]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>推导和图解详见官方题解。</p><h2 id="4-2-连续的子数组和：523"><a href="#4-2-连续的子数组和：523" class="headerlink" title="4-2.连续的子数组和：523"></a>4-2.连续的子数组和：523</h2><p>前缀和＋哈希表,本题综合性较强。</p><p>详细解答<a href="https://leetcode.cn/problems/continuous-subarray-sum/solutions/808246/gong-shui-san-xie-tuo-zhan-wei-qiu-fang-1juse/">【宫水三叶】拓展到求方案数问题—LeetCode</a></p><p><img src="https://s2.loli.net/2024/04/13/8kMtUX4nupvZQ6z.png" alt=""></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">checkSubarraySum</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span> (n &lt; <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; mp;<span class="comment">//&lt;前缀和%k,索引&gt;</span></span><br><span class="line">        mp[<span class="number">0</span>] = <span class="number">-1</span>;<span class="comment">//因为元素均为非负数，所以前缀和不可能为0，即对应索引为-1无效值</span></span><br><span class="line">        <span class="type">int</span> presum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            presum = (presum + nums[i]) % k;</span><br><span class="line">            <span class="keyword">if</span> (mp.<span class="built_in">count</span>(presum)) &#123;</span><br><span class="line">                <span class="type">int</span> preIdx = mp[presum];</span><br><span class="line">                <span class="keyword">if</span> (i - preIdx &gt;= <span class="number">2</span>) &#123;<span class="comment">//子数组长度至少为2</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                mp[presum] = i;<span class="comment">//注意记录的是索引而不是次数，因为需要比较i-preIdx是否&gt;=2</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>拓展：如果说还要记录下子数组长度，可以使用<code>unordered_map&lt;int,pair&lt;int,int&gt;&gt;mp;//&lt;前缀和%k,pair&lt;索引，长度&gt;&gt;</code>。</p><h2 id="4-3-连续数组：525"><a href="#4-3-连续数组：525" class="headerlink" title="4-3.连续数组：525"></a>4-3.连续数组：525</h2><p>前缀和+哈希表</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findMaxLength</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; mp;</span><br><span class="line">        mp[<span class="number">0</span>] = <span class="number">-1</span>;                 <span class="comment">// 记录索引而非次数</span></span><br><span class="line">        <span class="type">int</span> presum = <span class="number">0</span>, maxLen = <span class="number">0</span>; <span class="comment">// presum记录0/1交替的长度</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="comment">// 在这里可以将1视作1,0视作-1，交替的和就是presum前缀和</span></span><br><span class="line">            <span class="keyword">if</span> (nums[i]) &#123;</span><br><span class="line">                presum++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                presum--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 问题转化为：如何求得最长一段区间和为0的子数组,所以这里的k==0</span></span><br><span class="line">            <span class="keyword">if</span> (mp.<span class="built_in">count</span>(presum)) &#123;</span><br><span class="line">                <span class="type">int</span> preIdx = mp[presum];</span><br><span class="line">                maxLen = <span class="built_in">max</span>(maxLen, i - preIdx);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                mp[presum] = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxLen;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> leetcode刷题笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> leetcode </tag>
            
            <tag> 哈希表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6.0哈希表篇</title>
      <link href="/posts/5d437c4b.html"/>
      <url>/posts/5d437c4b.html</url>
      
        <content type="html"><![CDATA[<h1 id="关于哈希表"><a href="#关于哈希表" class="headerlink" title="关于哈希表"></a>关于哈希表</h1><p><a href="https://zhuanlan.zhihu.com/p/535427115">一文看懂使用C++ STL 中的哈希表—知乎</a></p><h1 id="1-哈希表的查找、插入及删除"><a href="#1-哈希表的查找、插入及删除" class="headerlink" title="1.哈希表的查找、插入及删除"></a>1.哈希表的查找、插入及删除</h1><h2 id="1-1-存在重复元素：217"><a href="#1-1-存在重复元素：217" class="headerlink" title="1-1.存在重复元素：217"></a>1-1.存在重复元素：217</h2><p>法一：排序</p><p><code>sort()</code>的时间复杂度是$O(NlogN)$,空间复杂度为$O(logN)$，因为排序过程中需要递归调用栈空间。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">containsDuplicate</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>() - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] == nums[i + <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>法二：哈希表</p><p>时间和空间复杂度均为$O(N)$，set的find()时间复杂度是$O(1)$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">containsDuplicate</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        unordered_set&lt;<span class="type">int</span>&gt; s;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> x : nums) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s.<span class="built_in">find</span>(x) != s.<span class="built_in">end</span>()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            s.<span class="built_in">insert</span>(x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>​    但该题实际上排序比哈希表的执行用时和消耗内存更小，所以时间复杂度不是唯一。哈希表要计算哈希值等，可以理解哈希表时间复杂度常数项比较大。常数不一样，hashset的常数开销大，所以对于非大量的数据来说，常数效应覆盖了时间复杂度的差距。如果把数据量放大，那么随着数据量的增加，hashset方式的时间是线性增加，sort是非线性增加，到一个阈值，则hashset的低时间复杂度的优势才能发挥出来。</p><h2 id="1-2-两个数组的交集：349"><a href="#1-2-两个数组的交集：349" class="headerlink" title="1-2.两个数组的交集：349"></a>1-2.两个数组的交集：349</h2><p>法一：哈希表</p><blockquote><p>如果使用哈希集合存储元素，则可以在 $O(1)$ 的时间内判断一个元素是否在集合中，从而降低时间复杂度。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">getSets</span><span class="params">(unordered_set&lt;<span class="type">int</span>&gt;&amp; set1, unordered_set&lt;<span class="type">int</span>&gt;&amp; set2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (set1.<span class="built_in">size</span>() &lt; set2.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">getSets</span>(set2, set1);</span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; num : set1) &#123;</span><br><span class="line">            <span class="keyword">if</span> (set2.<span class="built_in">count</span>(num)) &#123; <span class="comment">// set1中的num，set2也有</span></span><br><span class="line">                ans.<span class="built_in">push_back</span>(num);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">intersection</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums1, vector&lt;<span class="type">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class="line">        unordered_set&lt;<span class="type">int</span>&gt; set1, set2;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>&amp; x : nums1) &#123;</span><br><span class="line">            set1.<span class="built_in">insert</span>(x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>&amp; x : nums2) &#123;</span><br><span class="line">            set2.<span class="built_in">insert</span>(x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">getSets</span>(set1, set2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>法二：排序+双指针</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">intersection</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums1, vector&lt;<span class="type">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">sort</span>(nums1.<span class="built_in">begin</span>(), nums1.<span class="built_in">end</span>());</span><br><span class="line">        <span class="built_in">sort</span>(nums2.<span class="built_in">begin</span>(), nums2.<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">int</span> index1 = <span class="number">0</span>, index2 = <span class="number">0</span>;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line">        <span class="keyword">while</span> (index1 &lt; nums1.<span class="built_in">size</span>() &amp;&amp; index2 &lt; nums2.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="type">int</span> num1 = nums1[index1], num2 = nums2[index2];</span><br><span class="line">            <span class="keyword">if</span> (num1 == num2) &#123;</span><br><span class="line">                <span class="comment">// 确保加入的元素是唯一的</span></span><br><span class="line">                <span class="keyword">if</span> (!ans.<span class="built_in">size</span>() || num1 != ans.<span class="built_in">back</span>()) &#123;</span><br><span class="line">                    ans.<span class="built_in">emplace_back</span>(num1);</span><br><span class="line">                &#125;</span><br><span class="line">                ++index1;</span><br><span class="line">                ++index2;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (num1 &lt; num2) &#123;</span><br><span class="line">                ++index1;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                ++index2;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>法三：直接使用set,省去排序的步骤。效率和法一差不多</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">intersection</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums1, vector&lt;<span class="type">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class="line">        set&lt;<span class="type">int</span>&gt; s;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; num : nums1) &#123;</span><br><span class="line">            s.<span class="built_in">insert</span>(num);</span><br><span class="line">        &#125;</span><br><span class="line">        set&lt;<span class="type">int</span>&gt; intersectionSet;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; num : nums2) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s.<span class="built_in">find</span>(num) != s.<span class="built_in">end</span>()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (intersectionSet.<span class="built_in">find</span>(num) == intersectionSet.<span class="built_in">end</span>()) &#123; </span><br><span class="line">                    intersectionSet.<span class="built_in">insert</span>(num);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line">        <span class="keyword">for</span> (set&lt;<span class="type">int</span>&gt;::iterator it = intersectionSet.<span class="built_in">begin</span>();</span><br><span class="line">             it != intersectionSet.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">            ans.<span class="built_in">push_back</span>(*it);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="1-3-最长连续序列：128"><a href="#1-3-最长连续序列：128" class="headerlink" title="1-3.最长连续序列：128"></a>1-3.最长连续序列：128</h2><p>法一：哈希表(该题也可以直接用set)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">longestConsecutive</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        unordered_set&lt;<span class="type">int</span>&gt; s;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>&amp; num : nums) &#123;</span><br><span class="line">            s.<span class="built_in">insert</span>(num);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; num : s) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!s.<span class="built_in">count</span>(num - <span class="number">1</span>)) &#123; <span class="comment">// 不存在num的前一个数字，重置</span></span><br><span class="line">                <span class="type">int</span> currentNum = num, currentCount = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">while</span> (s.<span class="built_in">count</span>(currentNum + <span class="number">1</span>)) &#123;</span><br><span class="line">                    currentCount++;</span><br><span class="line">                    currentNum++;</span><br><span class="line">                &#125;</span><br><span class="line">                count = <span class="built_in">max</span>(count, currentCount);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><pre><code>注意第9行，如果写作`int&amp; num:s`则会报错，而使用`const int&amp; num:s`/`auto&amp; num:s`/`const auto&amp; num:s`/`auto&amp;&amp; num:s`则不会报错。因为前者将尝试以非const引用的方式访问容器中的元素，而unordered_set中的元素是&lt;mark&gt;只读&lt;/mark&gt;的。Q:但是为什么`int&amp; num:s`不正确，而`auto&amp; num:s`就可以呢？A:可参见[C++中的auto关键字](https://zhuanlan.zhihu.com/p/390608866)，这里auto就相当于T，而这里T相当于是const int.</code></pre><h2 id="1-4-快乐数：202"><a href="#1-4-快乐数：202" class="headerlink" title="1-4.快乐数：202"></a>1-4.快乐数：202</h2><p>法一：哈希表</p><p>需要注意一点：如何解决无限循环这一问题。记录下每次的平方和，当出现重复则说明进入无限循环。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isHappy</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        unordered_set&lt;<span class="type">int</span>&gt; numbers;</span><br><span class="line">        <span class="keyword">while</span> (!numbers.<span class="built_in">count</span>(n)) &#123; <span class="comment">// n没有出现在平方和记录中过</span></span><br><span class="line">            <span class="type">int</span> num = n;</span><br><span class="line">            numbers.<span class="built_in">insert</span>(num);</span><br><span class="line">            n = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (num) &#123;</span><br><span class="line">                <span class="type">int</span> i = num % <span class="number">10</span>;</span><br><span class="line">                num /= <span class="number">10</span>;</span><br><span class="line">                n += i * i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n == <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>法二：快慢指针（空间复杂度更低，时间复杂度相同，但是实际速度更慢一点）</p><blockquote><p>每次获取下一个平方和的操作，可以认为是在构造一个隐式链表的下一个节点。检测是否进入循环，相当于检测一个链表是否有环，因此可以使用Floyd循环查找算法。</p></blockquote><p>slow每次前进一个节点，fast每次前进两次，这样它们最终将在循环中相遇，while循环中止条件其一即为<code>slow==fast</code>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getNext</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (n) &#123;</span><br><span class="line">            <span class="type">int</span> i = n % <span class="number">10</span>;</span><br><span class="line">            n /= <span class="number">10</span>;</span><br><span class="line">            sum += i * i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isHappy</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> slow = n, fast = <span class="built_in">getNext</span>(n);</span><br><span class="line">        <span class="keyword">while</span> (fast != <span class="number">1</span> &amp;&amp; slow != fast) &#123;</span><br><span class="line">            slow = <span class="built_in">getNext</span>(slow);</span><br><span class="line">            fast = <span class="built_in">getNext</span>(<span class="built_in">getNext</span>(fast));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> fast == <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="1-5-键盘行：500"><a href="#1-5-键盘行：500" class="headerlink" title="1-5.键盘行：500"></a>1-5.键盘行：500</h2><p>法一：遍历</p><p>键盘字母转换为行号。2ms,7.82MB。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">findWords</span><span class="params">(vector&lt;string&gt;&amp; words)</span> </span>&#123;</span><br><span class="line">        vector&lt;string&gt; ans;</span><br><span class="line">        string rowIdx = <span class="string">&quot;12210111011122000010020202&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp; word : words) &#123;</span><br><span class="line">            <span class="type">bool</span> isValid = <span class="literal">true</span>;</span><br><span class="line">            <span class="type">char</span> idx = rowIdx[<span class="built_in">tolower</span>(word[<span class="number">0</span>]) - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; word.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span>(rowIdx[<span class="built_in">tolower</span>(word[i]) - <span class="string">&#x27;a&#x27;</span>] != idx) &#123;</span><br><span class="line">                    isValid = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (isValid) &#123;</span><br><span class="line">                ans.<span class="built_in">emplace_back</span>(word);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>法二：哈希表</p><p>4ms,8MB</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">findWords</span><span class="params">(vector&lt;string&gt;&amp; words)</span> </span>&#123;</span><br><span class="line">        unordered_set&lt;<span class="type">char</span>&gt; s&#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;j&#x27;</span>, <span class="string">&#x27;k&#x27;</span>, <span class="string">&#x27;l&#x27;</span>&#125;;</span><br><span class="line">        unordered_set&lt;<span class="type">char</span>&gt; s2&#123;<span class="string">&#x27;q&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;u&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;p&#x27;</span>&#125;;</span><br><span class="line">        unordered_set&lt;<span class="type">char</span>&gt; s3&#123;<span class="string">&#x27;z&#x27;</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;v&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;m&#x27;</span>&#125;;</span><br><span class="line">        <span class="type">int</span> n = words.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;string&gt; ans;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; word : words) &#123;</span><br><span class="line">            <span class="type">bool</span> inS1 = <span class="literal">true</span>, inS2 = <span class="literal">true</span>, inS3 = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; c : word) &#123;</span><br><span class="line">                <span class="type">char</span> ch = <span class="built_in">tolower</span>(c); <span class="comment">// 记得转换成小写,注意tolower()返回的是int值</span></span><br><span class="line">                <span class="comment">// 或者写作auto ch = char(tolower(c));</span></span><br><span class="line">                <span class="keyword">if</span> (inS1 &amp;&amp; (s.<span class="built_in">find</span>(ch) == s.<span class="built_in">end</span>())) &#123;</span><br><span class="line">                    inS1 = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (inS2 &amp;&amp; (s2.<span class="built_in">find</span>(ch) == s2.<span class="built_in">end</span>())) &#123;</span><br><span class="line">                    inS2 = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (inS3 &amp;&amp; (s3.<span class="built_in">find</span>(ch) == s3.<span class="built_in">end</span>())) &#123;</span><br><span class="line">                    inS3 = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (inS1 || inS2 || inS3) &#123;</span><br><span class="line">                ans.<span class="built_in">push_back</span>(word);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>法三：正则</p><p>41ms,20.8MB</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isValid</span><span class="params">(string&amp; word)</span> </span>&#123;</span><br><span class="line">        <span class="function">std::regex <span class="title">pattern</span><span class="params">(<span class="string">&quot;^[QqWwEeRrTtYyUuIiOoPp]*$|^[AaSsDdFfGgHhJjKkLl]*$|^[ZzXxCcVvBbNnMm]*$&quot;</span>)</span></span>;</span><br><span class="line">        <span class="keyword">if</span> (std::<span class="built_in">regex_match</span>(word, pattern)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">findWords</span><span class="params">(vector&lt;string&gt;&amp; words)</span> </span>&#123;</span><br><span class="line">        vector&lt;string&gt; ans;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; word : words) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">isValid</span>(word)) &#123;</span><br><span class="line">                ans.<span class="built_in">emplace_back</span>(word);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/03/28/86NXqkOvRoCaFux.png" alt="chrome_oAb79KjUWh"></p><h2 id="1-6-单词规律：290"><a href="#1-6-单词规律：290" class="headerlink" title="1-6.单词规律：290"></a>1-6.单词规律：290</h2><p>由于要记录string和char，所以需要使用map而不是set.</p><p>注意：pattern=”abba”,s=”dog dog dog dog”时，应该输出false.所以不止要记录char-&gt;string,还要记录string-&gt;char.</p><p>pattern=”aaa”,s=”aa aa aa aa”时，应该输出false.所以最终不能单纯返回true,而是返回长度比较。</p><p>官方解答：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">wordPattern</span><span class="params">(string pattern, string str)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;string, <span class="type">char</span>&gt; str2ch;</span><br><span class="line">        unordered_map&lt;<span class="type">char</span>, string&gt; ch2str;</span><br><span class="line">        <span class="type">int</span> m = str.<span class="built_in">length</span>();</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> ch : pattern) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= m) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> j = i;</span><br><span class="line">            <span class="keyword">while</span> (j &lt; m &amp;&amp; str[j] != <span class="string">&#x27; &#x27;</span>) j++;</span><br><span class="line">            <span class="type">const</span> string &amp;tmp = str.<span class="built_in">substr</span>(i, j - i);</span><br><span class="line">            <span class="keyword">if</span> (str2ch.<span class="built_in">count</span>(tmp) &amp;&amp; str2ch[tmp] != ch) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (ch2str.<span class="built_in">count</span>(ch) &amp;&amp; ch2str[ch] != tmp) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            str2ch[tmp] = ch;</span><br><span class="line">            ch2str[ch] = tmp;</span><br><span class="line">            i = j + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> i &gt;= m;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>类似题：同构字符串205（更简单，因为都是一对一字符且无空格）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isIsomorphic</span><span class="params">(string s, string t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s.<span class="built_in">length</span>() != t.<span class="built_in">length</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        unordered_map&lt;<span class="type">char</span>, <span class="type">char</span>&gt; s2t;</span><br><span class="line">        unordered_map&lt;<span class="type">char</span>, <span class="type">char</span>&gt; t2s;</span><br><span class="line">        <span class="type">int</span> n = s.<span class="built_in">length</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="type">char</span> ch = s[i], ch2 = t[i];</span><br><span class="line">            <span class="keyword">if</span> (s2t.<span class="built_in">count</span>(ch) &amp;&amp; s2t[ch] != ch2) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (t2s.<span class="built_in">count</span>(ch2) &amp;&amp; t2s[ch2] != ch) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            s2t[ch] = ch2;</span><br><span class="line">            t2s[ch2] = ch;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="1-7-数组中的k-diff数对：532"><a href="#1-7-数组中的k-diff数对：532" class="headerlink" title="1-7.数组中的k-diff数对：532"></a>1-7.数组中的k-diff数对：532</h2><p>法一：哈希表</p><p>res放入的是每次数对中较小的那个数，unordered_set可以起到去重的一个作用，这样可以很容易地处理k=0时的情况。multiset记录nums/常数res记录最终答案，都在处理k=0时比较复杂。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findPairs</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        unordered_set&lt;<span class="type">int</span>&gt; visited;</span><br><span class="line">        unordered_set&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">            <span class="keyword">if</span> (visited.<span class="built_in">count</span>(num - k)) &#123;</span><br><span class="line">                res.<span class="built_in">emplace</span>(num - k);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (visited.<span class="built_in">count</span>(num + k)) &#123;</span><br><span class="line">                res.<span class="built_in">emplace</span>(num);</span><br><span class="line">            &#125;</span><br><span class="line">            visited.<span class="built_in">emplace</span>(num);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="built_in">size</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>法二：数组排序+双指针</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findPairs</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>(), res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; n &amp;&amp; j &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">0</span> || nums[i - <span class="number">1</span>] != nums[i]) &#123;</span><br><span class="line">                <span class="keyword">while</span> (j &lt; n &amp;&amp; (nums[j] &lt; nums[i] + k || j &lt;= i)) &#123;</span><br><span class="line">                    j++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (j &lt; n &amp;&amp; nums[j] == nums[i] + k) &#123;</span><br><span class="line">                    res++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="1-8-统计重复个数：466（困难）"><a href="#1-8-统计重复个数：466（困难）" class="headerlink" title="1-8.统计重复个数：466（困难）"></a>1-8.统计重复个数：466（困难）</h2><p>法一：暴力法（超时）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getMaxRepetitions</span><span class="params">(string s1, <span class="type">int</span> n1, string s2, <span class="type">int</span> n2)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> index = <span class="number">0</span>, repeat_count = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> s1_size = s1.<span class="built_in">size</span>(), s2_size = s2.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n1; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; s1_size; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (s1[j] == s2[index]) &#123;</span><br><span class="line">                    index++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (index == s2_size) &#123;</span><br><span class="line">                    index = <span class="number">0</span>;</span><br><span class="line">                    repeat_count++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> repeat_count / n2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>法二：找出循环节</p><p>详见官方视频讲解。使用<code>unordered_map&lt;int,pair&lt;int,int&gt;&gt;&gt;</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getMaxRepetitions</span><span class="params">(string s1, <span class="type">int</span> n1, string s2, <span class="type">int</span> n2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n1 == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> s1cnt = <span class="number">0</span>, index = <span class="number">0</span>, s2cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// recall 是我们用来找循环节的变量，它是一个哈希映射</span></span><br><span class="line">        <span class="comment">// 我们如何找循环节？假设我们遍历了 s1cnt 个 s1，此时匹配到了第 s2cnt 个 s2 中的第 index 个字符</span></span><br><span class="line">        <span class="comment">// 如果我们之前遍历了 s1cnt&#x27; 个 s1 时，匹配到的是第 s2cnt&#x27; 个 s2 中同样的第 index 个字符，那么就有循环节了</span></span><br><span class="line">        <span class="comment">// 我们用 (s1cnt&#x27;, s2cnt&#x27;, index) 和 (s1cnt, s2cnt, index) 表示两次包含相同 index 的匹配结果</span></span><br><span class="line">        <span class="comment">// 那么哈希映射中的键就是 index，值就是 (s1cnt&#x27;, s2cnt&#x27;) 这个二元组</span></span><br><span class="line">        <span class="comment">// 循环节就是；</span></span><br><span class="line">        <span class="comment">//    - 前 s1cnt&#x27; 个 s1 包含了 s2cnt&#x27; 个 s2</span></span><br><span class="line">        <span class="comment">//    - 以后的每 (s1cnt - s1cnt&#x27;) 个 s1 包含了 (s2cnt - s2cnt&#x27;) 个 s2</span></span><br><span class="line">        <span class="comment">// 那么还会剩下 (n1 - s1cnt&#x27;) % (s1cnt - s1cnt&#x27;) 个 s1, 我们对这些与 s2 进行暴力匹配</span></span><br><span class="line">        <span class="comment">// 注意 s2 要从第 index 个字符开始匹配</span></span><br><span class="line">        unordered_map&lt;<span class="type">int</span>, pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; recall;</span><br><span class="line">        pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pre_loop, in_loop;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="comment">// 我们多遍历一个 s1，看看能不能找到循环节</span></span><br><span class="line">            ++s1cnt;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">char</span> ch: s1) &#123;</span><br><span class="line">                <span class="keyword">if</span> (ch == s2[index]) &#123;</span><br><span class="line">                    index += <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">if</span> (index == s2.<span class="built_in">size</span>()) &#123;</span><br><span class="line">                        ++s2cnt;</span><br><span class="line">                        index = <span class="number">0</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 还没有找到循环节，所有的 s1 就用完了</span></span><br><span class="line">            <span class="keyword">if</span> (s1cnt == n1) &#123;</span><br><span class="line">                <span class="keyword">return</span> s2cnt / n2;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 出现了之前的 index，表示找到了循环节</span></span><br><span class="line">            <span class="keyword">if</span> (recall.<span class="built_in">count</span>(index)) &#123;</span><br><span class="line">                <span class="keyword">auto</span> [s1cnt_prime, s2cnt_prime] = recall[index];</span><br><span class="line">                <span class="comment">// 前 s1cnt&#x27; 个 s1 包含了 s2cnt&#x27; 个 s2</span></span><br><span class="line">                pre_loop = &#123;s1cnt_prime, s2cnt_prime&#125;;</span><br><span class="line">                <span class="comment">// 以后的每 (s1cnt - s1cnt&#x27;) 个 s1 包含了 (s2cnt - s2cnt&#x27;) 个 s2</span></span><br><span class="line">                in_loop = &#123;s1cnt - s1cnt_prime, s2cnt - s2cnt_prime&#125;;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                recall[index] = &#123;s1cnt, s2cnt&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// ans 存储的是 S1 包含的 s2 的数量，考虑的之前的 pre_loop 和 in_loop</span></span><br><span class="line">        <span class="type">int</span> ans = pre_loop.second + (n1 - pre_loop.first) / in_loop.first * in_loop.second;</span><br><span class="line">        <span class="comment">// S1 的末尾还剩下一些 s1，我们暴力进行匹配</span></span><br><span class="line">        <span class="type">int</span> rest = (n1 - pre_loop.first) % in_loop.first;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; rest; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">char</span> ch: s1) &#123;</span><br><span class="line">                <span class="keyword">if</span> (ch == s2[index]) &#123;</span><br><span class="line">                    ++index;</span><br><span class="line">                    <span class="keyword">if</span> (index == s2.<span class="built_in">size</span>()) &#123;</span><br><span class="line">                        ++ans;</span><br><span class="line">                        index = <span class="number">0</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// S1 包含 ans 个 s2，那么就包含 ans / n2 个 S2</span></span><br><span class="line">        <span class="keyword">return</span> ans / n2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="1-9-随机链表的复制：138"><a href="#1-9-随机链表的复制：138" class="headerlink" title="1-9.随机链表的复制：138"></a>1-9.随机链表的复制：138</h2><p>注意题干要求，返回的是原链表的深拷贝，不能直接<code>return head;</code></p><blockquote><p>深拷贝与浅拷贝的区别：</p><pre><code>当出现类的等号赋值时，会调用拷贝函数，在未定义显示拷贝构造函数的情况下，系统会调用**默认的拷贝函数－即浅拷贝**，它能够完成成员的一一复制。当数据成员中&lt;u&gt;没有指针&lt;/u&gt;时，浅拷贝是可行的。但当数据成员中有指针时，如果采用简单的浅拷贝，则两类中的两个指针指向同一个地址，当对象快要结束时，会调用两次析构函数，而导致**野指针**的问题。所以，这时必需采用深拷贝。深拷贝与浅拷贝之间的区别就在于深拷贝会在堆内存中**另外申请空间来存储数据**，从而也就解决来野指针的问题。简而言之，当数据成员中**有指针**时，必须要用深拷贝更加安全。</code></pre></blockquote><p>法一：回溯+哈希表+递归</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">// Definition for a Node.</span></span><br><span class="line"><span class="comment">class Node &#123;</span></span><br><span class="line"><span class="comment">public:</span></span><br><span class="line"><span class="comment">    int val;</span></span><br><span class="line"><span class="comment">    Node* next;</span></span><br><span class="line"><span class="comment">    Node* random;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Node(int _val) &#123;</span></span><br><span class="line"><span class="comment">        val = _val;</span></span><br><span class="line"><span class="comment">        next = NULL;</span></span><br><span class="line"><span class="comment">        random = NULL;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    unordered_map&lt;Node*, Node*&gt; cachedNode;</span><br><span class="line">    <span class="function">Node* <span class="title">copyRandomList</span><span class="params">(Node* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!cachedNode.<span class="built_in">count</span>(head)) &#123;</span><br><span class="line">            Node* temp = <span class="keyword">new</span> <span class="built_in">Node</span>(head-&gt;val);</span><br><span class="line">            cachedNode[head] = temp;</span><br><span class="line">            temp-&gt;next = <span class="built_in">copyRandomList</span>(head-&gt;next);</span><br><span class="line">            temp-&gt;random = <span class="built_in">copyRandomList</span>(head-&gt;random);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cachedNode[head];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>法二：迭代+节点拆分</p><p>详见官方图解。简而言之是将A-&gt;B-&gt;C拆分为A-&gt;A’-&gt;B-&gt;B’-&gt;C-&gt;C’，再变成A’-&gt;B’-&gt;C’。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">Node* <span class="title">copyRandomList</span><span class="params">(Node* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (Node* node = head; node != <span class="literal">nullptr</span>; node = node-&gt;next-&gt;next) &#123;</span><br><span class="line">            Node* temp = <span class="keyword">new</span> <span class="built_in">Node</span>(node-&gt;val);</span><br><span class="line">            temp-&gt;next = node-&gt;next;</span><br><span class="line">            node-&gt;next = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (Node* node = head; node != <span class="literal">nullptr</span>; node = node-&gt;next-&gt;next) &#123;</span><br><span class="line">            Node* temp = node-&gt;next;</span><br><span class="line">            temp-&gt;random = node-&gt;random ? node-&gt;random-&gt;next : <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Node* headNew = head-&gt;next;</span><br><span class="line">        <span class="keyword">for</span> (Node* node = head; node; node = node-&gt;next) &#123;</span><br><span class="line">            Node* temp = node-&gt;next;</span><br><span class="line">            node-&gt;next = node-&gt;next-&gt;next;</span><br><span class="line">            temp-&gt;next = temp-&gt;next ? temp-&gt;next-&gt;next : <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> headNew;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="1-10-分数到小数：166"><a href="#1-10-分数到小数：166" class="headerlink" title="1-10.分数到小数：166"></a>1-10.分数到小数：166</h2><p>参考《2.1字符串篇(2)》。进阶：<a href="https://leetcode.cn/problems/fraction-to-recurring-decimal/solutions/2486619/wu-xu-ha-xi-gua-yong-yu-ren-yi-jin-zhi-d-0cv7/">无需哈希 + 适用于任意进制的分数到小数—leetcode</a></p><hr><h1 id="2-哈希表与索引"><a href="#2-哈希表与索引" class="headerlink" title="2.哈希表与索引"></a>2.哈希表与索引</h1><h2 id="2-1-两数之和：1"><a href="#2-1-两数之和：1" class="headerlink" title="2-1.两数之和：1"></a>2-1.两数之和：1</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">twoSum</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; hashtable;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">auto</span> it = hashtable.<span class="built_in">find</span>(target - nums[i]);</span><br><span class="line">            <span class="keyword">if</span> (it != hashtable.<span class="built_in">end</span>()) &#123;</span><br><span class="line">                <span class="keyword">return</span> &#123;it-&gt;second, i&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 没有找到，则插入该数字</span></span><br><span class="line">            hashtable[nums[i]] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;; <span class="comment">// 必须要有一个返回内容</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>哈希表的find()函数返回的是迭代器类型。</p></blockquote><h2 id="2-2-两数之和II—输入有序数组：167"><a href="#2-2-两数之和II—输入有序数组：167" class="headerlink" title="2-2.两数之和II—输入有序数组：167"></a>2-2.两数之和II—输入有序数组：167</h2><p>该题要求空间复杂度为$O(1)$，所以不能使用哈希表。</p><p>法一：二分查找</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">twoSum</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; numbers, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; numbers.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">            <span class="type">int</span> low = i + <span class="number">1</span>, high = numbers.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">                <span class="type">int</span> mid = (high - low) / <span class="number">2</span> + low;</span><br><span class="line">                <span class="keyword">if</span> (numbers[mid] == target - numbers[i]) &#123;</span><br><span class="line">                    <span class="keyword">return</span> &#123;i + <span class="number">1</span>, mid + <span class="number">1</span>&#125;;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (numbers[mid] &gt; target - numbers[i]) &#123;</span><br><span class="line">                    high = mid - <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    low = mid + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="number">-1</span>, <span class="number">-1</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>法二：双指针（最优）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">twoSum</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; numbers, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> low = <span class="number">0</span>, high = numbers.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (numbers[low] + numbers[high] != target &amp;&amp; low &lt; high) &#123;</span><br><span class="line">            <span class="keyword">if</span> (numbers[low] + numbers[high] &lt; target) &#123;</span><br><span class="line">                low++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                high--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123;low + <span class="number">1</span>, high + <span class="number">1</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="2-3-存在重复元素II：219"><a href="#2-3-存在重复元素II：219" class="headerlink" title="2-3.存在重复元素II：219"></a>2-3.存在重复元素II：219</h2><p>法一：哈希表</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">containsNearbyDuplicate</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; index; <span class="comment">//&lt;值num，索引i&gt;</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (index.<span class="built_in">count</span>(nums[i]) &amp;&amp; i - index[nums[i]] &lt;= k) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            index[nums[i]] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>法二：滑动窗口</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">containsNearbyDuplicate</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        unordered_set&lt;<span class="type">int</span>&gt; s;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; k) &#123;</span><br><span class="line">                s.<span class="built_in">erase</span>(nums[i - k - <span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (s.<span class="built_in">count</span>(nums[i])) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            s.<span class="built_in">emplace</span>(nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="2-4-存在重复元素III：220（困难）"><a href="#2-4-存在重复元素III：220（困难）" class="headerlink" title="2-4.存在重复元素III：220（困难）"></a>2-4.存在重复元素III：220（困难）</h2><p>法一：滑动窗口+有序集合</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">containsNearbyAlmostDuplicate</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> indexDiff, <span class="type">int</span> valueDiff)</span> </span>&#123;</span><br><span class="line">        set&lt;<span class="type">int</span>&gt; s;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="type">int</span> leftBoundary = <span class="built_in">max</span>(nums[i], INT_MIN + valueDiff) - valueDiff;</span><br><span class="line">            <span class="type">int</span> rightBoundary = <span class="built_in">min</span>(nums[i], INT_MAX - valueDiff) + valueDiff;</span><br><span class="line">            <span class="keyword">auto</span> it = s.<span class="built_in">lower_bound</span>(leftBoundary);</span><br><span class="line">            <span class="keyword">if</span> (it != s.<span class="built_in">end</span>() &amp;&amp; *it &lt;= rightBoundary) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            s.<span class="built_in">insert</span>(nums[i]);</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= indexDiff) &#123;</span><br><span class="line">                s.<span class="built_in">erase</span>(nums[i - indexDiff]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><pre><code>`s.lower_bound(leftBoundary)`将返回第一个&gt;=leftBoundary的元素的迭代器，如果未找到，则返回一个指向末尾的迭代器。</code></pre><p>法二：滑动窗口+哈希表+桶排序（最优解）</p><pre><code>使用set时，插入或者删除一次元素的时间复杂度为$O(log(min(n,IndexDiff)))$，哈希表＋桶排序则为$O(1)$。</code></pre><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getIndex</span><span class="params">(<span class="type">int</span> x, <span class="type">long</span> w)</span> </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> x &lt; <span class="number">0</span> ? (x + <span class="number">1ll</span>) / w - <span class="number">1</span> : x / w; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">containsNearbyAlmostDuplicate</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> indexDiff, <span class="type">int</span> valueDiff)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; mp;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="type">long</span> x = nums[i]; <span class="comment">// long存储避免溢出</span></span><br><span class="line">            <span class="type">int</span> index = <span class="built_in">getIndex</span>(x, valueDiff + <span class="number">1ll</span>);</span><br><span class="line">            <span class="keyword">if</span> (mp.<span class="built_in">count</span>(index) ||</span><br><span class="line">                mp.<span class="built_in">count</span>(index - <span class="number">1</span>) &amp;&amp; <span class="built_in">abs</span>(x - mp[index - <span class="number">1</span>]) &lt;= valueDiff ||</span><br><span class="line">                mp.<span class="built_in">count</span>(index + <span class="number">1</span>) &amp;&amp; <span class="built_in">abs</span>(x - mp[index + <span class="number">1</span>]) &lt;= valueDiff) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            mp[index] = x;</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= indexDiff) &#123;</span><br><span class="line">                mp.<span class="built_in">erase</span>(<span class="built_in">getIndex</span>(nums[i - indexDiff], valueDiff + <span class="number">1ll</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> leetcode刷题笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> leetcode </tag>
            
            <tag> 哈希表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5.链表篇</title>
      <link href="/posts/f83528c7.html"/>
      <url>/posts/f83528c7.html</url>
      
        <content type="html"><![CDATA[<h1 id="关于链表"><a href="#关于链表" class="headerlink" title="关于链表"></a>关于链表</h1><p>各种方法的详细实现：<a href="https://zhuanlan.zhihu.com/p/136177205">链表的基本实现—知乎</a></p><p>理论基础：<a href="https://programmercarl.com/%E9%93%BE%E8%A1%A8%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80.html#%E9%93%BE%E8%A1%A8%E7%9A%84%E7%B1%BB%E5%9E%8B">链表—代码随想录</a></p><p>单链表：</p><h5 id="1-构建单链表"><a href="#1-构建单链表" class="headerlink" title="(1)构建单链表"></a>(1)构建单链表</h5><p><img src="https://s2.loli.net/2024/03/18/WMjm4zDaEThZYCe.png" alt="firefox_BIFDvSSmwv"></p><blockquote><p>注：<a href="https://zhuanlan.zhihu.com/p/360838187">单链表、循环链表、双链表的表示与实现—知乎</a></p><p><img src="C:\Users\huangjiakun\Pictures\ShareX\Screenshots\2024-03\firefox_MoglKjc02n.png" alt="firefox_MoglKjc02n"></p><p>双链表，循环链表原理：</p><p><img src="https://s2.loli.net/2024/03/18/te68uaFDYIHikJK.png" alt="firefox_paniklnKLw"></p><p><img title="" src="https://s2.loli.net/2024/03/18/BHoimFhuCv2aPEf.png" alt="firefox_qID1ULZZiK" width="307"></p></blockquote><p>定义并实现一个带表头结点的通用单链表类LinkList,该单链表类可以适用于整数、实数和字符数据等。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Node&lt;T&gt; *next;</span><br><span class="line">    Node&lt;T&gt; *prev;</span><br><span class="line">    T data;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">List</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">List</span>();<span class="comment">//默认构造函数</span></span><br><span class="line">    <span class="built_in">List</span>(<span class="type">const</span> List&amp; ln);<span class="comment">//拷贝构造函数</span></span><br><span class="line">    ~<span class="built_in">List</span>();<span class="comment">//析构函数</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(T e)</span></span>;<span class="comment">//向链表添加数据</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">ascSort</span><span class="params">()</span></span>;<span class="comment">//升序排序</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">remove</span><span class="params">(T index)</span></span>;<span class="comment">//移除某个结点</span></span><br><span class="line">    <span class="function">T <span class="title">find</span><span class="params">(<span class="type">int</span> index)</span></span>;<span class="comment">//查找结点</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isEmpty</span><span class="params">()</span></span>;<span class="comment">//判断是否为空</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">size</span><span class="params">()</span></span>;<span class="comment">//链表长度</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span></span>;<span class="comment">//显示链表</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">resShow</span><span class="params">()</span></span>;<span class="comment">//链表反向显示</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">removeAll</span><span class="params">()</span></span>;<span class="comment">//删除全部结点</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Node&lt;T&gt; *head;</span><br><span class="line">    Node&lt;T&gt; *tail;</span><br><span class="line">    <span class="type">int</span> length;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>定义单链表结构。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单链表</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ListNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    ListNode* next;</span><br><span class="line">    <span class="built_in">ListNode</span>() : <span class="built_in">val</span>(<span class="number">0</span>), <span class="built_in">next</span>(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">    <span class="built_in">ListNode</span>(<span class="type">int</span> x) : <span class="built_in">val</span>(x), <span class="built_in">next</span>(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">    <span class="built_in">ListNode</span>(<span class="type">int</span> x, ListNode* next) : <span class="built_in">val</span>(x), <span class="built_in">next</span>(next) &#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/03/18/EhoWkd7a1cDKniT.png" alt="firefox_1qQZVGZHEf"></p><h5 id="2-构造函数"><a href="#2-构造函数" class="headerlink" title="(2)构造函数"></a>(2)构造函数</h5><p>默认构造函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">List&lt;T&gt;::<span class="built_in">List</span>()</span><br><span class="line">&#123;</span><br><span class="line">    head = <span class="keyword">new</span> Node&lt;T&gt;;</span><br><span class="line">    tail = <span class="keyword">new</span> Node&lt;T&gt;;</span><br><span class="line">    head-&gt;next = tail;</span><br><span class="line">    head-&gt;prev = <span class="literal">nullptr</span>;</span><br><span class="line">    tail-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">    tail-&gt;prev = head;</span><br><span class="line">    length = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>拷贝构造函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">List&lt;T&gt;::<span class="built_in">List</span>(<span class="type">const</span> List &amp;ln)</span><br><span class="line">&#123;</span><br><span class="line">    head = <span class="keyword">new</span> Node&lt;T&gt;;</span><br><span class="line">    head-&gt;prev = <span class="literal">nullptr</span>;</span><br><span class="line">    tail = <span class="keyword">new</span> Node&lt;T&gt;;</span><br><span class="line">    head-&gt;next = tail;</span><br><span class="line">    tail-&gt;prev = head;</span><br><span class="line">    length = <span class="number">0</span>;</span><br><span class="line">    Node&lt;T&gt;* temp = ln.head;</span><br><span class="line">    <span class="keyword">while</span> (temp-&gt;next != ln.tail)</span><br><span class="line">    &#123;</span><br><span class="line">        temp = temp-&gt;next;</span><br><span class="line">        tail-&gt;data = temp-&gt;data;</span><br><span class="line">        Node&lt;T&gt; *p = <span class="keyword">new</span> Node&lt;T&gt;;</span><br><span class="line">        p-&gt;prev = tail;</span><br><span class="line">        tail-&gt;next = p;</span><br><span class="line">        tail = p;</span><br><span class="line">        length++;</span><br><span class="line">    &#125;</span><br><span class="line">    tail-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-增：向链表添加数据-添加结点"><a href="#3-增：向链表添加数据-添加结点" class="headerlink" title="(3)增：向链表添加数据(添加结点)"></a>(3)增：向链表添加数据(添加结点)</h5><p><img src="https://s2.loli.net/2024/03/18/i8vzp4xsoSYVDQB.png" alt="firefox_DUiQ0BKvOa"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="type">void</span> List&lt;T&gt;::<span class="built_in">add</span>(T e)</span><br><span class="line">&#123;</span><br><span class="line">    Node&lt;T&gt;* temp = <span class="keyword">this</span>-&gt;tail;</span><br><span class="line">    tail-&gt;data = e;</span><br><span class="line">    tail-&gt;next = <span class="keyword">new</span> Node&lt;T&gt;;</span><br><span class="line">    Node&lt;T&gt; *p = tail;</span><br><span class="line">    tail = tail-&gt;next;</span><br><span class="line">    tail-&gt;prev = p;</span><br><span class="line">    tail-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">    length++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-查：查找结点"><a href="#4-查：查找结点" class="headerlink" title="(4)查：查找结点"></a>(4)查：查找结点</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">T List&lt;T&gt;::<span class="built_in">find</span>(<span class="type">int</span> index)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (length == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;List is empty&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (index &gt;= length)</span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Out of bounds&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line">    T data;</span><br><span class="line">    Node&lt;T&gt; *p;</span><br><span class="line">    <span class="keyword">if</span> (index &lt; length / <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        p = head-&gt;next;</span><br><span class="line">        <span class="keyword">while</span> (p-&gt;next != <span class="literal">nullptr</span> &amp;&amp; x++ != index)</span><br><span class="line">        &#123;</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        p = tail-&gt;prev;</span><br><span class="line">        <span class="keyword">while</span> (p-&gt;prev != <span class="literal">nullptr</span> &amp;&amp; x++ != index)</span><br><span class="line">        &#123;</span><br><span class="line">            p = p-&gt;prev;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p-&gt;data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="5-删：删除结点"><a href="#5-删：删除结点" class="headerlink" title="(5)删：删除结点"></a>(5)删：删除结点</h5><p><img src="https://s2.loli.net/2024/03/18/r6Y9Jvz1OqPSHB8.png" alt="firefox_uXUFIzsll9"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="type">void</span> List&lt;T&gt;::<span class="built_in">remove</span>(T index)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (length == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;List is empty&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Node&lt;T&gt; *p = head;</span><br><span class="line">    <span class="keyword">while</span> (p-&gt;next != <span class="literal">nullptr</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">        <span class="keyword">if</span> (p-&gt;data == index)</span><br><span class="line">        &#123;</span><br><span class="line">            Node&lt;T&gt; *temp = p-&gt;prev;</span><br><span class="line">            temp-&gt;next = p-&gt;next;</span><br><span class="line">            p-&gt;next-&gt;prev = temp;</span><br><span class="line">            <span class="keyword">delete</span> p;</span><br><span class="line">            length--;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="6-删除所有结点"><a href="#6-删除所有结点" class="headerlink" title="(6)删除所有结点"></a>(6)删除所有结点</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="type">void</span> List&lt;T&gt;::<span class="built_in">removeAll</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (length == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Node&lt;T&gt; *p = head-&gt;next;</span><br><span class="line">    <span class="keyword">while</span> (p != tail)</span><br><span class="line">    &#123;</span><br><span class="line">        Node&lt;T&gt;* temp = p;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line">    head-&gt;next = tail;</span><br><span class="line">    tail-&gt;prev = head;</span><br><span class="line">    length = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="7-升序排序"><a href="#7-升序排序" class="headerlink" title="(7)升序排序"></a>(7)升序排序</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="type">void</span> List&lt;T&gt;::<span class="built_in">ascSort</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (length &lt;= <span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">    Node&lt;T&gt; *p = head-&gt;next;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; length - <span class="number">1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        Node&lt;T&gt; *q = p-&gt;next;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; length; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (p-&gt;data &gt; q-&gt;data)</span><br><span class="line">            &#123;</span><br><span class="line">                T temp = q-&gt;data;</span><br><span class="line">                q-&gt;data = p-&gt;data;</span><br><span class="line">                p-&gt;data = temp;</span><br><span class="line">            &#125;</span><br><span class="line">            q = q-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="8-判断是否为空"><a href="#8-判断是否为空" class="headerlink" title="(8)判断是否为空"></a>(8)判断是否为空</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="type">bool</span> List&lt;T&gt;::<span class="built_in">isEmpty</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> length == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="9-获取链表长度"><a href="#9-获取链表长度" class="headerlink" title="(9)获取链表长度"></a>(9)获取链表长度</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="type">int</span> List&lt;T&gt;::<span class="built_in">size</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="10-输出链表"><a href="#10-输出链表" class="headerlink" title="(10)输出链表"></a>(10)输出链表</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="type">void</span> List&lt;T&gt;::<span class="built_in">show</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (length == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;List is empty&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Node&lt;T&gt; *p = head-&gt;next;</span><br><span class="line">    <span class="keyword">while</span> (p != tail)</span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; p-&gt;data &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="11-反向输出链表"><a href="#11-反向输出链表" class="headerlink" title="(11)反向输出链表"></a>(11)反向输出链表</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="type">void</span> List&lt;T&gt;::<span class="built_in">resShow</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (length == <span class="number">0</span>)<span class="keyword">return</span>;</span><br><span class="line">    Node&lt;T&gt; *p = tail-&gt;prev;</span><br><span class="line">    <span class="keyword">while</span> (p != head)</span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; p-&gt;data &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        p = p-&gt;prev;</span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="12-析构函数"><a href="#12-析构函数" class="headerlink" title="(12)析构函数"></a>(12)析构函数</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">List&lt;T&gt;::~<span class="built_in">List</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (length == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">delete</span> head;</span><br><span class="line">        <span class="keyword">delete</span> tail;</span><br><span class="line">        head = <span class="literal">nullptr</span>;</span><br><span class="line">        tail = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (head-&gt;next != <span class="literal">nullptr</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        Node&lt;T&gt; *temp = head;</span><br><span class="line">        head = head-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">delete</span> head;</span><br><span class="line">    head = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="1-链表的删除"><a href="#1-链表的删除" class="headerlink" title="1.链表的删除"></a>1.链表的删除</h1><h4 id="1-1-移除链表元素：203"><a href="#1-1-移除链表元素：203" class="headerlink" title="1-1.移除链表元素：203"></a>1-1.移除链表元素：203</h4><p>法一：递归</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">removeElements</span><span class="params">(ListNode* head, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">nullptr</span>) &#123;  <span class="comment">//递归终止条件:当前结点为空</span></span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">        head-&gt;next = <span class="built_in">removeElements</span>(head-&gt;next, val);</span><br><span class="line">        <span class="keyword">return</span> head-&gt;val == val ? head-&gt;next : head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>法二：迭代</p><p>哑节点dummyHead，用来放置在head的前面(<code>dummyHead-&gt;next = head</code>)，用来解决头节点head可能被删除的情况。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">removeElements</span><span class="params">(ListNode* head, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        ListNode* DummyHead = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">0</span>, head);</span><br><span class="line">        ListNode* temp = DummyHead; <span class="comment">// 对应当前节点的临时节点</span></span><br><span class="line">        <span class="keyword">while</span> (temp-&gt;next) &#123;</span><br><span class="line">            <span class="keyword">if</span> (temp-&gt;next-&gt;val == val) &#123;</span><br><span class="line">                temp-&gt;next = temp-&gt;next-&gt;next;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                temp = temp-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> DummyHead-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="1-2-删除链表中的节点：237"><a href="#1-2-删除链表中的节点：237" class="headerlink" title="1-2.删除链表中的节点：237"></a>1-2.删除链表中的节点：237</h4><pre><code>删除链表中的节点的常见的方法是定位到待删除节点的上一个节点，修改上一个节点的 next 指针，使其指向待删除节点的下一个节点，即可完成删除操作。而这道题中，无法定位到该节点的上一个节点，因此需要换一种方式。</code></pre><p>和下一节点交换：(将要删除节点的值变为其next节点，然后将next节点删除)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">deleteNode</span><span class="params">(ListNode* node)</span> </span>&#123;</span><br><span class="line">        node-&gt;val = node-&gt;next-&gt;val;</span><br><span class="line">        node-&gt;next = node-&gt;next-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="1-3-删除链表的第N个节点：19"><a href="#1-3-删除链表的第N个节点：19" class="headerlink" title="1-3.删除链表的第N个节点：19"></a>1-3.删除链表的第N个节点：19</h4><p>法一：先获取长度，然后定位到倒数第N个节点。</p><p>错解：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">removeNthFromEnd</span><span class="params">(ListNode* head, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取链表长度</span></span><br><span class="line">        <span class="type">int</span> length = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (head) &#123;</span><br><span class="line">            ++length;</span><br><span class="line">            head = head-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 定位节点并删除</span></span><br><span class="line">        ListNode* DummyHead = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">0</span>, head);</span><br><span class="line">        ListNode* temp = DummyHead; <span class="comment">// 第0个节点i=0</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; length + <span class="number">1</span> - n;</span><br><span class="line">             i++) &#123; <span class="comment">// 遍历倒数第N+1个节点前面的所有节点,注意i初始值为1</span></span><br><span class="line">            temp = temp-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        temp-&gt;next = temp-&gt;next-&gt;next;</span><br><span class="line">        ListNode* ans = DummyHead-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> DummyHead;</span><br><span class="line">        <span class="keyword">return</span> ans; <span class="comment">// 不能直接返回head,因为之前的head可能是要删除的那个节点</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>原因：在获取长度时，head已经发生了改变，因此之后的DummyHead节点就出了问题，正确解法应该是将获取链表长度单独封装为一个函数，或者是提前定义好DummyHead。</p><p>正解：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">removeNthFromEnd</span><span class="params">(ListNode* head, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        ListNode* DummyHead = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">0</span>, head); <span class="comment">// 改动</span></span><br><span class="line">        <span class="comment">// 获取链表长度</span></span><br><span class="line">        <span class="type">int</span> length = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (head) &#123;</span><br><span class="line">            ++length;</span><br><span class="line">            head = head-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 定位节点并删除</span></span><br><span class="line">        ListNode* temp = DummyHead; <span class="comment">// 第0个节点i=0</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; length + <span class="number">1</span> - n;</span><br><span class="line">             i++) &#123; <span class="comment">// 遍历倒数第N+1个节点前面的所有节点,注意i初始值为1</span></span><br><span class="line">            temp = temp-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        temp-&gt;next = temp-&gt;next-&gt;next;</span><br><span class="line">        ListNode* ans = DummyHead-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> DummyHead;</span><br><span class="line">        <span class="keyword">return</span> ans; <span class="comment">// 不能直接返回head,因为之前的head可能是要删除的那个节点</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>法二：栈(次优解，需要额外空间)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">removeNthFromEnd</span><span class="params">(ListNode* head, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        ListNode* DummyHead = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">0</span>, head);</span><br><span class="line">        stack&lt;ListNode*&gt; stk;</span><br><span class="line">        ListNode* temp = DummyHead;</span><br><span class="line">        <span class="keyword">while</span> (temp) &#123;</span><br><span class="line">            stk.<span class="built_in">push</span>(temp);</span><br><span class="line">            temp = temp-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            stk.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode* prev = stk.<span class="built_in">top</span>();</span><br><span class="line">        prev-&gt;next = prev-&gt;next-&gt;next;</span><br><span class="line">        ListNode* ans = DummyHead-&gt;next; <span class="comment">// 不能直接用head</span></span><br><span class="line">        <span class="keyword">delete</span> DummyHead;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>法三：双指针</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">removeNthFromEnd</span><span class="params">(ListNode* head, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        ListNode* DummyHead = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">0</span>, head);</span><br><span class="line">        ListNode* first = head;</span><br><span class="line">        ListNode* second = DummyHead;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            first = first-&gt;next; <span class="comment">// 让first到达第N+1个节点位置</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (first) &#123;</span><br><span class="line">            first = first-&gt;next;</span><br><span class="line">            second = second-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 现在second即为倒数第N个节点的前一个节点，现在更改其指向</span></span><br><span class="line">        second-&gt;next = second-&gt;next-&gt;next;</span><br><span class="line">        ListNode* ans = DummyHead-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> DummyHead;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="2-链表的遍历"><a href="#2-链表的遍历" class="headerlink" title="2.链表的遍历"></a>2.链表的遍历</h1><h4 id="2-1-双链表—扁平化多级双向链表：430"><a href="#2-1-双链表—扁平化多级双向链表：430" class="headerlink" title="2-1.双链表—扁平化多级双向链表：430"></a>2-1.双链表—扁平化多级双向链表：430</h4><p>法一：深度优先搜索(dfs)</p><p><img src="https://s2.loli.net/2024/03/20/pk6GJyB3iNE1ZfF.png" alt="firefox_iyrVl6hRKd"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">// Definition for a Node.</span></span><br><span class="line"><span class="comment">class Node &#123;</span></span><br><span class="line"><span class="comment">public:</span></span><br><span class="line"><span class="comment">    int val;</span></span><br><span class="line"><span class="comment">    Node* prev;</span></span><br><span class="line"><span class="comment">    Node* next;</span></span><br><span class="line"><span class="comment">    Node* child;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">Node* <span class="title">dfs</span><span class="params">(Node* node)</span> </span>&#123;</span><br><span class="line">        Node* last = <span class="literal">nullptr</span>; <span class="comment">// 记录链表最后一个节点</span></span><br><span class="line">        <span class="keyword">while</span> (node) &#123;</span><br><span class="line">            Node* next = node-&gt;next; <span class="comment">// 记录下一个节点，不能一直用node-&gt;next代替</span></span><br><span class="line">            <span class="comment">// 如果链表最后一个节点</span></span><br><span class="line">            <span class="keyword">if</span> (node-&gt;child) &#123;</span><br><span class="line">                Node* child_last = <span class="built_in">dfs</span>(node-&gt;child);</span><br><span class="line">                <span class="comment">// 将node与child相连</span></span><br><span class="line">                node-&gt;next = node-&gt;child;</span><br><span class="line">                node-&gt;child-&gt;prev = node;</span><br><span class="line">                <span class="comment">// 若node-&gt;next不为空，就将last与next相连</span></span><br><span class="line">                <span class="keyword">if</span> (next) &#123;</span><br><span class="line">                    child_last-&gt;next = next;</span><br><span class="line">                    next-&gt;prev = child_last;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 置child为空</span></span><br><span class="line">                node-&gt;child = <span class="literal">nullptr</span>;</span><br><span class="line">                last = child_last;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                last = node;</span><br><span class="line">            &#125;</span><br><span class="line">            node = node-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> last;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Node* <span class="title">flatten</span><span class="params">(Node* head)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">dfs</span>(head);</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="3-链表的旋转与反转"><a href="#3-链表的旋转与反转" class="headerlink" title="3.链表的旋转与反转"></a>3.链表的旋转与反转</h1><h4 id="3-1-旋转链表：61"><a href="#3-1-旋转链表：61" class="headerlink" title="3-1.旋转链表：61"></a>3-1.旋转链表：61</h4><p>法一：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">rotateRight</span><span class="params">(ListNode* head, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (k == <span class="number">0</span> || head == <span class="literal">nullptr</span> || head-&gt;next == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> len = <span class="number">1</span>;</span><br><span class="line">        ListNode* it = head;</span><br><span class="line">        <span class="keyword">while</span> (it-&gt;next) &#123;</span><br><span class="line">            it = it-&gt;next;</span><br><span class="line">            len++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// len记录链表长度，it现在为最后一个节点</span></span><br><span class="line">        <span class="type">int</span> n = len - k % len; <span class="comment">// 实际上只需要移动的距离</span></span><br><span class="line">        <span class="keyword">if</span> (n == len) &#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">        it-&gt;next = head;</span><br><span class="line">        <span class="keyword">while</span> (n--) &#123;</span><br><span class="line">            <span class="comment">// 找到倒数第n个节点，并让其作为头节点</span></span><br><span class="line">            it = it-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 现在it为倒数第n+1个节点，用ans记录下最终的头节点</span></span><br><span class="line">        ListNode* ans = it-&gt;next;</span><br><span class="line">        it-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="3-2-两两交换链表中的节点：24"><a href="#3-2-两两交换链表中的节点：24" class="headerlink" title="3-2.两两交换链表中的节点：24"></a>3-2.两两交换链表中的节点：24</h4><p>法一：递归</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">swapPairs</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">nullptr</span> || head-&gt;next == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode* temp = head-&gt;next;</span><br><span class="line">        head-&gt;next = <span class="built_in">swapPairs</span>(temp-&gt;next);</span><br><span class="line">        temp-&gt;next = head;</span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>法二：迭代</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">swapPairs</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        ListNode* DummyHead = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">0</span>, head);</span><br><span class="line">        ListNode* temp = DummyHead;</span><br><span class="line">        <span class="keyword">while</span> (temp-&gt;next &amp;&amp; temp-&gt;next-&gt;next) &#123;</span><br><span class="line">            ListNode* node1 = temp-&gt;next;</span><br><span class="line">            ListNode* node2 = temp-&gt;next-&gt;next;</span><br><span class="line">            <span class="comment">// 以temp作为中介</span></span><br><span class="line">            temp-&gt;next = node2;</span><br><span class="line">            node1-&gt;next = node2-&gt;next;</span><br><span class="line">            node2-&gt;next = node1;</span><br><span class="line">            temp = node1; <span class="comment">// 更新temp为下一组的&quot;DummyHead&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        ListNode* ans = DummyHead-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> DummyHead;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="3-3-反转链表：206"><a href="#3-3-反转链表：206" class="headerlink" title="3-3.反转链表：206"></a>3-3.反转链表：206</h4><p>法一：迭代</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">reverseList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        ListNode* temp = head;</span><br><span class="line">        ListNode* prev = <span class="literal">nullptr</span>; <span class="comment">// temp的前一个节点</span></span><br><span class="line">        <span class="keyword">while</span> (temp) &#123;</span><br><span class="line">            ListNode* next = temp-&gt;next; <span class="comment">// temp的后一个节点</span></span><br><span class="line">            <span class="comment">// 记录节点依次后移</span></span><br><span class="line">            temp-&gt;next = prev;</span><br><span class="line">            prev = temp;</span><br><span class="line">            temp = next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> prev;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>法二：递归</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">reverseList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!head || !head-&gt;next) &#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode* newHead = <span class="built_in">reverseList</span>(head-&gt;next);</span><br><span class="line">        head-&gt;next-&gt;next = head;</span><br><span class="line">        head-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">return</span> newHead;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="3-4-反转链表II：92"><a href="#3-4-反转链表II：92" class="headerlink" title="3-4.反转链表II：92"></a>3-4.反转链表II：92</h4><blockquote><p>最简单的操作当然是直接修改各个节点的值。</p></blockquote><p>法一：遍历两次</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">reverseLinkedList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 也可以使用递归反转一个链表</span></span><br><span class="line">        ListNode* pre = <span class="literal">nullptr</span>;</span><br><span class="line">        ListNode* cur = head;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (cur != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            ListNode* next = cur-&gt;next;</span><br><span class="line">            cur-&gt;next = pre;</span><br><span class="line">            pre = cur;</span><br><span class="line">            cur = next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">reverseBetween</span><span class="params">(ListNode* head, <span class="type">int</span> left, <span class="type">int</span> right)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 因为头节点有可能发生变化，使用虚拟头节点可以避免复杂的分类讨论</span></span><br><span class="line">        ListNode* dummyNode = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">-1</span>);</span><br><span class="line">        dummyNode-&gt;next = head;</span><br><span class="line"></span><br><span class="line">        ListNode* pre = dummyNode;</span><br><span class="line">        <span class="comment">// 第 1 步：从虚拟头节点走 left - 1 步，来到 left 节点的前一个节点</span></span><br><span class="line">        <span class="comment">// 建议写在 for 循环里，语义清晰</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; left - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            pre = pre-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第 2 步：从 pre 再走 right - left + 1 步，来到 right 节点</span></span><br><span class="line">        ListNode* rightNode = pre;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; right - left + <span class="number">1</span>; i++) &#123;</span><br><span class="line">            rightNode = rightNode-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第 3 步：切断出一个子链表（截取链表）</span></span><br><span class="line">        ListNode* leftNode = pre-&gt;next;</span><br><span class="line">        ListNode* curr = rightNode-&gt;next;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 注意：切断链接</span></span><br><span class="line">        pre-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">        rightNode-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第 4 步：同第 206 题，反转链表的子区间</span></span><br><span class="line">        <span class="built_in">reverseLinkedList</span>(leftNode);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第 5 步：接回到原来的链表中</span></span><br><span class="line">        pre-&gt;next = rightNode;</span><br><span class="line">        leftNode-&gt;next = curr;</span><br><span class="line">        <span class="keyword">return</span> dummyNode-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>值得注意的是第3步，以一种巧妙的方式截取出了子链表，从而使问题简化到问题3-3的情形。</p></blockquote><p>法二：只遍历一次(最优解)：头插法</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">reverseBetween</span><span class="params">(ListNode* head, <span class="type">int</span> left, <span class="type">int</span> right)</span> </span>&#123;</span><br><span class="line">        ListNode* DummyHead=<span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">-1</span>,head);</span><br><span class="line">        ListNode* prev=DummyHead;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;left<span class="number">-1</span>;i++)&#123;</span><br><span class="line">            prev=prev-&gt;next;<span class="comment">//让prev来到left节点的前一个节点</span></span><br><span class="line">        &#125;</span><br><span class="line">        ListNode* curr=prev-&gt;next;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=left;i&lt;right;i++)&#123;</span><br><span class="line">            <span class="comment">//每次让当前的目标节点curr置后,next变为子链表首位</span></span><br><span class="line">            <span class="comment">//prev-&gt;...-&gt;curr-&gt;next...变为prev-&gt;...-&gt;next-&gt;curr...,详见官方图解</span></span><br><span class="line">            ListNode* next=curr-&gt;next;</span><br><span class="line">            curr-&gt;next=next-&gt;next;</span><br><span class="line">            next-&gt;next=prev-&gt;next;</span><br><span class="line">            prev-&gt;next=next;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode* ans=DummyHead-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> DummyHead;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>总结：解决反转链表这一类问题，要善用prev,curr,next链表节点，以及DummyHead。</p><h4 id="3-5-K个一组反转链表：25（困难）"><a href="#3-5-K个一组反转链表：25（困难）" class="headerlink" title="3-5.K个一组反转链表：25（困难）"></a>3-5.K个一组反转链表：25（困难）</h4><p>myReverse()类比3-4头插法中的reverseBetween()，前者是已知头节点和尾节点，后者是知道头节点、起始位置left和终止位置right.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 翻转一个子链表，并且返回新的头与尾</span></span><br><span class="line">    <span class="function">pair&lt;ListNode*, ListNode*&gt; <span class="title">myReverse</span><span class="params">(ListNode* head, ListNode* tail)</span> </span>&#123;</span><br><span class="line">        ListNode* pre = tail-&gt;next;</span><br><span class="line">        ListNode* p = head;</span><br><span class="line">        <span class="keyword">while</span> (pre != tail) &#123;</span><br><span class="line">            ListNode* nex = p-&gt;next;</span><br><span class="line">            p-&gt;next = pre;</span><br><span class="line">            pre = p;</span><br><span class="line">            p = nex;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123;tail, head&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ListNode* <span class="title">reverseKGroup</span><span class="params">(ListNode* head, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        ListNode* DummyHead = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">-1</span>, head);</span><br><span class="line">        ListNode* prev = DummyHead;</span><br><span class="line">        <span class="keyword">while</span> (head) &#123;</span><br><span class="line">            ListNode* tail = prev;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = k; i &gt; <span class="number">0</span>; i--) &#123; <span class="comment">// 这里不能使用while(k--),因为会改变k的值,影响到下一次循环</span></span><br><span class="line">                tail = tail-&gt;next;</span><br><span class="line">                <span class="keyword">if</span> (tail == <span class="literal">nullptr</span>) &#123; <span class="comment">// 已经到达末尾</span></span><br><span class="line">                    ListNode* ans = DummyHead-&gt;next;</span><br><span class="line">                    <span class="keyword">delete</span> DummyHead;</span><br><span class="line">                    <span class="keyword">return</span> ans;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 循环结束后，tail为当前要反转子链表的最后一个节点</span></span><br><span class="line">            <span class="comment">// prev为反转子链表的第一个节点之前的那一个节点</span></span><br><span class="line">            ListNode* next = tail-&gt;next;</span><br><span class="line">            <span class="comment">// 反转子链表</span></span><br><span class="line">            pair&lt;ListNode*, ListNode*&gt; result = <span class="built_in">myReverse</span>(head, tail);</span><br><span class="line">            head = result.first;</span><br><span class="line">            tail = result.second;</span><br><span class="line">            <span class="comment">// 把子链表重新接回原链表</span></span><br><span class="line">            prev-&gt;next = head;</span><br><span class="line">            tail-&gt;next = next;</span><br><span class="line">            prev = tail;</span><br><span class="line">            head = tail-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode* ans = DummyHead-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> DummyHead;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>官方题解：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 翻转一个子链表，并且返回新的头与尾</span></span><br><span class="line">    <span class="function">pair&lt;ListNode*, ListNode*&gt; <span class="title">myReverse</span><span class="params">(ListNode* head, ListNode* tail)</span> </span>&#123;</span><br><span class="line">        ListNode* prev = tail-&gt;next;</span><br><span class="line">        ListNode* p = head;</span><br><span class="line">        <span class="keyword">while</span> (prev != tail) &#123;</span><br><span class="line">            ListNode* nex = p-&gt;next;</span><br><span class="line">            p-&gt;next = prev;</span><br><span class="line">            prev = p;</span><br><span class="line">            p = nex;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123;tail, head&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">ListNode* <span class="title">reverseKGroup</span><span class="params">(ListNode* head, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        ListNode* hair = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">        hair-&gt;next = head;</span><br><span class="line">        ListNode* pre = hair;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (head) &#123;</span><br><span class="line">            ListNode* tail = pre;</span><br><span class="line">            <span class="comment">// 查看剩余部分长度是否大于等于 k</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; k; ++i) &#123;</span><br><span class="line">                tail = tail-&gt;next;</span><br><span class="line">                <span class="keyword">if</span> (!tail) &#123;</span><br><span class="line">                    <span class="keyword">return</span> hair-&gt;next;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            ListNode* nex = tail-&gt;next;</span><br><span class="line">            <span class="comment">// 这里是 C++17 的写法，也可以写成</span></span><br><span class="line">            <span class="comment">// pair&lt;ListNode*, ListNode*&gt; result = myReverse(head, tail);</span></span><br><span class="line">            <span class="comment">// head = result.first;</span></span><br><span class="line">            <span class="comment">// tail = result.second;</span></span><br><span class="line">            <span class="built_in">tie</span>(head, tail) = <span class="built_in">myReverse</span>(head, tail);</span><br><span class="line">            <span class="comment">// 把子链表重新接回原链表</span></span><br><span class="line">            pre-&gt;next = head;</span><br><span class="line">            tail-&gt;next = nex;</span><br><span class="line">            pre = tail;</span><br><span class="line">            head = tail-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> hair-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>图解：<a href="https://leetcode.cn/problems/reverse-nodes-in-k-group/solutions/1/di-gui-java-by-reedfan-2/">力扣（LeetCode）—reedfan</a></p><p><img src="https://s2.loli.net/2024/03/23/KFI7V3HMYPnWix9.png" alt="firefox_hd33huMeCd"></p><h1 id="4-链表高精度加法"><a href="#4-链表高精度加法" class="headerlink" title="4.链表高精度加法"></a>4.链表高精度加法</h1><h4 id="4-1-两数相加：2"><a href="#4-1-两数相加：2" class="headerlink" title="4-1.两数相加：2"></a>4-1.两数相加：2</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">addTwoNumbers</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span>&#123;</span><br><span class="line">        ListNode* ans = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">        ListNode* head = ans;</span><br><span class="line">        <span class="type">int</span> value = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (l1 || l2) &#123;</span><br><span class="line">            <span class="type">int</span> val1 = l1 ? l1-&gt;val : <span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> val2 = l2 ? l2-&gt;val : <span class="number">0</span>;</span><br><span class="line">            value += val1 + val2;</span><br><span class="line">            ans-&gt;val = value % <span class="number">10</span>;</span><br><span class="line">            value /= <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">if</span> (l1) &#123;</span><br><span class="line">                l1 = l1-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (l2) &#123;</span><br><span class="line">                l2 = l2-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (l1 || l2) &#123;</span><br><span class="line">                ans-&gt;next = <span class="keyword">new</span> <span class="built_in">ListNode</span>(value);</span><br><span class="line">                ans = ans-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (value) &#123;</span><br><span class="line">            ans-&gt;next = <span class="keyword">new</span> <span class="built_in">ListNode</span>(value);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>关键在于第7-9行的处理，这样可以尽可能简化代码。这里给出对比：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">addTwoNumbers</span><span class="params">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> pre = <span class="number">0</span>; <span class="comment">//进位</span></span><br><span class="line">        ListNode res = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">-1</span>);</span><br><span class="line">        ListNode p = res;</span><br><span class="line">        <span class="keyword">while</span> (l1 != null &amp;&amp; l2 != null) &#123;</span><br><span class="line">            <span class="type">int</span> cur = l1.val + l2.val + pre;</span><br><span class="line">            <span class="keyword">if</span> (cur &gt;= <span class="number">10</span>) &#123; <span class="comment">// 进位</span></span><br><span class="line">                pre = <span class="number">1</span>;</span><br><span class="line">                cur %= <span class="number">10</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                pre = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            p.next = <span class="keyword">new</span> <span class="built_in">ListNode</span>(cur);</span><br><span class="line">            p = p.next;</span><br><span class="line">            l1 = l1.next;</span><br><span class="line">            l2 = l2.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (l1 != null) &#123;</span><br><span class="line">            <span class="type">int</span> cur = l1.val + pre;</span><br><span class="line">            <span class="keyword">if</span> (cur &gt;= <span class="number">10</span>) &#123; <span class="comment">// 进位</span></span><br><span class="line">                pre = <span class="number">1</span>;</span><br><span class="line">                cur %= <span class="number">10</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                pre = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            p.next = <span class="keyword">new</span> <span class="built_in">ListNode</span>(cur);</span><br><span class="line">            p = p.next;</span><br><span class="line">            l1 = l1.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (l2 != null) &#123;</span><br><span class="line">            <span class="type">int</span> cur = l2.val + pre;</span><br><span class="line">            <span class="keyword">if</span> (cur &gt;= <span class="number">10</span>) &#123; <span class="comment">// 进位</span></span><br><span class="line">                pre = <span class="number">1</span>;</span><br><span class="line">                cur %= <span class="number">10</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                pre = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            p.next = <span class="keyword">new</span> <span class="built_in">ListNode</span>(cur);</span><br><span class="line">            p = p.next;</span><br><span class="line">            l2 = l2.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (pre == <span class="number">1</span>) &#123;</span><br><span class="line">            p.next = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-2-两数相加II：445"><a href="#4-2-两数相加II：445" class="headerlink" title="4-2.两数相加II：445"></a>4-2.两数相加II：445</h4><p>法一：先反转链表，再相加</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">addListNodes</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span>&#123;</span><br><span class="line">        ListNode* dummy = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">        ListNode* current = dummy;</span><br><span class="line">        <span class="type">int</span> carry = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (l1 || l2 || carry) &#123;</span><br><span class="line">            <span class="type">int</span> sum = (l1 ? l1-&gt;val : <span class="number">0</span>) + (l2 ? l2-&gt;val : <span class="number">0</span>) + carry;</span><br><span class="line">            carry = sum / <span class="number">10</span>;</span><br><span class="line">            current-&gt;next = <span class="keyword">new</span> <span class="built_in">ListNode</span>(sum % <span class="number">10</span>);</span><br><span class="line">            current = current-&gt;next;</span><br><span class="line">            <span class="keyword">if</span> (l1) &#123;</span><br><span class="line">                l1 = l1-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (l2) &#123;</span><br><span class="line">                l2 = l2-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummy-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">ListNode* <span class="title">reverseList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        ListNode* curr = head;</span><br><span class="line">        ListNode* prev = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">while</span> (curr) &#123;</span><br><span class="line">            ListNode* next = curr-&gt;next;</span><br><span class="line">            curr-&gt;next = prev;</span><br><span class="line">            prev = curr;</span><br><span class="line">            curr = next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> prev;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">ListNode* <span class="title">addTwoNumbers</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span>&#123;</span><br><span class="line">        l1 = <span class="built_in">reverseList</span>(l1);</span><br><span class="line">        l2 = <span class="built_in">reverseList</span>(l2);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">reverseList</span>(<span class="built_in">addListNodes</span>(l1, l2));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>法二：用栈/数组(练习意义不大,但是最优解)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">addTwoNumbers</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span>&#123;</span><br><span class="line">        stack&lt;<span class="type">int</span>&gt; s1, s2;</span><br><span class="line">        <span class="keyword">while</span> (l1) &#123;</span><br><span class="line">            s1.<span class="built_in">push</span>(l1 -&gt; val);</span><br><span class="line">            l1 = l1 -&gt; next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (l2) &#123;</span><br><span class="line">            s2.<span class="built_in">push</span>(l2 -&gt; val);</span><br><span class="line">            l2 = l2 -&gt; next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> carry = <span class="number">0</span>;</span><br><span class="line">        ListNode* ans = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">while</span> (!s1.<span class="built_in">empty</span>() <span class="keyword">or</span> !s2.<span class="built_in">empty</span>() <span class="keyword">or</span> carry != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">int</span> a = s1.<span class="built_in">empty</span>() ? <span class="number">0</span> : s1.<span class="built_in">top</span>();</span><br><span class="line">            <span class="type">int</span> b = s2.<span class="built_in">empty</span>() ? <span class="number">0</span> : s2.<span class="built_in">top</span>();</span><br><span class="line">            <span class="keyword">if</span> (!s1.<span class="built_in">empty</span>()) s1.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">if</span> (!s2.<span class="built_in">empty</span>()) s2.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="type">int</span> cur = a + b + carry;</span><br><span class="line">            carry = cur / <span class="number">10</span>;</span><br><span class="line">            cur %= <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">auto</span> curnode = <span class="keyword">new</span> <span class="built_in">ListNode</span>(cur);</span><br><span class="line">            curnode -&gt; next = ans;</span><br><span class="line">            ans = curnode;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="5-链表的合并"><a href="#5-链表的合并" class="headerlink" title="5.链表的合并"></a>5.链表的合并</h1><h4 id="5-1-合成两个有序链表：21"><a href="#5-1-合成两个有序链表：21" class="headerlink" title="5-1.合成两个有序链表：21"></a>5-1.合成两个有序链表：21</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">mergeTwoLists</span><span class="params">(ListNode* list1, ListNode* list2)</span> </span>&#123;</span><br><span class="line">        ListNode* DummyHead = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">        ListNode* curr = DummyHead;</span><br><span class="line">        <span class="type">int</span> value = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (list1 &amp;&amp; list2) &#123;</span><br><span class="line">            value = <span class="built_in">min</span>(list1-&gt;val, list2-&gt;val);</span><br><span class="line">            curr-&gt;next = <span class="keyword">new</span> <span class="built_in">ListNode</span>(value);</span><br><span class="line">            curr = curr-&gt;next; <span class="comment">// 记得更新curr</span></span><br><span class="line">            <span class="keyword">if</span> (list1-&gt;val &lt;= list2-&gt;val) &#123;</span><br><span class="line">                list1 = list1-&gt;next;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                list2 = list2-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (list1 || list2) &#123;</span><br><span class="line">            curr-&gt;next = list1 ? list1 : list2;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ListNode* ans = DummyHead-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> DummyHead;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="5-2-合并K个升序链表：23（困难）"><a href="#5-2-合并K个升序链表：23（困难）" class="headerlink" title="5-2.合并K个升序链表：23（困难）"></a>5-2.合并K个升序链表：23（困难）</h4><h6 id="法一：分治合并（最优解）"><a href="#法一：分治合并（最优解）" class="headerlink" title="法一：分治合并（最优解）"></a>法一：分治合并（最优解）</h6><p>两个一组进行合并</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">mergeTwoLists</span><span class="params">(ListNode* a, ListNode* b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ((!a) || (!b))</span><br><span class="line">            <span class="keyword">return</span> a ? a : b;</span><br><span class="line">        ListNode head, *tail = &amp;head, *aPtr = a, *bPtr = b;</span><br><span class="line">        <span class="keyword">while</span> (aPtr &amp;&amp; bPtr) &#123;</span><br><span class="line">            <span class="keyword">if</span> (aPtr-&gt;val &lt; bPtr-&gt;val) &#123;</span><br><span class="line">                tail-&gt;next = aPtr;</span><br><span class="line">                aPtr = aPtr-&gt;next;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                tail-&gt;next = bPtr;</span><br><span class="line">                bPtr = bPtr-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            tail = tail-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        tail-&gt;next = (aPtr ? aPtr : bPtr);</span><br><span class="line">        <span class="keyword">return</span> head.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">ListNode* <span class="title">merge</span><span class="params">(vector&lt;ListNode*&gt;&amp; lists, <span class="type">int</span> left, <span class="type">int</span> right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (left == right) &#123;</span><br><span class="line">            <span class="keyword">return</span> lists[left];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (left &gt; right) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> mid = (left + right) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">mergeTwoLists</span>(<span class="built_in">merge</span>(lists, left, mid), <span class="built_in">merge</span>(lists, mid + <span class="number">1</span>, right));   </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">ListNode* <span class="title">mergeKLists</span><span class="params">(vector&lt;ListNode*&gt;&amp; lists)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">merge</span>(lists, <span class="number">0</span>, lists.<span class="built_in">size</span>() - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>注：mergeTwoLists()两种写法的时空开销差异分析</strong></p><p>方法一（30ms,30MB）:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ListNode* <span class="title">mergeTwoLists</span><span class="params">(ListNode* list1, ListNode* list2)</span> </span>&#123;</span><br><span class="line">    ListNode* DummyHead = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">    ListNode* curr = DummyHead;</span><br><span class="line">    <span class="type">int</span> value = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (list1 &amp;&amp; list2) &#123;</span><br><span class="line">        value = <span class="built_in">min</span>(list1-&gt;val, list2-&gt;val);</span><br><span class="line">        curr-&gt;next = <span class="keyword">new</span> <span class="built_in">ListNode</span>(value);</span><br><span class="line">        curr = curr-&gt;next; <span class="comment">// 记得更新curr</span></span><br><span class="line">        <span class="keyword">if</span> (list1-&gt;val &lt;= list2-&gt;val) &#123;</span><br><span class="line">            list1 = list1-&gt;next;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            list2 = list2-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (list1 || list2) &#123;</span><br><span class="line">        curr-&gt;next = list1 ? list1 : list2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ListNode* ans = DummyHead-&gt;next;</span><br><span class="line">    <span class="keyword">delete</span> DummyHead;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法二（11ms,16MB）:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ListNode* <span class="title">mergeTwoLists</span><span class="params">(ListNode* a, ListNode* b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ((!a) || (!b))</span><br><span class="line">        <span class="keyword">return</span> a ? a : b;</span><br><span class="line">    ListNode head, *tail = &amp;head, *aPtr = a, *bPtr = b;<span class="comment">//注意这里的head是ListNode对象</span></span><br><span class="line">    <span class="keyword">while</span> (aPtr &amp;&amp; bPtr) &#123;</span><br><span class="line">        <span class="keyword">if</span> (aPtr-&gt;val &lt; bPtr-&gt;val) &#123;</span><br><span class="line">            tail-&gt;next = aPtr;</span><br><span class="line">            aPtr = aPtr-&gt;next;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            tail-&gt;next = bPtr;</span><br><span class="line">            bPtr = bPtr-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        tail = tail-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    tail-&gt;next = (aPtr ? aPtr : bPtr);</span><br><span class="line">    <span class="keyword">return</span> head.next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>同样的时空复杂度，为什么第二种方法开销更小？</p></blockquote><p>因为第一种方法在合并链表的过程中，创建了新的节点来存储合并后的结果，这导致了额外的空间开销；同时，每次迭代过程中都需要动态分配新的节点，这导致速度更慢。第二种方法只是在原有节点的基础上进行连接，而不是创建新的节点。</p><h6 id="法二：优先队列"><a href="#法二：优先队列" class="headerlink" title="法二：优先队列"></a>法二：优先队列</h6><p>这样就相当于先把所有链表节点的值挨个放入队列中，然后让其自行进行快速排序。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Status</span> &#123;</span><br><span class="line">        <span class="type">int</span> val;</span><br><span class="line">        ListNode *ptr;</span><br><span class="line">        <span class="type">bool</span> <span class="keyword">operator</span> &lt; (<span class="type">const</span> Status &amp;rhs) <span class="type">const</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> val &gt; rhs.val;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    priority_queue &lt;Status&gt; q;</span><br><span class="line"></span><br><span class="line">    <span class="function">ListNode* <span class="title">mergeKLists</span><span class="params">(vector&lt;ListNode*&gt;&amp; lists)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> node: lists) &#123;</span><br><span class="line">            <span class="keyword">if</span> (node) q.<span class="built_in">push</span>(&#123;node-&gt;val, node&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode head, *tail = &amp;head;</span><br><span class="line">        <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="keyword">auto</span> f = q.<span class="built_in">top</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">            tail-&gt;next = f.ptr; </span><br><span class="line">            tail = tail-&gt;next;</span><br><span class="line">            <span class="keyword">if</span> (f.ptr-&gt;next) q.<span class="built_in">push</span>(&#123;f.ptr-&gt;next-&gt;val, f.ptr-&gt;next&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>重载运算符’&lt;’，用于自定义类型Status的比较规则，使得在优先队列中可以按照<code>val</code>的值进行降序排列。(自定义比较器)</p></blockquote><p>关于优先队列priority_queue，详见《0.常用STL用法》的2-5.</p>]]></content>
      
      
      <categories>
          
          <category> leetcode刷题笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> leetcode </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4.栈与递归篇</title>
      <link href="/posts/8a02a46e.html"/>
      <url>/posts/8a02a46e.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-用栈访问最后若干元素"><a href="#1-用栈访问最后若干元素" class="headerlink" title="1.用栈访问最后若干元素"></a>1.用栈访问最后若干元素</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stack.<span class="built_in">push_back</span>(<span class="built_in">move</span>(name));</span><br></pre></td></tr></table></figure><p>在这段代码中，<code>move(name)</code> 使用了 C++ 中的 <code>std::move</code> 函数。<code>std::move</code> 是一个用于<u>将对象转换为右值引用</u>的函数，它允许将对象的所有权转移给另一个对象，通常用于在移动语义中。在这段代码中，<code>move(name)</code> 可能是在将 <code>name</code> 对象的所有权转移给 <code>stack</code> 容器，这样做通常可以<mark>提高性能，避免不必要的拷贝操作</mark>。</p><h4 id="1-1-文件的最长绝对路径：388"><a href="#1-1-文件的最长绝对路径：388" class="headerlink" title="1-1.文件的最长绝对路径：388"></a>1-1.文件的最长绝对路径：388</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">lengthLongestPath</span><span class="params">(string input)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>, pos = <span class="number">0</span>, n = input.<span class="built_in">length</span>();</span><br><span class="line">        stack&lt;<span class="type">int</span>&gt;st;<span class="comment">//用来记录每一段的长度</span></span><br><span class="line">        <span class="comment">// pos作为指针</span></span><br><span class="line">        <span class="keyword">while</span> (pos &lt; n) &#123;</span><br><span class="line">            <span class="comment">// 检测当前文件深度</span></span><br><span class="line">            <span class="type">int</span> depth = <span class="number">1</span>;</span><br><span class="line">            <span class="comment">//&#x27;\t&#x27;是一个符号，这里不是&#x27;\&#x27;和&#x27;t&#x27;</span></span><br><span class="line">            <span class="keyword">while</span> (pos &lt; n &amp;&amp; input[pos] == <span class="string">&#x27;\t&#x27;</span>) &#123;</span><br><span class="line">                ++pos;</span><br><span class="line">                ++depth;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 统计当前文件名的长度</span></span><br><span class="line">            <span class="type">int</span> len = <span class="number">0</span>;</span><br><span class="line">            <span class="type">bool</span> isFile = <span class="literal">false</span>; <span class="comment">// 记录是否为文件名而非目录名</span></span><br><span class="line">            <span class="keyword">while</span> (pos &lt; n &amp;&amp; input[pos] != <span class="string">&#x27;\n&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (input[pos] == <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">                    isFile = <span class="literal">true</span>; <span class="comment">// 因为此时后面必定是.ext</span></span><br><span class="line">                &#125;</span><br><span class="line">                ++len;</span><br><span class="line">                ++pos;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 跳过换行符</span></span><br><span class="line">            ++pos;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 遇到一次换行符之后的操作，对栈st进行操作</span></span><br><span class="line">            <span class="keyword">while</span> (st.<span class="built_in">size</span>() &gt;= depth) &#123;</span><br><span class="line">                st.<span class="built_in">pop</span>();<span class="comment">//回退一个文件层级</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!st.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">                len += st.<span class="built_in">top</span>() + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (isFile) &#123;</span><br><span class="line">                ans = <span class="built_in">max</span>(ans, len);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                st.<span class="built_in">emplace</span>(len);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p><code>stack.emplace(a)</code> 的意思是在栈顶创建一个新的元素，并将参数 <code>a</code> 作为构造函数的参数，用于构造这个新的元素。<code>push_back()</code>，<code>emplace_back()</code>等最终调用的都是<code>emplace_back()</code>，性能并无区别。</p></blockquote><p>关于emplace():<a href="https://www.jianshu.com/p/caad33287dc3">emplace/emplace_back - 简书</a></p><h1 id="2-栈与计算器"><a href="#2-栈与计算器" class="headerlink" title="2.栈与计算器"></a>2.栈与计算器</h1><h5 id="2-1-逆波兰表达式求值：150"><a href="#2-1-逆波兰表达式求值：150" class="headerlink" title="2-1.逆波兰表达式求值：150"></a>2-1.逆波兰表达式求值：150</h5><blockquote><p>   逆波兰表达式严格遵循「从左到右」的运算。计算逆波兰表达式的值时，使用一个栈存储操作数，从左到右遍历逆波兰表达式，进行如下操作：</p><p>1.如果遇到操作数，则将操作数入栈；</p><p>2.如果遇到运算符，则将两个操作数出栈，其中<mark>先出栈的是右操作数</mark>，后出栈的是左操作数，使用运算符对两个操作数进行运算，将运算得到的新操作数入栈。</p><p>   整个逆波兰表达式遍历完毕之后，栈内只有一个元素，该元素即为逆波兰表达式的值。[“13”,”5”,”/“]则表示13/5.</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">isNumber</span><span class="params">(string&amp; s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> !(s == <span class="string">&quot;+&quot;</span> || s == <span class="string">&quot;-&quot;</span> || s == <span class="string">&quot;*&quot;</span> || s == <span class="string">&quot;/&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">evalRPN</span><span class="params">(vector&lt;string&gt;&amp; tokens)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = tokens.<span class="built_in">size</span>();</span><br><span class="line">        stack&lt;<span class="type">int</span>&gt; stk;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            string&amp; token = tokens[i];</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">isNumber</span>(token)) &#123;</span><br><span class="line">                stk.<span class="built_in">emplace</span>(<span class="built_in">stoi</span>(token));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//注意num2和num1的先后顺序</span></span><br><span class="line">                <span class="type">int</span> num2 = stk.<span class="built_in">top</span>();</span><br><span class="line">                stk.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="type">int</span> num1 = stk.<span class="built_in">top</span>();</span><br><span class="line">                stk.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">switch</span> (token[<span class="number">0</span>]) &#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">                        stk.<span class="built_in">emplace</span>(num1 + num2);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">                        stk.<span class="built_in">emplace</span>(num1 - num2);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">                        stk.<span class="built_in">emplace</span>(num1 * num2);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span>:</span><br><span class="line">                        stk.<span class="built_in">emplace</span>(num1 / num2);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stk.<span class="built_in">top</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这里的<code>emplace()</code>也可以改用<code>push()</code>。为什么不是<code>emplace_back()/push_back()</code>的原因：<code>emplace()/push()</code>对应<u>stack/queue</u>，<code>emplace_back()/push_back()</code>对应<u>list/vector</u>(包括string这种特殊的字符数组)。</p><h5 id="2-2-基本计算器II-227"><a href="#2-2-基本计算器II-227" class="headerlink" title="2-2.基本计算器II:227"></a>2-2.基本计算器II:227</h5><p>本题不需要先将中缀表达式转为后缀表达式，因为全是正整数并且没有括号。该题本质上是用栈来处理，这里可以使用stack/vector。</p><p>1.使用stack:（易错点较多，需要注意）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">calculate</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        stack&lt;<span class="type">int</span>&gt; stk;</span><br><span class="line">        <span class="type">int</span> n = s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> sign = <span class="string">&#x27;+&#x27;</span>; <span class="comment">// 记录数字前的符号，默认为正</span></span><br><span class="line">        <span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">isdigit</span>(s[i])) &#123;</span><br><span class="line">                num = num * <span class="number">10</span> + <span class="built_in">int</span>(s[i] - <span class="string">&#x27;0&#x27;</span>); <span class="comment">// 小心溢出</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">isdigit</span>(s[i]) &amp;&amp; s[i] != <span class="string">&#x27; &#x27;</span> || i == n - <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">// 记得考虑空格和末位的特殊情况</span></span><br><span class="line">                <span class="keyword">switch</span> (sign) &#123; <span class="comment">// 是sign而不是s[i],否则第一个数字无法存放</span></span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">                    stk.<span class="built_in">push</span>(num);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">                    stk.<span class="built_in">push</span>(-num);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">                    stk.<span class="built_in">top</span>() *= num;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span>:</span><br><span class="line">                    stk.<span class="built_in">top</span>() /= num;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 处理完运算符以后，更新符号和数字</span></span><br><span class="line">                sign = s[i];</span><br><span class="line">                num = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (!stk.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            sum += stk.<span class="built_in">top</span>();</span><br><span class="line">            stk.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>注意：<code>num = num * 10 + s[i] - &#39;0&#39;;</code>会导致溢出，因为这时的运算顺序是先将num*10加上转为int的s[i]，之后再减去’0’转为的int值。而<code>int(s[i]-&#39;0&#39;)</code>则能够避免溢出。</p></blockquote><p>2.使用vector:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">calculate</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; stk;</span><br><span class="line">        <span class="type">char</span> preSign = <span class="string">&#x27;+&#x27;</span>;</span><br><span class="line">        <span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> n = s.<span class="built_in">length</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">isdigit</span>(s[i])) &#123;</span><br><span class="line">                num = num * <span class="number">10</span> + <span class="built_in">int</span>(s[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">isdigit</span>(s[i]) &amp;&amp; s[i] != <span class="string">&#x27; &#x27;</span> || i == n - <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">switch</span> (preSign) &#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">                        stk.<span class="built_in">push_back</span>(num);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">                        stk.<span class="built_in">push_back</span>(-num);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">                        stk.<span class="built_in">back</span>() *= num;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">default</span>:</span><br><span class="line">                        stk.<span class="built_in">back</span>() /= num;</span><br><span class="line">                &#125;</span><br><span class="line">                preSign = s[i];</span><br><span class="line">                num = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">accumulate</span>(stk.<span class="built_in">begin</span>(), stk.<span class="built_in">end</span>(), <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>通过对比可以看出，二者调用的方法略有不同。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">    %%需要使用“ ”双引号将（）进行括起来，并给出一个命名，否则括号不可用</span><br><span class="line">    subgraph vector</span><br><span class="line">        A(&quot;push_back()&quot;)</span><br><span class="line">        B[&quot;back()&quot;] </span><br><span class="line">        C[&quot;accumulate()&quot;]</span><br><span class="line">    end</span><br><span class="line"></span><br><span class="line">    subgraph stack</span><br><span class="line">        D(&quot;push()&quot;)</span><br><span class="line">        E[&quot;top()&quot;]</span><br><span class="line">        循环累加</span><br><span class="line">    end</span><br><span class="line"></span><br><span class="line">    A&lt;--&gt;D</span><br><span class="line">    B&lt;--&gt;E</span><br><span class="line">    C&lt;--&gt;循环累加</span><br></pre></td></tr></table></figure><h4 id="2-3-基本计算器：224（困难）"><a href="#2-3-基本计算器：224（困难）" class="headerlink" title="2-3.基本计算器：224（困难）"></a>2-3.基本计算器：224（困难）</h4><p>相比上一道题，其实就是多了括号和负数，本质是根据’+’分段存入栈中并计算。这类题如果采取先转为逆波兰表达式、再计算结果的方法，会使得代码非常庞杂。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">calculate</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        stack&lt;<span class="type">int</span>&gt; stk; <span class="comment">// 这里stk存储的不是操作数，而是符号ops</span></span><br><span class="line">        stk.<span class="built_in">push</span>(<span class="number">1</span>);    <span class="comment">// 默认为正号，所以提前存储1进去</span></span><br><span class="line">        <span class="type">int</span> n = s.<span class="built_in">length</span>();</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>, pos = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> sign = <span class="number">1</span>; <span class="comment">// 默认为正数.sign值只能是+1或者-1</span></span><br><span class="line">        <span class="keyword">while</span> (pos &lt; n) &#123;</span><br><span class="line">            <span class="keyword">switch</span> (s[pos]) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27; &#x27;</span>:</span><br><span class="line">                pos++;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">                sign = stk.<span class="built_in">top</span>();</span><br><span class="line">                pos++;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">                sign = -stk.<span class="built_in">top</span>();</span><br><span class="line">                pos++;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;(&#x27;</span>:</span><br><span class="line">                stk.<span class="built_in">push</span>(sign);</span><br><span class="line">                pos++;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;)&#x27;</span>:</span><br><span class="line">                stk.<span class="built_in">pop</span>();</span><br><span class="line">                pos++;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>: <span class="comment">// 是数字</span></span><br><span class="line">                <span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span> (pos &lt; n &amp;&amp; <span class="built_in">isdigit</span>(s[pos])) &#123;</span><br><span class="line">                    num = num * <span class="number">10</span> + <span class="built_in">int</span>(s[pos++] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                ans += sign * num;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>进阶思考：存在乘除法，并且’+’可以用作一元运算符(例如<code>&quot;+1&quot;</code>和<code>&quot;+(2+3)&quot;</code>有效)</p></blockquote><h1 id="3-栈与括号匹配"><a href="#3-栈与括号匹配" class="headerlink" title="3.栈与括号匹配"></a>3.栈与括号匹配</h1><h4 id="3-1-有效的括号：20"><a href="#3-1-有效的括号：20" class="headerlink" title="3-1.有效的括号：20"></a>3-1.有效的括号：20</h4><p>难度不高</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isValid</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        stack&lt;<span class="type">char</span>&gt; stk;</span><br><span class="line">        <span class="type">int</span> n = s.<span class="built_in">length</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> pos = <span class="number">0</span>; pos &lt; n; pos++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[pos] == <span class="string">&#x27;(&#x27;</span> || s[pos] == <span class="string">&#x27;[&#x27;</span> || s[pos] == <span class="string">&#x27;&#123;&#x27;</span>) &#123;</span><br><span class="line">                stk.<span class="built_in">emplace</span>(s[pos]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (stk.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (s[pos] == <span class="string">&#x27;)&#x27;</span> &amp;&amp; stk.<span class="built_in">top</span>() != <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (s[pos] == <span class="string">&#x27;]&#x27;</span> &amp;&amp; stk.<span class="built_in">top</span>() != <span class="string">&#x27;[&#x27;</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (s[pos] == <span class="string">&#x27;&#125;&#x27;</span> &amp;&amp; stk.<span class="built_in">top</span>() != <span class="string">&#x27;&#123;&#x27;</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                stk.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stk.<span class="built_in">empty</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="3-2-函数的独占时间：636"><a href="#3-2-函数的独占时间：636" class="headerlink" title="3-2.函数的独占时间：636"></a>3-2.函数的独占时间：636</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">exclusiveTime</span><span class="params">(<span class="type">int</span> n, vector&lt;string&gt;&amp; logs)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">res</span><span class="params">(n)</span></span>;</span><br><span class="line">        stack&lt;<span class="type">int</span>&gt; stk;</span><br><span class="line">        <span class="type">int</span> lastTimeStamp = <span class="number">0</span>; <span class="comment">// 上一个数的时间戳</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; log : logs) &#123;</span><br><span class="line">            <span class="comment">// 错误：数字可能不止一位</span></span><br><span class="line">            <span class="comment">// int id = log[0] - &#x27;0&#x27;;</span></span><br><span class="line">            <span class="comment">// char StartOrEnd = log[3];</span></span><br><span class="line">            <span class="comment">// int timeStamp = log[(int)log.size() - 1];</span></span><br><span class="line">            <span class="type">int</span> id, timeStamp;</span><br><span class="line">            <span class="type">char</span> StartOrEnd[<span class="number">6</span>];</span><br><span class="line">            <span class="built_in">sscanf</span>(log.<span class="built_in">c_str</span>(), <span class="string">&quot;%d:%[^:]:%d&quot;</span>, &amp;id, StartOrEnd, &amp;timeStamp);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 本质是括号匹配</span></span><br><span class="line">            <span class="keyword">if</span> (StartOrEnd[<span class="number">0</span>] == <span class="string">&#x27;s&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!stk.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">                    res[stk.<span class="built_in">top</span>()] += timeStamp - lastTimeStamp;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 存在栈里的都是start部分未被end匹配消除的部分对应的id</span></span><br><span class="line">                stk.<span class="built_in">push</span>(id);</span><br><span class="line">                <span class="comment">// 每次循环结束更新时间戳</span></span><br><span class="line">                lastTimeStamp = timeStamp;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                res[stk.<span class="built_in">top</span>()] += timeStamp - lastTimeStamp + <span class="number">1</span>;</span><br><span class="line">                stk.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="comment">// 为了统一时间戳标准，end的5相当于start的6.确保end-end正常</span></span><br><span class="line">                lastTimeStamp = timeStamp + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>注：关于<code>sscanf(log.c_str(), &quot;%d:%[^:]:%d&quot;, &amp;id, StartOrEnd, &amp;timeStamp);</code>，这里的租用类似于其他语言中的spilt()函数，用于将字符串根据’:’分割成不同的部分。sscanf()的功能类似于正则表达式的regex，胜在<u>轻量级和高效</u>，但是没有其强大。关于正则表达式regex，详见《2.1字符串篇(2)—-关于正则》。当字符串很长时，regex会涉及更多的内存释放和分配，并且需要更多的时间开销，可能导致<u>超时或内存占用过高</u>。</p><p>sscanf语法为：<code>int sscanf(const char *str, const char *format, T* dividePart1ptr, T* dividePart2ptr, ...);</code>，并将分割出的各个部分赋值到各个dividePart上。详细讲解：<a href="https://zhuanlan.zhihu.com/p/370029604">sscanf的用法</a></p><p><code>c_str()</code>是一个用于将C++字符串转换为C风格的字符串（以null结尾的字符数组）的成员函数，它返回一个指向以null结尾的字符数组的<mark>指针</mark>，该字符数组包含了与C++字符串相对应的字符序列。比如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">char</span> *cStyleStringPointer = myString.<span class="built_in">c_str</span>();</span><br></pre></td></tr></table></figure><p>现在再来将之前sscanf代码转换为regex代码，如下：(在本题中会超时)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">regex <span class="title">pattern</span><span class="params">(<span class="string">&quot;(\\d+):(\\w+):(\\d+)&quot;</span>)</span></span>;</span><br><span class="line">smatch matches;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">regex_search</span>(log, matches, pattern)) &#123;</span><br><span class="line">    id = <span class="built_in">stoi</span>(matches[<span class="number">1</span>]);</span><br><span class="line">    string temp = matches[<span class="number">2</span>];</span><br><span class="line">    <span class="built_in">strcpy</span>(StartOrEnd, temp.<span class="built_in">c_str</span>());</span><br><span class="line">    timeStamp = <span class="built_in">stoi</span>(matches[<span class="number">3</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在又带来了新的知识点：是否可以将第6行代码写作<code>StartEnd = temp.c_str();</code>?答案是否定的，正如前面所说，<code>c_str()</code>返回的是<mark>以null结尾</mark>的字符数组的指针，而StartEnd只是个普通字符数组的指针，使用<code>strcpy()</code>则可以保证将<code>temp</code>中的内容复制到<code>StartOrEnd</code>中，并且最后有一个<u>字符串结束符</u>。</p><p>   同理，第5和第6行也可以直接改为<code>StartEnd = matches[2];</code>，前提要求声明的是<code>string StartEnd;</code>，因为字符串也相当于是一个以null结尾的字符数组。</p><hr><p>官方题解：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">exclusiveTime</span><span class="params">(<span class="type">int</span> n, vector&lt;string&gt;&amp; logs)</span> </span>&#123;</span><br><span class="line">        stack&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; st; <span class="comment">// &#123;idx, 开始运行的时间&#125;</span></span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">res</span><span class="params">(n, <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; log : logs) &#123;</span><br><span class="line">            <span class="type">char</span> type[<span class="number">10</span>];</span><br><span class="line">            <span class="type">int</span> idx, timestamp;</span><br><span class="line">            <span class="built_in">sscanf</span>(log.<span class="built_in">c_str</span>(), <span class="string">&quot;%d:%[^:]:%d&quot;</span>, &amp;idx, type, &amp;timestamp);</span><br><span class="line">            <span class="keyword">if</span> (type[<span class="number">0</span>] == <span class="string">&#x27;s&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!st.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">                    res[st.<span class="built_in">top</span>().first] += timestamp - st.<span class="built_in">top</span>().second;</span><br><span class="line">                &#125;</span><br><span class="line">                st.<span class="built_in">emplace</span>(idx, timestamp);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">auto</span> t = st.<span class="built_in">top</span>();</span><br><span class="line">                st.<span class="built_in">pop</span>();</span><br><span class="line">                res[t.first] += timestamp - t.second + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (!st.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">                    st.<span class="built_in">top</span>().second = timestamp + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="3-3-标签验证器：591（困难）"><a href="#3-3-标签验证器：591（困难）" class="headerlink" title="3-3.标签验证器：591（困难）"></a>3-3.标签验证器：591（困难）</h4><p>法一：正则表达式匹配</p><p>错解：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isValid</span><span class="params">(string code)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ECMAScript</span></span><br><span class="line">        <span class="comment">// std::regex</span></span><br><span class="line">        <span class="comment">// pattern(&quot;&lt;([A-Z]&#123;1,9&#125;?&gt;)[^&lt;]*(&lt;!\[CDATA\[(.+?)\]\]&gt;)*[^&lt;]*&lt;\/\1&quot;);</span></span><br><span class="line">        <span class="comment">// leetcode需要将转义字符\再进行一次转义</span></span><br><span class="line">        <span class="function">std::regex <span class="title">pattern</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="string">&quot;&lt;([A-Z]&#123;1,9&#125;?&gt;)[^&lt;]*(&lt;!\\[CDATA\\[(.*?)\\]\\]&gt;)*[^&lt;]*&lt;\\/\\1&quot;</span>)</span></span>;</span><br><span class="line">        <span class="keyword">if</span> (std::<span class="built_in">regex_match</span>(code, pattern)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>   这样的代码存在缺陷，比如code=<code>&quot;&lt;A&gt;&lt;A&gt;/A&gt;&lt;/A&gt;&lt;/A&gt;&quot;</code>或者<code>&quot;&lt;HTML&gt;&lt;DIV&gt;/A&gt;&lt;/DIV&gt;&lt;/HTML&gt;&quot;</code>或者<code>&quot;&lt;A&gt;&lt;B&gt;&lt;C&gt;&lt;D&gt;&lt;E&gt;&lt;F&gt;&lt;G&gt;&lt;/G&gt;&lt;H&gt;&lt;/H&gt;&lt;/F&gt;&lt;/E&gt;&lt;/D&gt;&lt;/C&gt;&lt;/B&gt;&lt;/A&gt;&quot;</code>代码返回false，而实际应该返回true。如果改为regex_search()使用局部匹配而非完全匹配，则会导致<code>&quot;&lt;HTMLQQQ&gt;&lt;DIV&gt;/A&gt;&lt;/DIV&gt;&lt;/HTML&gt;&quot;</code>返回了true。</p><p><strong>改进第一步：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isValid</span><span class="params">(string code)</span> </span>&#123;</span><br><span class="line">        <span class="function">std::regex <span class="title">pattern</span><span class="params">(<span class="string">&quot;&lt;([A-Z]&#123;1,9&#125;?&gt;)[^&lt;]*(&lt;!\\[CDATA\\[(.*?)\\]\\]&gt;)*[^&lt;]*&lt;\\/\\1&quot;</span>)</span></span>;</span><br><span class="line">        <span class="keyword">while</span> (std::<span class="built_in">regex_search</span>(code, pattern) &amp;&amp; code.<span class="built_in">length</span>() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            code = std::<span class="built_in">regex_replace</span>(code, pattern, <span class="string">&quot;#&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> code == <span class="string">&quot;#&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>   注意一点，<code>&quot;&lt;DIV&gt;&lt;UV&gt;&lt;![CDATA[&lt;GK&gt;&lt;![CDATA[&lt;![CDATA[OQA]]&gt;]]&gt;&lt;/GK&gt;]]&gt;&lt;/UV&gt;&lt;/DIV&gt;&quot;</code>应该返回false!因为<code>&lt;![CDATA[CDATA_CONTENT]]&gt;</code>，<code>CDATA_CONTENT</code> 的范围被定义成 <code>&lt;![CDATA[</code> 和<strong>后续的第一个</strong> <code>]]&gt;</code>之间的字符。因此还需要进一步改进。</p><p><strong>改进第二步：(正解)</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isValid</span><span class="params">(string code)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 先处理掉cdata</span></span><br><span class="line">        <span class="function">std::regex <span class="title">CDATApattern</span><span class="params">(<span class="string">&quot;&lt;!\\[CDATA\\[(.*?)\\]\\]&gt;&quot;</span>)</span></span>;</span><br><span class="line">        <span class="keyword">while</span> (std::<span class="built_in">regex_search</span>(code, CDATApattern)) &#123;</span><br><span class="line">            code = std::<span class="built_in">regex_replace</span>(code, CDATApattern, <span class="string">&quot;&amp;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//再解决可能嵌套的标签</span></span><br><span class="line">        <span class="function">std::regex <span class="title">pattern</span><span class="params">(<span class="string">&quot;&lt;([A-Z]&#123;1,9&#125;?&gt;)[^&lt;]*&amp;*[^&lt;]*&lt;\\/\\1&quot;</span>)</span></span>;</span><br><span class="line">        <span class="keyword">while</span> (std::<span class="built_in">regex_search</span>(code, pattern)) &#123;</span><br><span class="line">            code = std::<span class="built_in">regex_replace</span>(code, pattern, <span class="string">&quot;#&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> code == <span class="string">&quot;#&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>至此解题完毕，不过时空开销较大。</p><p><img src="C:\Users\huangjiakun\Pictures\Marktext全局图片\f74d34754b8e317524894d4974f1dee69f4eb0df.png" alt=""></p><p><img src="C:\Users\huangjiakun\Pictures\Marktext全局图片\ab2a014851d62419a59e526f6a328a69263aaefa.png" alt=""></p><p>法二：栈+字符串遍历</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isValid</span><span class="params">(string code)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = code.<span class="built_in">size</span>();</span><br><span class="line">        stack&lt;string&gt; tags;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; n) &#123;</span><br><span class="line">            <span class="keyword">if</span> (code[i] == <span class="string">&#x27;&lt;&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i == n - <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (code[i + <span class="number">1</span>] == <span class="string">&#x27;/&#x27;</span>) &#123;</span><br><span class="line">                    <span class="type">int</span> j = code.<span class="built_in">find</span>(<span class="string">&#x27;&gt;&#x27;</span>, i);</span><br><span class="line">                    <span class="keyword">if</span> (j == string::npos) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    string tagname = code.<span class="built_in">substr</span>(i + <span class="number">2</span>, j - (i + <span class="number">2</span>));</span><br><span class="line">                    <span class="keyword">if</span> (tags.<span class="built_in">empty</span>() || tags.<span class="built_in">top</span>() != tagname) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    tags.<span class="built_in">pop</span>();</span><br><span class="line">                    i = j + <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">if</span> (tags.<span class="built_in">empty</span>() &amp;&amp; i != n) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (code[i + <span class="number">1</span>] == <span class="string">&#x27;!&#x27;</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (tags.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    string cdata = code.<span class="built_in">substr</span>(i + <span class="number">2</span>, <span class="number">7</span>);</span><br><span class="line">                    <span class="keyword">if</span> (cdata != <span class="string">&quot;[CDATA[&quot;</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="type">int</span> j = code.<span class="built_in">find</span>(<span class="string">&quot;]]&gt;&quot;</span>, i);</span><br><span class="line">                    <span class="keyword">if</span> (j == string::npos) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    i = j + <span class="number">3</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="type">int</span> j = code.<span class="built_in">find</span>(<span class="string">&#x27;&gt;&#x27;</span>, i);</span><br><span class="line">                    <span class="keyword">if</span> (j == string::npos) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    string tagname = code.<span class="built_in">substr</span>(i + <span class="number">1</span>, j - (i + <span class="number">1</span>));</span><br><span class="line">                    <span class="keyword">if</span> (tagname.<span class="built_in">size</span>() &lt; <span class="number">1</span> || tagname.<span class="built_in">size</span>() &gt; <span class="number">9</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (!<span class="built_in">all_of</span>(tagname.<span class="built_in">begin</span>(), tagname.<span class="built_in">end</span>(),</span><br><span class="line">                                [](<span class="type">unsigned</span> <span class="type">char</span> c) &#123; <span class="keyword">return</span> <span class="built_in">isupper</span>(c); &#125;)) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    tags.<span class="built_in">push</span>(<span class="built_in">move</span>(tagname));</span><br><span class="line">                    i = j + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (tags.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                ++i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> tags.<span class="built_in">empty</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="3-4-最长有效括号：32（困难）"><a href="#3-4-最长有效括号：32（困难）" class="headerlink" title="3-4.最长有效括号：32（困难）"></a>3-4.最长有效括号：32（困难）</h4><p>理解题意，有效括号子串形式为：1、”()()”;2、”(())”…其实就是满足3-1.第20题的那种字符串。</p><p>法一：动态规划</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">longestValidParentheses</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(n, <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123; <span class="comment">// dp[0]必定为0</span></span><br><span class="line">            <span class="comment">// s[i]==&#x27;(&#x27;时dp[i]必定为0</span></span><br><span class="line">            <span class="keyword">if</span> (s[i] == <span class="string">&#x27;)&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (s[i - <span class="number">1</span>] == <span class="string">&#x27;(&#x27;</span>) &#123; <span class="comment">//&quot;...()&quot;型</span></span><br><span class="line">                    dp[i] = (i &gt;= <span class="number">2</span> ? dp[i - <span class="number">2</span>] + <span class="number">2</span> : <span class="number">2</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i &gt; dp[i - <span class="number">1</span>] &amp;&amp; s[i - dp[i - <span class="number">1</span>] - <span class="number">1</span>] == <span class="string">&#x27;(&#x27;</span>) &#123; <span class="comment">//&quot;...))&quot;型   </span></span><br><span class="line">                    dp[i] = dp[i - <span class="number">1</span>] + ((i - dp[i - <span class="number">1</span>]) &gt;= <span class="number">2</span> ? dp[i - dp[i - <span class="number">1</span>] - <span class="number">2</span>] + <span class="number">2</span> : <span class="number">2</span>);      </span><br><span class="line">                &#125;</span><br><span class="line">                ans = <span class="built_in">max</span>(ans, dp[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>法二：栈</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">longestValidParentheses</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        stack&lt;<span class="type">int</span>&gt; stk; <span class="comment">// 存储的是最后一个无法匹配的括号对应的下标</span></span><br><span class="line">        <span class="comment">// 如果一开始栈为空，第一个字符为左括号的时候我们会将其放入栈中，</span></span><br><span class="line">        <span class="comment">// 这样就不满足提及的「最后一个没有被匹配的右括号的下标」，</span></span><br><span class="line">        <span class="comment">// 为了保持统一，我们在一开始的时候往栈中放入一个值为-1的元素。</span></span><br><span class="line">        stk.<span class="built_in">push</span>(<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i] == <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">                stk.<span class="built_in">push</span>(i);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                stk.<span class="built_in">pop</span>();<span class="comment">//-1的作用体现在这里，一开始为&#x27;)&#x27;时避免出错</span></span><br><span class="line">                <span class="keyword">if</span> (stk.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">                    stk.<span class="built_in">push</span>(i);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    ans = <span class="built_in">max</span>(ans, i - stk.<span class="built_in">top</span>());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>法三：双计数器，近似于双指针（最优，不需要额外空间）</p><p>left统计左括号数，right统计右括号数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">longestValidParentheses</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = s.<span class="built_in">size</span>(), left = <span class="number">0</span>, right = <span class="number">0</span>, ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i] == <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">                left++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                right++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (left == right) &#123;</span><br><span class="line">                ans = <span class="built_in">max</span>(ans, <span class="number">2</span> * right);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (right &gt; left) &#123;</span><br><span class="line">                left = right = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        left = right = <span class="number">0</span>; <span class="comment">// 重置，为下一次遍历做准备</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i] == <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">                left++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                right++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (left == right) &#123;</span><br><span class="line">                ans = <span class="built_in">max</span>(ans, <span class="number">2</span> * left);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (left &gt; right) &#123;</span><br><span class="line">                left = right = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="4-递归-了解"><a href="#4-递归-了解" class="headerlink" title="4.递归(了解)"></a>4.递归(了解)</h1><h4 id="4-1-迷你语法分析器：385"><a href="#4-1-迷你语法分析器：385" class="headerlink" title="4-1.迷你语法分析器：385"></a>4-1.迷你语法分析器：385</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">NestedInteger <span class="title">deserialize</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s[index] == <span class="string">&#x27;[&#x27;</span>) &#123;</span><br><span class="line">            index++;</span><br><span class="line">            NestedInteger ni;</span><br><span class="line">            <span class="keyword">while</span> (s[index] != <span class="string">&#x27;]&#x27;</span>) &#123;</span><br><span class="line">                ni.<span class="built_in">add</span>(<span class="built_in">deserialize</span>(s));</span><br><span class="line">                <span class="keyword">if</span> (s[index] == <span class="string">&#x27;,&#x27;</span>) &#123;</span><br><span class="line">                    index++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            index++;</span><br><span class="line">            <span class="keyword">return</span> ni;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">bool</span> negative = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (s[index] == <span class="string">&#x27;-&#x27;</span>) &#123;</span><br><span class="line">                negative = <span class="literal">true</span>;</span><br><span class="line">                index++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (index &lt; s.<span class="built_in">size</span>() &amp;&amp; <span class="built_in">isdigit</span>(s[index])) &#123;</span><br><span class="line">                num = num * <span class="number">10</span> + s[index] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                index++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (negative) &#123;</span><br><span class="line">                num *= <span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">NestedInteger</span>(num);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>341、394略。就是利用给的接口的方法解题。</p>]]></content>
      
      
      <categories>
          
          <category> leetcode刷题笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> leetcode </tag>
            
            <tag> 栈 </tag>
            
            <tag> 递归 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3.数与位篇</title>
      <link href="/posts/f83528c7.html"/>
      <url>/posts/f83528c7.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-数字的位操作"><a href="#1-数字的位操作" class="headerlink" title="1.数字的位操作"></a>1.数字的位操作</h1><h2 id="1-1-回文"><a href="#1-1-回文" class="headerlink" title="1-1.回文"></a>1-1.回文</h2><h3 id="1-1-1-回文数：9"><a href="#1-1-1-回文数：9" class="headerlink" title="1-1-1.回文数：9"></a>1-1-1.回文数：9</h3><p>法一：常规解法，但是需要考虑整数溢出问题</p><p>法二：反转一半数字</p><p>方法与法一类似，但是这样可以避免考虑溢出问题。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isPalindrome</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (x &lt; <span class="number">0</span> || (x % <span class="number">10</span> == <span class="number">0</span> &amp;&amp; x)) &#123;</span><br><span class="line">            <span class="comment">//因为最终return部分加入了x==res/10的情况，所以需要(x % 10 == 0 &amp;&amp; x)</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (x &gt; res) &#123;</span><br><span class="line">            <span class="type">int</span> digit = x % <span class="number">10</span>;</span><br><span class="line">            x /= <span class="number">10</span>;</span><br><span class="line">            res = res * <span class="number">10</span> + digit;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 当数字长度为奇数时，我们可以通过 revertedNumber/10 去除处于中位的数字。</span></span><br><span class="line">        <span class="comment">// 例如，当输入为 12321 时，在 while 循环的末尾我们可以得到 x = 12，revertedNumber = 123，</span></span><br><span class="line">        <span class="comment">// 由于处于中位的数字不影响回文（它总是与自己相等），所以我们可以简单地将其去除。</span></span><br><span class="line">        <span class="keyword">return</span> x == res || x == res / <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="1-1-2-寻找最近的回文数：564（困难）"><a href="#1-1-2-寻找最近的回文数：564（困难）" class="headerlink" title="1-1-2.寻找最近的回文数：564（困难）"></a>1-1-2.寻找最近的回文数：564（困难）</h3><p>模拟：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> ULL = <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;ULL&gt; <span class="title">getCandidates</span><span class="params">(<span class="type">const</span> string&amp; n)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> len = n.<span class="built_in">length</span>();</span><br><span class="line">        <span class="comment">// 候选数组，符合这4中情况的数字</span></span><br><span class="line">        vector&lt;ULL&gt; candidates = &#123;</span><br><span class="line">            (ULL)<span class="built_in">pow</span>(<span class="number">10</span>, len - <span class="number">1</span>) - <span class="number">1</span>,</span><br><span class="line">            (ULL)<span class="built_in">pow</span>(<span class="number">10</span>, len) + <span class="number">1</span>,</span><br><span class="line">        &#125;;</span><br><span class="line">        ULL selfPrefix = <span class="built_in">stoull</span>(n.<span class="built_in">substr</span>(<span class="number">0</span>, (len + <span class="number">1</span>) / <span class="number">2</span>));</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i : &#123;selfPrefix - <span class="number">1</span>, selfPrefix, selfPrefix + <span class="number">1</span>&#125;) &#123;</span><br><span class="line">            <span class="comment">// i只在这三个数之间遍历</span></span><br><span class="line">            <span class="comment">// prefix就是原数字的前半部分</span></span><br><span class="line">            string prefix = <span class="built_in">to_string</span>(i);</span><br><span class="line">            string candidate = prefix + <span class="built_in">string</span>(prefix.<span class="built_in">rbegin</span>() + (len &amp; <span class="number">1</span>), prefix.<span class="built_in">rend</span>());</span><br><span class="line">            candidates.<span class="built_in">push_back</span>(<span class="built_in">stoull</span>(candidate));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> candidates;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">string <span class="title">nearestPalindromic</span><span class="params">(string n)</span> </span>&#123;</span><br><span class="line">        ULL selfNumber = <span class="built_in">stoull</span>(n), ans = <span class="number">-1</span>;</span><br><span class="line">        <span class="type">const</span> vector&lt;ULL&gt;&amp; candidates = <span class="built_in">getCandidates</span>(n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; candidate : candidates) &#123;</span><br><span class="line">            <span class="keyword">if</span> (candidate != selfNumber) &#123;</span><br><span class="line">                <span class="keyword">if</span> (ans == <span class="number">-1</span> ||</span><br><span class="line">                    <span class="built_in">llabs</span>(candidate - selfNumber) &lt; <span class="built_in">llabs</span>(ans - selfNumber) ||</span><br><span class="line">                    <span class="built_in">llabs</span>(candidate - selfNumber) == <span class="built_in">llabs</span>(ans - selfNumber) &amp;&amp; candidate &lt; ans) &#123;</span><br><span class="line">                    ans = candidate;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">to_string</span>(ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>注：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一种：typedef</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> myInt1;</span><br><span class="line"><span class="keyword">typedef</span> std::vector&lt;<span class="type">int</span>&gt; IntVector1;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二种：using 别名声明</span></span><br><span class="line"><span class="keyword">using</span> myInt2 = <span class="type">int</span>;</span><br><span class="line"><span class="keyword">using</span> IntVector2 = std::vector&lt;<span class="type">int</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第三种：using 模板别名</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">using</span> myIntVector = std::vector&lt;T&gt;;</span><br></pre></td></tr></table></figure><ol><li><p><code>using ULL = unsigned long long;</code>：关于别名有三种写法，typedef、using别名声明、using模板声明。</p><p>类型别名（type alias）、<code>#define</code> 宏和 <code>const</code> 常量的区别：<br><img src="https://s2.loli.net/2024/03/02/KH47ykvXJzDcOGq.png" alt=""><br><img src="https://s2.loli.net/2024/03/02/ENLYWubxaqS8IvM.png" alt=""></p></li><li><p><code>string(prefix.rbegin() + (len &amp; 1), prefix.rend());</code>：<br>+<code>len&amp;1</code>是指，如果长度len为单数（len&amp;1==1，涉及位运算，奇数的二进制末位为1），则从下标1开始添加，否则从0开始。<code>string(startIterater,endIterater);</code></p></li><li><p>stoull()、llabs():不在赘述，注意并没有ullabs()的用法。还有一点值得注意，应该使用unsigned long long而非long long,是因为如果输入为：”999999999999999999”,对于13行这句 <code>candidates.push_back(stol(candidate)); stol</code> 会产生溢出，原因是candidate超过 long long，是两个大数相加接近 2^65了。</p></li></ol><h2 id="1-2-x的幂"><a href="#1-2-x的幂" class="headerlink" title="1-2.x的幂"></a>1-2.x的幂</h2><h3 id="1-2-1-2的幂：231"><a href="#1-2-1-2的幂：231" class="headerlink" title="1-2-1.2的幂：231"></a>1-2-1.2的幂：231</h3><p>法一：位运算</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isPowerOfTwo</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> n &gt; <span class="number">0</span> &amp;&amp; (n &amp; (n - <span class="number">1</span>)) == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isPowerOfTwo</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> n &gt; <span class="number">0</span> &amp;&amp; (n &amp; -n) == n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>法二：判断是否为最大的2的幂的约数（取巧，了解）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">static</span> <span class="keyword">constexpr</span> <span class="type">int</span> BIG = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isPowerOfTwo</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> n &gt; <span class="number">0</span> &amp;&amp; BIG % n == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>注:<code>1&lt;&lt;30</code>是指二进制数1左移30位变成$2^{31}$。</p><h3 id="关于常量"><a href="#关于常量" class="headerlink" title="关于常量"></a>关于常量</h3><p>   constexpr用于声明常量表达式,const用于声明常量。<code>1&lt;&lt;30</code>是常量表达式，因为它在<u>编译时就能得到计算结果</u>。并且这里必须加上static使得BIG被声明为<mark>静态常量</mark>，让所有Solution的实例都共享同一份BIG。</p><hr><p>Q:如何判断一个常量表达式是不是运行时才能计算出结果？</p><p>A:考虑以下几点：</p><ol><li><p><strong>非编译时计算</strong>：如果一个常量表达式可以在编译时就计算出结果，那么它就不是运行时才能计算出的。编译器会在编译阶段对这些表达式进行求值。</p></li><li><p><strong>依赖运行时信息</strong>：如果一个常量表达式依赖于在运行时才能确定的信息，比如用户输入、动态分配的内存地址等，那么它就是运行时才能计算出的。</p></li><li><p><strong>函数调用</strong>：如果一个常量表达式中包含函数调用，特别是虚函数调用或者依赖于动态多态性的调用，那么它通常是在运行时才能计算出结果的。</p></li><li><p><strong>条件表达式</strong>：如果一个常量表达式包含条件运算符（如<code>? :</code>），并且条件是在运行时才能确定的，那么它也是在运行时才能计算出结果的。</p></li></ol><p>比如<code>1&lt;&lt;x</code>,<code>pow(3,19)</code>,<code>a&gt;15?true:false</code>都是在运行时才能计算出结果。第一个对应第2点，x在运行时才能确定；第二个对应第3点，包含了pow()函数调用;第三个对应第4点，包含了条件运算符的同时包含了运行时才能确定的条件a&gt;15.</p><p>而诸如<code>20&gt;15</code>,<code>4+3</code>,<code>110&lt;&lt;24</code>这类，则是编译时就能计算出结果。</p><hr><p>constexpr和const的详细区别：<a href="https://zhuanlan.zhihu.com/p/635720513">constexpr和const</a></p><p>   总的来说，const 是一个用于指定常量的关键字，而 constexpr 则是一个用于指定常量表达式的关键字。使用 constexpr 可以让编译器进行优化和检查，提高代码的可读性和运行效率。 </p><h3 id="1-2-2-4的幂：342"><a href="#1-2-2-4的幂：342" class="headerlink" title="1-2-2.4的幂：342"></a>1-2-2.4的幂：342</h3><p>法一：位运算</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isPowerOfFour</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> n &gt; <span class="number">0</span> &amp;&amp; (n &amp; (n - <span class="number">1</span>)) == <span class="number">0</span> &amp;&amp; (n &amp; <span class="number">0xaaaaaaaa</span>) == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>法二：取模</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isPowerOfFour</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> n &gt; <span class="number">0</span> &amp;&amp; (n &amp; (n - <span class="number">1</span>)) == <span class="number">0</span> &amp;&amp; n % <span class="number">3</span> == <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>尝试写出判断一个数是否为8的幂次方。</p><h3 id="1-2-3-3的幂：326"><a href="#1-2-3-3的幂：326" class="headerlink" title="1-2-3.3的幂：326"></a>1-2-3.3的幂：326</h3><p>法一：判断是否为最大的3的幂的约数（取巧，了解）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">static</span> <span class="type">const</span> <span class="type">int</span> BIG = <span class="number">1162261467</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isPowerOfThree</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> n &gt; <span class="number">0</span> &amp;&amp; BIG % n == <span class="number">0</span>; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>法二：试除法（时间复杂度较高）</p><p>不断除以3直到n=1:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isPowerOfThree</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (n &amp;&amp; n % <span class="number">3</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            n /= <span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n == <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="1-3-颠倒二进制位：190"><a href="#1-3-颠倒二进制位：190" class="headerlink" title="1-3.颠倒二进制位：190"></a>1-3.颠倒二进制位：190</h2><p><code>uint32_t</code>是无符号32位整数类型，范围在$0$~$2^{32}-1$，定义在头文件<code>&lt;cstdint&gt;</code>中。</p><p>法一：逐位颠倒</p><p>每次把 res 左移，把 n 的二进制末尾数字，拼接到结果 res 的末尾。然后把 n 右移。</p><p>以8位二进制为例：</p><div class="table-container"><table><thead><tr><th style="text-align:center">i</th><th style="text-align:center">n</th><th style="text-align:center">n&amp;1</th><th style="text-align:center">res</th></tr></thead><tbody><tr><td style="text-align:center">—-</td><td style="text-align:center">11001001</td><td style="text-align:center">1</td><td style="text-align:center">—-</td></tr><tr><td style="text-align:center">0</td><td style="text-align:center">01100100</td><td style="text-align:center">0</td><td style="text-align:center">1,0000000</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">00110010</td><td style="text-align:center">0</td><td style="text-align:center">10,000000</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">00011001</td><td style="text-align:center">1</td><td style="text-align:center">100,00000</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">00001100</td><td style="text-align:center">0</td><td style="text-align:center">1001,0000</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">00000110</td><td style="text-align:center">0</td><td style="text-align:center">10010,000</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">00000011</td><td style="text-align:center">1</td><td style="text-align:center">100100,00</td></tr><tr><td style="text-align:center">6</td><td style="text-align:center">00000001</td><td style="text-align:center">1</td><td style="text-align:center">1001001,0</td></tr><tr><td style="text-align:center">7</td><td style="text-align:center">00000000</td><td style="text-align:center">—-</td><td style="text-align:center">10010011</td></tr></tbody></table></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">uint32_t</span> <span class="title">reverseBits</span><span class="params">(<span class="type">uint32_t</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="type">uint32_t</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; n &gt; <span class="number">0</span> &amp;&amp; i &lt; <span class="number">32</span>; i++) &#123;</span><br><span class="line">            res |= (n &amp; <span class="number">1</span>) &lt;&lt; (<span class="number">31</span> - i);</span><br><span class="line">            <span class="comment">//如n&amp;1==1时,n为奇数.同时也能判断出n末位为1,所以n&amp;1也代表末位</span></span><br><span class="line">            <span class="comment">//末位右移31-i位，后面补上0并与res进行位或操作</span></span><br><span class="line">            n &gt;&gt;= <span class="number">1</span>; <span class="comment">// n左移1位，相当于去除之前的末位</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>或者：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">uint32_t</span> <span class="title">reverseBits</span><span class="params">(<span class="type">uint32_t</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="type">uint32_t</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; n &gt; <span class="number">0</span> &amp;&amp; i &lt; <span class="number">32</span>; i++) &#123;<span class="comment">//去掉n&gt;0的条件</span></span><br><span class="line">            res = (res &lt;&lt; <span class="number">1</span>) | (n &amp; <span class="number">1</span>);</span><br><span class="line">            n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>法二：位运算分治(最优)</p><p>   类似归并排序，其思想是分而治之，把数字分为两半，然后交换这两半的顺序；然后把前后两个半段都再分成两半，交换内部顺序……直至最后交换顺序的时候，交换的数字只有 1 位。</p><p><img src="https://s2.loli.net/2024/03/03/o8rGDi5tnCQw6e1.png" alt=""></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">const</span> <span class="type">uint32_t</span> M1 = <span class="number">0x55555555</span>; <span class="comment">// 01010101010101010101010101010101</span></span><br><span class="line">    <span class="type">const</span> <span class="type">uint32_t</span> M2 = <span class="number">0x33333333</span>; <span class="comment">// 00110011001100110011001100110011</span></span><br><span class="line">    <span class="type">const</span> <span class="type">uint32_t</span> M4 = <span class="number">0x0f0f0f0f</span>; <span class="comment">// 00001111000011110000111100001111</span></span><br><span class="line">    <span class="type">const</span> <span class="type">uint32_t</span> M8 = <span class="number">0x00ff00ff</span>; <span class="comment">// 00000000111111110000000011111111</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">uint32_t</span> <span class="title">reverseBits</span><span class="params">(<span class="type">uint32_t</span> n)</span> </span>&#123;</span><br><span class="line">        n = n &gt;&gt; <span class="number">1</span> &amp; M1 | (n &amp; M1) &lt;&lt; <span class="number">1</span>;</span><br><span class="line">        n = n &gt;&gt; <span class="number">2</span> &amp; M2 | (n &amp; M2) &lt;&lt; <span class="number">2</span>;</span><br><span class="line">        n = n &gt;&gt; <span class="number">4</span> &amp; M4 | (n &amp; M4) &lt;&lt; <span class="number">4</span>;</span><br><span class="line">        n = n &gt;&gt; <span class="number">8</span> &amp; M8 | (n &amp; M8) &lt;&lt; <span class="number">8</span>;</span><br><span class="line">        <span class="keyword">return</span> n &gt;&gt; <span class="number">16</span> | n &lt;&lt; <span class="number">16</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>关于分治算法：<a href="https://zhuanlan.zhihu.com/p/510267724">分治算法</a></p><h3 id="1-3-1-位1的个数：191"><a href="#1-3-1-位1的个数：191" class="headerlink" title="1-3-1.位1的个数：191"></a>1-3-1.位1的个数：191</h3><p>法一：遍历每个二进制位</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">hammingWeight</span><span class="params">(<span class="type">uint32_t</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (n &amp; (<span class="number">1</span> &lt;&lt; i)) &#123; <span class="comment">// 1左移i位</span></span><br><span class="line">                num++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>法二：优化</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">hammingWeight</span><span class="params">(<span class="type">uint32_t</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (n) &#123;</span><br><span class="line">            n &amp;= n - <span class="number">1</span>;</span><br><span class="line">            num++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>n&amp;(n-1)</code>可以用来判断有几个1，也可以通过其值是否为0来判断一个数是不是2的幂(详见1-2-2)。也有内置函数<code>__builtin_popcount(n)</code>，时间复杂度$O(1)$。</p><h3 id="1-3-2-数字的补数：476-低位取反"><a href="#1-3-2-数字的补数：476-低位取反" class="headerlink" title="1-3-2.数字的补数：476(低位取反)"></a>1-3-2.数字的补数：476(低位取反)</h3><p>法一:常规位运算</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findComplement</span><span class="params">(<span class="type">int</span> num)</span> </span>&#123;</span><br><span class="line">        uint t = (uint)<span class="number">1</span> &lt;&lt; <span class="number">31</span>;</span><br><span class="line">        <span class="keyword">while</span> ((t &amp; num) == <span class="number">0</span>) &#123;</span><br><span class="line">            num |= t;</span><br><span class="line">            t &gt;&gt;= <span class="number">1</span>; <span class="comment">// t右移一位</span></span><br><span class="line">            <span class="comment">//相当于对num从高位到地位逐个遍历,把num第一个1前面的0都改为1</span></span><br><span class="line">            <span class="comment">// 这样num取反才是正确的</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ~num; <span class="comment">// 取反</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>t:1000…000-&gt;0100…000-&gt;…-&gt;0000…0001(如果一直循环)</p><p>num(5):000…0101-&gt;100…0101-&gt;…-&gt;111…1101-&gt;(取反)000…0010(32位二进制数)-&gt;2</p><p>注意，<code>==</code>的优先级比<code>&amp;</code>高，所以<code>t&amp;num</code>必须带上括号。</p><p><code>(uint)1&lt;&lt;31</code>也可以写为<code>1u&lt;&lt;31</code>。uint相当于unsigned int.</p><hr><p>或者：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findComplement</span><span class="params">(<span class="type">int</span> num)</span> </span>&#123;</span><br><span class="line">        uint mask = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (mask &lt; num) &#123;</span><br><span class="line">            mask &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">            mask |= <span class="number">1</span>;<span class="comment">//mask比较特殊，这里mask++;也可以</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mask ^ num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>由于mask只含有1个“1”,因此mask&lt;num也就是mask的“1”相比num中的最高位1，总是在同位或者更低位，即还在遍历num中。000…1000&lt;000…1011</p><hr><p>法二：位运算分治</p><p>时间复杂度为$O(log log num)$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findComplement</span><span class="params">(<span class="type">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> t = num;</span><br><span class="line">        t |= t &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        t |= t &gt;&gt; <span class="number">2</span>;</span><br><span class="line">        t |= t &gt;&gt; <span class="number">4</span>;</span><br><span class="line">        t |= t &gt;&gt; <span class="number">8</span>;</span><br><span class="line">        t |= t &gt;&gt; <span class="number">16</span>;</span><br><span class="line">        <span class="keyword">return</span> ~num &amp; t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>注</strong>：分治目的是把t各低位为零数取反，最终变为与num对应低位全1的32位二进制数。</p><p>t:0000…0101-&gt;0000…0111(<mark>奇位且低位的0变为1</mark>)-&gt;…-&gt;0000…0111</p><p>~num=1111…1010,则<code>~num&amp;t=num^t</code>=0000…0010</p><p>在位运算中，<code>^</code> 表示<u>按位异或</u>运算，它的结果是对应位不同则为1，相同则为0。而 <code>&amp;</code> 表示<u>按位与</u>运算，它的结果是对应位都为1时为1，否则为0。</p><h3 id="1-3-3-汉明距离：461"><a href="#1-3-3-汉明距离：461" class="headerlink" title="1-3-3.汉明距离：461"></a>1-3-3.汉明距离：461</h3><p>汉明距离指两个数字对应的<mark>二进制位不同</mark>的位置的数目。该题其实是1-3-1和1-3-2的结合</p><p>法一：(最优)内置函数，时间复杂度O(1)。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">hammingDistance</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> __builtin_popcount(x ^ y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>法二：Brian Kernighan算法(基础位运算结合)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">hammingDistance</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> t = x ^ y;<span class="comment">//按位异或,不同的地方全变为1</span></span><br><span class="line">        <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (t) &#123;</span><br><span class="line">            t &amp;= t - <span class="number">1</span>;<span class="comment">//用来判断有几个1</span></span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>或者:移位实现位计数</p><p>只是换一种方式统计1的个数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">hammingDistance</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> t = x ^ y; <span class="comment">// 按位异或,不同的地方全变为1</span></span><br><span class="line">        <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (t) &#123;</span><br><span class="line">            count += t &amp; <span class="number">1</span>;<span class="comment">//t末位为1,则t&amp;1=1,count加1</span></span><br><span class="line">            t &gt;&gt;= <span class="number">1</span>;<span class="comment">//相当于去除末位,首位补0</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>法三：位运算分治</p><p><img src="https://s2.loli.net/2024/03/05/yXfnBWUePE2uRHz.png" alt=""></p><p>两两切分统计：掩码对数值进行切分，连续的0用于进位，连续的1是运算位。五次运算分别类似于是二进制数加法，四进制数加法，十六进制数加法和三十二进制数加法。如01111011-&gt;01 10 01 10(1212)-&gt;0011 0011(33)-&gt;00000110(6)，个数即为6。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">const</span> <span class="type">uint32_t</span> M1 = <span class="number">0x55555555</span>;</span><br><span class="line">    <span class="type">const</span> <span class="type">uint32_t</span> M2 = <span class="number">0x33333333</span>;</span><br><span class="line">    <span class="type">const</span> <span class="type">uint32_t</span> M4 = <span class="number">0x0f0f0f0f</span>;</span><br><span class="line">    <span class="type">const</span> <span class="type">uint32_t</span> M8 = <span class="number">0x00ff00ff</span>;</span><br><span class="line">    <span class="type">const</span> <span class="type">uint32_t</span> M16 = <span class="number">0x0000ffff</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">hammingDistance</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = x ^ y;</span><br><span class="line">        n = ((n &gt;&gt; <span class="number">1</span>) &amp; M1) + (n &amp; M1);</span><br><span class="line">        n = ((n &gt;&gt; <span class="number">2</span>) &amp; M2) + (n &amp; M2);</span><br><span class="line">        n = ((n &gt;&gt; <span class="number">4</span>) &amp; M4) + (n &amp; M4);</span><br><span class="line">        n = ((n &gt;&gt; <span class="number">8</span>) &amp; M8) + (n &amp; M8);</span><br><span class="line">        n = ((n &gt;&gt; <span class="number">16</span>) &amp; M16) + (n &amp; M16);</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="关于运算符优先级"><a href="#关于运算符优先级" class="headerlink" title="关于运算符优先级"></a>关于运算符优先级</h3><p>最好是手动加入括号控制运算顺序。总优先级：算术运算&gt;关系运算&gt;逻辑运算。</p><p>算术运算（加+ 减- 乘* 除/ 取余%），关系运算（&gt; &gt;= &lt; &lt;= != ==) ，逻辑运算 （与或非）</p><p><img title="" src="https://s2.loli.net/2024/03/05/56LdGaltPXoRqpU.png" alt="" width="430"></p><h3 id="常见位运算技巧"><a href="#常见位运算技巧" class="headerlink" title="常见位运算技巧"></a>常见位运算技巧</h3><ol><li><p><code>n &amp; M1</code>:将二进制数n中的奇数位的1保留，丢弃偶数位。如n=00011001…01110101-&gt;00010001…01010001。<code>(n&gt;&gt;2)&amp;M2</code>同理。</p></li><li><p><code>(n &gt;&gt; 1) &amp; M1 | (n &amp; M1) &lt;&lt; 1</code>：交换相邻两个数的位置。<code>(n &gt;&gt; 2) &amp; M2 | (n &amp; M2) &lt;&lt; 2</code>则是两个为一组，互相交换各组。如0011-&gt;1100</p></li><li><p><code>((n &gt;&gt; 1) &amp; M1) + (n &amp; M1)</code>：将n中的相邻两位相加，如10110101-&gt;1211(即01110101).<code>((n &gt;&gt; 2) &amp; M2) + (n &amp; M2)</code>同理，如1211(即01 11 01 01)-&gt;32(即0011 0010)</p></li><li><p><code>t &amp; 1</code>：判断t是否为奇数,如果为奇数则结果为1。/获取t末位数字。<code>(t&gt;&gt;i) &amp; 1</code>则用来获取第i位的值（从右往左数第i位）。</p></li><li><p><code>t &amp; (t-1)</code>：每在循环内执行一次并计数+1，则循环完成就可以统计出二进制数中1的个数。</p></li></ol><hr><h3 id="1-3-4-汉明距离总和-477"><a href="#1-3-4-汉明距离总和-477" class="headerlink" title="1-3-4.汉明距离总和:477"></a>1-3-4.汉明距离总和:477</h3><p>最优解：逐位统计</p><p>先看所有数字的第一位，然后再第二位…而非先计算出两两之间的汉明距离。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">totalHammingDistance</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>, size = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) &#123;</span><br><span class="line">            <span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">                n += (num &gt;&gt; i) &amp; <span class="number">1</span>; <span class="comment">// n加上num第i位的值(从右往左第i位)</span></span><br><span class="line">                <span class="comment">//第i位的值只可能是0/1，因此n记录下出现过1的次数</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//第i位一共n个1，size-n个0</span></span><br><span class="line">            ans += n * (size - n);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="1-3-5-交替位二进制数：693"><a href="#1-3-5-交替位二进制数：693" class="headerlink" title="1-3-5.交替位二进制数：693"></a>1-3-5.交替位二进制数：693</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">hasAlternatingBits</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        uint a = n ^ (n &gt;&gt; <span class="number">1</span>);<span class="comment">//long也可以，但是int不行</span></span><br><span class="line">        <span class="keyword">return</span> (a &amp; (a + <span class="number">1</span>)) == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>a=n^(n&gt;&gt;1)</code>:a除去前导的0之外，其它数位全部都是1。因为如果a是低位二进制位交替出现的话，那右移一位就是原来是0的移到了原来是1的位置上；再异或，就全部都是1了。</p><p><code>a&amp;(a+1)</code>:二进制位全部都是1的a加上1,得到的二进制数a+1多了最前面一个数位1其它都是0,再与全部是0的a进行&amp;位与运算肯定是0。</p><h2 id="1-4-数学思维（-）"><a href="#1-4-数学思维（-）" class="headerlink" title="1-4.数学思维（*）"></a>1-4.数学思维（*）</h2><h3 id="1-4-1-可怜的小猪：458"><a href="#1-4-1-可怜的小猪：458" class="headerlink" title="1-4-1.可怜的小猪：458"></a>1-4-1.可怜的小猪：458</h3><p>数学分析+base进制：</p><p><a href="https://leetcode.cn/problems/poor-pigs/solutions/1/hua-jie-suan-fa-458-ke-lian-de-xiao-zhu-by-guanpen/">画解算法:458.可怜的小猪</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">poorPigs</span><span class="params">(<span class="type">int</span> buckets, <span class="type">int</span> minutesToDie, <span class="type">int</span> minutesToTest)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> base = minutesToTest / minutesToDie + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">ceil</span>(<span class="built_in">log</span>(buckets) / <span class="built_in">log</span>(base) - <span class="number">1e-5</span>);<span class="comment">//是1e-5即10^(-5)</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>ceil()</code>:向上取整函数。</p><p>减去1e-5:目的是让<code>log(buckets) / log(base)</code>减去一个即小的值以避免<mark>舍入误差</mark>，也可以是1e-7等等。因为当buckets=125,minutesToDie=1,minutesToTest=4时，结果应该是3，而不考虑舍入误差，则答案会是4。在这段代码中，<code>log(buckets) / log(base)</code>的结果通常是一个浮点数，但由于浮点数计算的精度限制，可能会出现微小的舍入误差。通过减去 1e-5，可以确保结果向下取整，避免由于舍入误差而导致的计算结果错误。这样做可以更接近正确的整数结果。</p><h3 id="1-4-2-各位相加：258"><a href="#1-4-2-各位相加：258" class="headerlink" title="1-4-2.各位相加：258"></a>1-4-2.各位相加：258</h3><p>详细思路：<a href="https://leetcode.cn/problems/add-digits/solutions/1/xiang-xi-tong-su-de-si-lu-fen-xi-duo-jie-fa-by-5-7/">力扣（LeetCode)</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">addDigits</span><span class="params">(<span class="type">int</span> num)</span> </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> (num - <span class="number">1</span>) % <span class="number">9</span> + <span class="number">1</span>; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="1-4-3-灯泡开关：319"><a href="#1-4-3-灯泡开关：319" class="headerlink" title="1-4-3.灯泡开关：319"></a>1-4-3.灯泡开关：319</h3><p>详细思路：<a href="https://leetcode.cn/problems/bulb-switcher/solutions/1102293/gong-shui-san-xie-jing-dian-shu-lun-tui-upnnb/">【宫水三叶】经典数论推论题</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">bulbSwitch</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sqrt</span>(n + <span class="number">0.5</span>); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>答案为$\lfloor \sqrt{n} \rfloor$，其中 $\lfloor \cdot \rfloor$ 表示向下取整。</p><p>加上0.5：由于 $\sqrt{n}$涉及到浮点数运算，为了保证不出现精度问题（避免<mark>舍入误差</mark>），我们可以计算 $\sqrt{n + \dfrac{1}{2}}$​，这样可以保证计算出来的结果向下取整在32位整数范围内一定正确。其实加上一个较小的数也可以，比如1e-5。</p><p>   综上，对于<u>return浮点数类型</u>且<u>函数返回值类型为int</u>的，往往需要向上或者向下取整。为避免舍入误差，需要引入较小的数，比如1e-5($10^{-5}$)，是加是减根据题目判断。</p><h2 id="1-5-进制转换"><a href="#1-5-进制转换" class="headerlink" title="1-5.进制转换"></a>1-5.进制转换</h2><h3 id="1-5-1-数字转换为16进制数：405"><a href="#1-5-1-数字转换为16进制数：405" class="headerlink" title="1-5-1.数字转换为16进制数：405"></a>1-5-1.数字转换为16进制数：405</h3><p>位运算，关键在于<code>int val = (num &gt;&gt; (4 * i)) &amp; 0xf</code>将二进制数分组以后再一一运算。如果这里是转为8进制数，则每三个数为一组，同理。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">toHex</span><span class="params">(<span class="type">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (num == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;0&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        string ans = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="comment">// 32位的二进制数一共8组，每组4个数num&gt;&gt;(4*i)可以将第i组的四个数移到末尾</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">7</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="type">int</span> val = (num &gt;&gt; (<span class="number">4</span> * i)) &amp; <span class="number">0xf</span>;<span class="comment">//一个val对应十六进制的一个数字0-9/字母a-f</span></span><br><span class="line">            <span class="keyword">if</span> (ans.<span class="built_in">length</span>() &gt; <span class="number">0</span> || val &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="type">char</span> digit = val &lt; <span class="number">10</span> ? (<span class="type">char</span>)(val + <span class="string">&#x27;0&#x27;</span>) : (<span class="type">char</span>)(<span class="string">&#x27;a&#x27;</span> + val - <span class="number">10</span>);</span><br><span class="line">                ans.<span class="built_in">push_back</span>(digit);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><p><code>ans.length()&gt;0</code>用于避免出现前置0.</p></li><li><p>求负整数的补码:将其原码<u>除符号位外</u>的所有位取反（0变1，1变0，符号位为1不变）后加1。</p></li><li><p>该题还要注意一点，<code>val+&#39;0&#39;</code>只适用于val&lt;10时的情况，因为<code>&#39;a&#39;!=&#39;9&#39;+1</code>，它们对应的ASCII码并不是连续的。</p></li></ul><h3 id="1-5-2-Excel表列名称：168"><a href="#1-5-2-Excel表列名称：168" class="headerlink" title="1-5-2.Excel表列名称：168"></a>1-5-2.Excel表列名称：168</h3><p>本质为10进制转26进制。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">convertToTitle</span><span class="params">(<span class="type">int</span> columnNumber)</span> </span>&#123;</span><br><span class="line">        string ans = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">while</span> (columnNumber &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            --columnNumber;</span><br><span class="line">            <span class="type">char</span> c = columnNumber % <span class="number">26</span> + <span class="string">&#x27;A&#x27;</span>;<span class="comment">//从末位从后往前添加字符</span></span><br><span class="line">            ans.<span class="built_in">push_back</span>(c);</span><br><span class="line">            columnNumber /= <span class="number">26</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">reverse</span>(ans.<span class="built_in">begin</span>(), ans.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="1-6-数字变换-统计-数学分析"><a href="#1-6-数字变换-统计-数学分析" class="headerlink" title="1-6.数字变换/统计 + 数学分析"></a>1-6.数字变换/统计 + 数学分析</h2><h3 id="1-6-1-最大变换：670"><a href="#1-6-1-最大变换：670" class="headerlink" title="1-6-1.最大变换：670"></a>1-6-1.最大变换：670</h3><p><u>最接近右边且最大</u>的数是s[maxIndex]与<u>最接近左边且非最大</u>的数s[index]进行交换。但是如果这样得出的maxIndex&lt;index，那么结果会出现问题。因此需要额外引入index2来记录每一次循环完成后的maxIndex，index2=maxIndex.</p><p>贪心：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maximumSwap</span><span class="params">(<span class="type">int</span> num)</span> </span>&#123;</span><br><span class="line">        string s = <span class="built_in">to_string</span>(num);</span><br><span class="line">        <span class="type">int</span> n = s.<span class="built_in">size</span>(), maxIndex = n - <span class="number">1</span>, index1 = <span class="number">-1</span>, index2 = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[maxIndex] &lt; s[i]) &#123;</span><br><span class="line">                maxIndex = i;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s[i] &lt; s[maxIndex]) &#123;</span><br><span class="line">                index1 = i;</span><br><span class="line">                index2 = maxIndex;<span class="comment">//比如98368,maxIndex=0,需要额外的index2记录</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (index1 &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">swap</span>(s[index1], s[index2]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">stoi</span>(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="1-6-2-数字1的个数：233（困难）"><a href="#1-6-2-数字1的个数：233（困难）" class="headerlink" title="1-6-2.数字1的个数：233（困难）"></a>1-6-2.数字1的个数：233（困难）</h3><p>解题思路：<a href="https://leetcode.cn/problems/number-of-digit-one/solutions/1/233-shu-zi-1-de-ge-shu-qing-xi-tu-jie-by-pgb1/">数字 1 的个数（清晰图解）</a></p><script type="math/tex; mode=display">res+=\left \{\begin{array}{}&high \times digit\ ,\ &cur = 0\ ;\\&high \times digit + low + 1 \ ,\ &cur = 1\ ;\\&(high + 1) \times digit\ ,\ &cur\gt1\ ;\\\end{array}\right.</script><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">countDigitOne</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="type">long</span> digit = <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> high = n / <span class="number">10</span>, cur = n % <span class="number">10</span>, low = <span class="number">0</span>, res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (high != <span class="number">0</span> || cur != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (cur == <span class="number">0</span>) &#123;</span><br><span class="line">                res += high * digit;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cur == <span class="number">1</span>) &#123;</span><br><span class="line">                res += high * digit + low + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                res += (high + <span class="number">1</span>) * digit;</span><br><span class="line">            &#125;</span><br><span class="line">            low += cur * digit;</span><br><span class="line">            cur = high % <span class="number">10</span>;</span><br><span class="line">            high /= <span class="number">10</span>;</span><br><span class="line">            digit *= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="1-6-3-统计各位数字都不同的数字个数：357"><a href="#1-6-3-统计各位数字都不同的数字个数：357" class="headerlink" title="1-6-3.统计各位数字都不同的数字个数：357"></a>1-6-3.统计各位数字都不同的数字个数：357</h3><p>使用数字的排列组合$A^{n}_{k}​=\frac{n!}{(n−k)!}$</p><blockquote><p>含有 $d（2 \le d \le 10）$位数的各位数字都不同的数字$x$的个数可以由公式$9 \times A<em>9^{d-1}$计算，第一位只能从1-9中选择，后面的d-1位从剩下的9个数之中选，即$A_9^{d-1}$个。总个数其实就是$res = 10 + 9 \times (A^{1}</em>{9}+A^{2}<em>{9}+…+A^{n-1}</em>{9})$</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">countNumbersWithUniqueDigits</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> res = <span class="number">10</span>, CurrentNum = <span class="number">9</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            CurrentNum *= <span class="number">9</span> - i;</span><br><span class="line">            res += CurrentNum;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="2-快速幂"><a href="#2-快速幂" class="headerlink" title="2.快速幂"></a>2.快速幂</h1><h2 id="2-1-实现pow-x-n-：50"><a href="#2-1-实现pow-x-n-：50" class="headerlink" title="2-1.实现pow(x,n)：50"></a>2-1.实现pow(x,n)：50</h2><p>解题思路：<a href="https://leetcode.cn/problems/powx-n/solutions/1/50-powx-n-kuai-su-mi-qing-xi-tu-jie-by-jyd/">快速幂，清晰图解</a></p><p>关于快速幂：<a href="https://zhuanlan.zhihu.com/p/95902286">快速幂-Pecco</a></p><p>快速幂本质是分治算法，有以下两种方法：</p><p>法一：递归（需要额外栈空间）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">quilkMul</span><span class="params">(<span class="type">double</span> x, <span class="type">long</span> <span class="type">long</span> N)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (N == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1.0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">double</span> y = <span class="built_in">quilkMul</span>(x, N / <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">return</span> N % <span class="number">2</span> == <span class="number">0</span> ? y * y : y * y * x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">myPow</span><span class="params">(<span class="type">double</span> x, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> N = n;</span><br><span class="line">        <span class="keyword">return</span> N &gt;= <span class="number">0</span> ? <span class="built_in">quilkMul</span>(x, N) : <span class="number">1.0</span> / <span class="built_in">quilkMul</span>(x, -N);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>法二：迭代（涉及位运算分析）</p><p>判断<code>N%2==1</code>也可以写为<code>N&amp;1==1</code>,<code>N/=2</code>可以写为<code>N&gt;&gt;=1</code>,更能体现位运算思想。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">quilkMul</span><span class="params">(<span class="type">double</span> x, <span class="type">long</span> <span class="type">long</span> N)</span> </span>&#123;</span><br><span class="line">        <span class="type">double</span> ans = <span class="number">1.0</span>;</span><br><span class="line">        <span class="comment">// 贡献的初始值为 x</span></span><br><span class="line">        <span class="type">double</span> x_contribute = x;</span><br><span class="line">        <span class="comment">// 在对 N 进行二进制拆分的同时计算答案</span></span><br><span class="line">        <span class="keyword">while</span> (N &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (N % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">// 如果 N 二进制表示的最低位为 1，那么需要计入贡献</span></span><br><span class="line">                ans *= x_contribute;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 将贡献不断地平方</span></span><br><span class="line">            x_contribute *= x_contribute;</span><br><span class="line">            <span class="comment">// 舍弃 N 二进制表示的最低位，这样我们每次只要判断最低位即可</span></span><br><span class="line">            N /= <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">myPow</span><span class="params">(<span class="type">double</span> x, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> N = n;</span><br><span class="line">        <span class="keyword">return</span> N &gt;= <span class="number">0</span> ? <span class="built_in">quilkMul</span>(x, N) : <span class="number">1.0</span> / <span class="built_in">quilkMul</span>(x, -N);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>注意：这里使用了<code>long long N = n;</code>，因为在n=INT_MIN时，-n=-INT_MIN=INT_MIN(INT_MIN=$-2^{31}$,INT_MAX=$2^{31}-1$)，使用long long存储能避免这一麻烦。</p></blockquote><h3 id="2-2-超级次方：372"><a href="#2-2-超级次方：372" class="headerlink" title="2-2.超级次方：372"></a>2-2.超级次方：372</h3><p>法一：倒序遍历+快速幂</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">pow</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 数字太大，不使用long容易超出范围</span></span><br><span class="line">        <span class="type">long</span> ans = <span class="number">1</span>;</span><br><span class="line">        <span class="type">long</span> N = n;</span><br><span class="line">        <span class="type">long</span> x_contribute = x;</span><br><span class="line">        <span class="keyword">while</span> (N &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (N &amp; <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">// 包括之后的多次对1337取模都是为了避免溢出</span></span><br><span class="line">                ans = ans * x_contribute % <span class="number">1337</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            x_contribute = x_contribute * x_contribute % <span class="number">1337</span>;</span><br><span class="line">            N &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">superPow</span><span class="params">(<span class="type">int</span> a, vector&lt;<span class="type">int</span>&gt;&amp; b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (a == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> res = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = b.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            res = res * <span class="built_in">pow</span>(a, b[i]) % <span class="number">1337</span>;</span><br><span class="line">            a = <span class="built_in">pow</span>(a, <span class="number">10</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>值得注意的是，形如<code>x_contribute = x_contribute * x_contribute % 1337;</code>不能写成<code>x_contribute *= x_contribute % 1337;</code>因为一个最终是平方对1337取的模，另一个是自身对1337取模以后的值再乘以自身，这样会导致溢出（注意运算顺序）。</p><p>法二：正序遍历+秦九韶算法</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">pow</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> n)</span> </span>&#123; <span class="comment">// 数字太大，不使用long容易超出范围</span></span><br><span class="line">        <span class="type">long</span> ans = <span class="number">1</span>;</span><br><span class="line">        <span class="type">long</span> N = n;</span><br><span class="line">        <span class="type">long</span> x_contribute = x;</span><br><span class="line">        <span class="keyword">while</span> (N &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (N &amp; <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">// 包括之后的多次对1337取模都是为了避免溢出</span></span><br><span class="line">                ans = ans * x_contribute % <span class="number">1337</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            x_contribute = x_contribute * x_contribute % <span class="number">1337</span>;</span><br><span class="line">            N &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">superPow</span><span class="params">(<span class="type">int</span> a, vector&lt;<span class="type">int</span>&gt;&amp; b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (a == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> res = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : b) &#123; <span class="comment">// 区别仅在于for循环</span></span><br><span class="line">            res = <span class="built_in">pow</span>(res, <span class="number">10</span>) * <span class="built_in">pow</span>(a, num) % <span class="number">1337</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="2-3-两数相除：29"><a href="#2-3-两数相除：29" class="headerlink" title="2-3.两数相除：29"></a>2-3.两数相除：29</h3><blockquote><p>类似快速幂通过乘法实现幂，这里使用“快速乘”算法通过加法实现乘法。</p></blockquote><p>快速乘+类二分查找</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">divide</span><span class="params">(<span class="type">int</span> dividend, <span class="type">int</span> divisor)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 三种特殊情况</span></span><br><span class="line">        <span class="comment">//  考虑被除数为最小值的情况</span></span><br><span class="line">        <span class="keyword">if</span> (dividend == INT_MIN) &#123;</span><br><span class="line">            <span class="keyword">if</span> (divisor == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> INT_MIN;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (divisor == <span class="number">-1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> INT_MAX;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 考虑除数为最小值的情况</span></span><br><span class="line">        <span class="keyword">if</span> (divisor == INT_MIN) &#123;</span><br><span class="line">            <span class="keyword">return</span> dividend == INT_MIN ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 考虑被除数为 0 的情况</span></span><br><span class="line">        <span class="keyword">if</span> (dividend == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 一般情况，使用类二分查找</span></span><br><span class="line">        <span class="comment">//  将所有的正数取相反数，这样就只需要考虑一种情况</span></span><br><span class="line">        <span class="type">bool</span> rev = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (dividend &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            dividend = -dividend;</span><br><span class="line">            rev = !rev;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (divisor &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            divisor = -divisor;</span><br><span class="line">            rev = !rev;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; candidates = &#123;divisor&#125;;</span><br><span class="line">        <span class="comment">// 注意溢出</span></span><br><span class="line">        <span class="keyword">while</span> (candidates.<span class="built_in">back</span>() &gt;= dividend - candidates.<span class="built_in">back</span>()) &#123;</span><br><span class="line">            candidates.<span class="built_in">push_back</span>(candidates.<span class="built_in">back</span>() + candidates.<span class="built_in">back</span>());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = candidates.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (candidates[i] &gt;= dividend) &#123;</span><br><span class="line">                ans += (<span class="number">1</span> &lt;&lt; i);</span><br><span class="line">                dividend -= candidates[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> rev ? -ans : ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/03/10/vhsgej4YJL8tq9O.png" alt=""></p><p><img src="https://s2.loli.net/2024/03/10/jgRMEvPXiGp4klB.png" alt=""></p><blockquote><p>将所有正数取相反数：确保都是负数，从而避免溢出，因为都转为正数会导致INT_MIN这个边界难以处理。</p></blockquote><p>快速乘代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 快速乘</span></span><br><span class="line">    <span class="keyword">auto</span> quickAdd = [](<span class="type">int</span> y, <span class="type">int</span> z, <span class="type">int</span> x) &#123;</span><br><span class="line">        <span class="comment">// x 和 y 是负数，z 是正数</span></span><br><span class="line">        <span class="comment">// 需要判断 z * y &gt;= x 是否成立</span></span><br><span class="line">        <span class="type">int</span> result = <span class="number">0</span>, add = y;</span><br><span class="line">        <span class="keyword">while</span> (z) &#123;</span><br><span class="line">            <span class="keyword">if</span> (z &amp; <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">// 需要保证 result + add &gt;= x</span></span><br><span class="line">                <span class="keyword">if</span> (result &lt; x - add) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                result += add;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (z != <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">// 需要保证 add + add &gt;= x</span></span><br><span class="line">                <span class="keyword">if</span> (add &lt; x - add) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                add += add;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 不能使用除法</span></span><br><span class="line">            z &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>y对应除数divisor，z对应中点mid，x对应被除数dividend.</p>]]></content>
      
      
      <categories>
          
          <category> leetcode刷题笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> leetcode </tag>
            
            <tag> 位运算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2.2字符串篇(3)</title>
      <link href="/posts/1f30e95.html"/>
      <url>/posts/1f30e95.html</url>
      
        <content type="html"><![CDATA[<h1 id="7-字符串子序列问题"><a href="#7-字符串子序列问题" class="headerlink" title="7.字符串子序列问题"></a>7.字符串子序列问题</h1><p>可以用双指针/动态规划完成。</p><p>如392、524题</p><p>注：compare方法模板<code>str1.compare(str2);</code>用来比较两个字符串哪个的<mark>字符序</mark>更小（而非长度）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">std::string str1 = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">std::string str2 = <span class="string">&quot;def&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> result = str1.<span class="built_in">compare</span>(str2);<span class="comment">//返回负数</span></span><br></pre></td></tr></table></figure><ul><li>如果 <code>str1</code> 小于 <code>str2</code>，则 <code>result</code> 将为负数。</li><li>如果 <code>str1</code> 等于 <code>str2</code>，则 <code>result</code> 将为 0。</li><li>如果 <code>str1</code> 大于 <code>str2</code>，则 <code>result</code> 将为正数。</li></ul><hr><p>判断s是否是t的子字符串 </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isSubsequence</span><span class="params">(string s, string t)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> sPos=<span class="number">0</span>,tPos=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> n=s.<span class="built_in">length</span>(),m=t.<span class="built_in">length</span>();</span><br><span class="line">        <span class="keyword">while</span>(sPos&lt;n&amp;&amp;tPos&lt;m)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s[sPos]==t[tPos])&#123;</span><br><span class="line">                sPos++;</span><br><span class="line">            &#125;</span><br><span class="line">            tPos++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sPos==n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="8-高精度运算"><a href="#8-高精度运算" class="headerlink" title="8.高精度运算"></a>8.高精度运算</h1><h2 id="8-1-加一：66"><a href="#8-1-加一：66" class="headerlink" title="8-1.加一：66"></a>8-1.加一：66</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">plusOne</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; digits)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = digits.<span class="built_in">size</span>(), pos = n - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (pos &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (digits[pos] != <span class="number">9</span>) &#123;</span><br><span class="line">                digits[pos]++;</span><br><span class="line">                <span class="keyword">return</span> digits;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                digits[pos--] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//全是9的情况</span></span><br><span class="line">        digits.<span class="built_in">emplace_back</span>(<span class="number">0</span>);</span><br><span class="line">        digits[<span class="number">0</span>] = <span class="number">1</span>; <span class="comment">//其他数字已经在while循环中被改成9了</span></span><br><span class="line">        <span class="keyword">return</span> digits;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="8-2-二进制求和：67"><a href="#8-2-二进制求和：67" class="headerlink" title="8-2.二进制求和：67"></a>8-2.二进制求和：67</h2><p>法一：模拟(最优)</p><p>关键在于多次进行reverse方便运算和进位；同时进位数carry的处理也很巧妙。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">addBinary</span><span class="params">(string a, string b)</span> </span>&#123;</span><br><span class="line">        string ans;</span><br><span class="line">        <span class="built_in">reverse</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>());</span><br><span class="line">        <span class="built_in">reverse</span>(b.<span class="built_in">begin</span>(), b.<span class="built_in">end</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> n = <span class="built_in">max</span>(a.<span class="built_in">size</span>(), b.<span class="built_in">size</span>()), carry = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            carry += i &lt; a.<span class="built_in">size</span>() ? (a[i] == <span class="string">&#x27;1&#x27;</span>) : <span class="number">0</span>;</span><br><span class="line">            carry += i &lt; b.<span class="built_in">size</span>() ? (b[i] == <span class="string">&#x27;1&#x27;</span>) : <span class="number">0</span>;</span><br><span class="line">            ans += carry % <span class="number">2</span> ? <span class="string">&quot;1&quot;</span> : <span class="string">&quot;0&quot;</span>;</span><br><span class="line">            carry /= <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (carry) &#123;</span><br><span class="line">            ans += <span class="string">&quot;1&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">reverse</span>(ans.<span class="built_in">begin</span>(), ans.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>法二：位运算</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">addBinary</span><span class="params">(string a, string b)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 使用bitset来处理二进制相加</span></span><br><span class="line">        <span class="function">bitset&lt;10000&gt; <span class="title">x</span><span class="params">(a)</span></span>;</span><br><span class="line">        <span class="function">bitset&lt;10000&gt; <span class="title">y</span><span class="params">(b)</span></span>;</span><br><span class="line">        <span class="keyword">while</span> (y.<span class="built_in">any</span>()) &#123;</span><br><span class="line">            <span class="comment">// 计算当前位的和和进位</span></span><br><span class="line">            bitset&lt;10000&gt; sum = x ^ y;</span><br><span class="line">            bitset&lt;10000&gt; carry = (x &amp; y) &lt;&lt; <span class="number">1</span>;</span><br><span class="line">            <span class="comment">// 更新x和y</span></span><br><span class="line">            x = sum;</span><br><span class="line">            y = carry;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 将bitset转换为字符串，并去除前导零</span></span><br><span class="line">        string ans = x.<span class="built_in">to_string</span>();</span><br><span class="line">        <span class="type">size_t</span> startPos = ans.<span class="built_in">find</span>(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (startPos != string::npos) &#123;  <span class="comment">//能找到</span></span><br><span class="line">            <span class="keyword">return</span> ans.<span class="built_in">substr</span>(startPos);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;0&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><p>根据题干，由于<code>1 &lt;= a.length, b.length &lt;= 10^4</code>，因此a可能位数很长，需要很长的二进制数来存储，常规的<code>int x=stoi(a,0,2)</code>会导致溢出，因此这里使用1e4位的bitset来存储转换的a.a不需要转换为其他参数，string或者int等等都可以直接转换为bitset。一般来说，如果a仅仅是一个int型整数，那么只需要<code>bitset&lt;32&gt;</code>即可，因为int范围在$-2^{31}$ 到 $2^{31} - 1$，</p></li><li><p>while循环中应该使用y.any()而非y：在C++中，<code>std::bitset</code> 类型的对象不可以隐式地被转换为 <code>bool</code> 类型。如果 <code>y</code> 是一个 <code>std::bitset</code> 对象，<code>y</code> 会被用作一个条件表达式时，它无法隐式地转换为 <code>bool</code>。使用 <code>y.any()</code> 是一种更明确的方式来表达循环的终止条件，因为它直接检查 <code>std::bitset</code> <u>是否有任何</u>非零位，所有位均为0时为false退出循环。</p></li><li><p><code>(x&amp;y)&lt;&lt;1</code>:处理进位。</p><ol><li><p><code>x &amp; y</code>: 这是 <code>x</code> 和 <code>y</code> 的按位与运算。在二进制中，每一位上的结果是取两个数对应位上的逻辑与（AND）运算。例如，如果 <code>x</code> 的某一位是1，而 <code>y</code> 的相同位置也是1，那么结果的相应位就是1；否则为0。</p></li><li><p><code>(x &amp; y) &lt;&lt; 1</code>: 这是将上述按位与运算的结果左移一位。左移运算是将二进制数的每一位向左移动指定的位数，右侧空出的位补0。因此，<code>(x &amp; y) &lt;&lt; 1</code> 就是将 <code>(x &amp; y)</code> 的所有位都向左移动一位。</p></li></ol></li><li><p><code>x.to_string()</code>:x为bitset类型的对象。<code>x.to_string()</code> 是用于调用对象的成员函数，而 <code>to_string(x)</code> 是用于将基本数据类型(比如int)转换为字符串。</p></li><li><p><code>size_t startPos = ans.find(&#39;1&#39;)</code>:字符串中的find方法在找寻到第一个‘1’后，返回size_t类型的结果。如果没有找到，则返回<code>std::string::npos</code>。<code>size_t</code> 是一种无符号整数类型，通常用于表示对象的大小、索引或长度。它是通过包含头文件 <code>&lt;cstddef&gt;</code>（或 <code>&lt;stddef.h&gt;</code>，在C语言中）来引入的。</p><p>C++标准规定了 <code>size_t</code> 的属性，它被定义为一个足够大以容纳程序中可能的最大对象大小的无符号整数类型。因此，<code>size_t</code> 的大小在不同的平台和编译器中可能会有所不同，但通常足够大以满足实际需求。</p></li><li><p><code>ans.substr(startPos);</code>：substr方法可以只接受一个参数pos,表示这个子字符串时从pos这个位置开始一直到最后(这时候不用再特地说明长度length)</p></li><li><p><code>stoi(a,0,2)或者stoi(a,nullptr,2)</code>:将字符串a转换为2进制的数，并用int表达。比如a=”10101111”，则转换为int x=101011111。<code>0</code>或者<code>nullptr</code> 是用于存储转换错误位置的指针。如果转换过程中发生错误，<code>stoi</code> 函数会将错误的位置存储在这个指针指向的位置。在这里，<code>0</code>或者<code>nullptr</code>表示不存储错误位置。2表示基数，即转换为几进制。</p></li></ul><h2 id="8-3-字符串相加：415、字符串相乘：43"><a href="#8-3-字符串相加：415、字符串相乘：43" class="headerlink" title="8-3.字符串相加：415、字符串相乘：43"></a>8-3.字符串相加：415、字符串相乘：43</h2><p>类似8-2，使用模拟法</p><p>字符串相乘法二：优化竖式</p><p><img src="https://s2.loli.net/2024/01/29/vsTbwaM5f2H6Pum.png" alt=""></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">multiply</span><span class="params">(string num1, string num2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (num1 == <span class="string">&quot;0&quot;</span> || num2 == <span class="string">&quot;0&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;0&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> n = num1.<span class="built_in">length</span>() + num2.<span class="built_in">length</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">res</span><span class="params">(n)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = num1.<span class="built_in">length</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = num2.<span class="built_in">length</span>() - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">                <span class="type">int</span> sum = res[i + j + <span class="number">1</span>] + (num1[i] - <span class="string">&#x27;0&#x27;</span>) * (num2[j] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">                res[i + j + <span class="number">1</span>] = sum % <span class="number">10</span>;</span><br><span class="line">                res[i + j] += sum / <span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        string ans = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">0</span> &amp;&amp; res[i] == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>; <span class="comment">//去掉前置0</span></span><br><span class="line">            &#125;</span><br><span class="line">            ans += <span class="built_in">to_string</span>(res[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这里也可以先像前面的题一样反转字符串以后再从前往后算，之后再倒回来。</p><h2 id="8-4-累加数：306"><a href="#8-4-累加数：306" class="headerlink" title="8-4.累加数：306"></a>8-4.累加数：306</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h1 id="9-字符串变换"><a href="#9-字符串变换" class="headerlink" title="9.字符串变换"></a>9.字符串变换</h1><h2 id="9-1-Z字形变换：6"><a href="#9-1-Z字形变换：6" class="headerlink" title="9-1.Z字形变换：6"></a>9-1.Z字形变换：6</h2><p>法一：压缩矩阵存储</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">convert</span><span class="params">(string s, <span class="type">int</span> numRows)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = s.<span class="built_in">length</span>(), r = numRows;</span><br><span class="line">        <span class="keyword">if</span> (r == <span class="number">1</span> || r == n) &#123;</span><br><span class="line">            <span class="keyword">return</span> s;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">vector&lt;string&gt; <span class="title">mat</span><span class="params">(r)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, x = <span class="number">0</span>, t = r * <span class="number">2</span> - <span class="number">2</span>; i &lt; n; i++) &#123;</span><br><span class="line">            mat[x] += s[i];<span class="comment">//x记录行数</span></span><br><span class="line">            i % t &lt; r - <span class="number">1</span> ? ++x : --x;<span class="comment">//第i%t行读取结束就继续下一行</span></span><br><span class="line">        &#125;</span><br><span class="line">        string ans;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; row : mat) &#123;</span><br><span class="line">            ans += row;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>法二：直接构造</p><p>观察下标规律：</p><p><img src="https://s2.loli.net/2024/02/03/g97q4Kv86TSiy1b.png" alt=""></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">convert</span><span class="params">(string s, <span class="type">int</span> numRows)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = s.<span class="built_in">length</span>(), r = numRows;</span><br><span class="line">        <span class="keyword">if</span> (r == <span class="number">1</span> || r == n) &#123;</span><br><span class="line">            <span class="keyword">return</span> s;</span><br><span class="line">        &#125;</span><br><span class="line">        string ans;</span><br><span class="line">        <span class="type">int</span> t = r * <span class="number">2</span> - <span class="number">2</span>; <span class="comment">//使得s[t]是第二个竖直列的第一个元素</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; r; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j + i &lt; n; j += t) &#123; <span class="comment">//遍历第i行的元素</span></span><br><span class="line">                ans += s[j + i];</span><br><span class="line">                <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; i &lt; r - <span class="number">1</span> &amp;&amp; j + t - i &lt; n) &#123;</span><br><span class="line">                    ans += s[j + t - i];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="9-2-文本左右对齐：68"><a href="#9-2-文本左右对齐：68" class="headerlink" title="9-2.文本左右对齐：68"></a>9-2.文本左右对齐：68</h2><p>贪心算法+模拟</p><p>详见：<a href="https://leetcode.cn/problems/text-justification/solutions/181651/text-justification-by-ikaruga/">平均分布额外空格</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">fillWords</span><span class="params">(vector&lt;string&gt;&amp; words, <span class="type">int</span> bg, <span class="type">int</span> ed, <span class="type">int</span> maxWidth,</span></span></span><br><span class="line"><span class="params"><span class="function">                     <span class="type">bool</span> lastLine = <span class="literal">false</span>)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> wordCount = ed - bg + <span class="number">1</span>;<span class="comment">//end减去begin后再加1</span></span><br><span class="line">        <span class="type">int</span> spaceCount =</span><br><span class="line">            maxWidth + <span class="number">1</span> - wordCount; <span class="comment">// 除去每个单词尾部空格， + 1</span></span><br><span class="line">                                      <span class="comment">// 是最后一个单词的尾部空格的特殊处理</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = bg; i &lt;= ed; i++) &#123;</span><br><span class="line">            spaceCount -= words[i].<span class="built_in">size</span>(); <span class="comment">// 除去所有单词的长度</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> spaceSuffix = <span class="number">1</span>; <span class="comment">// 词尾空格</span></span><br><span class="line">        <span class="type">int</span> spaceAvg = (wordCount == <span class="number">1</span>)</span><br><span class="line">                           ? <span class="number">1</span></span><br><span class="line">                           : spaceCount / (wordCount - <span class="number">1</span>); <span class="comment">// 额外空格的平均值</span></span><br><span class="line">        <span class="type">int</span> spaceExtra = (wordCount == <span class="number">1</span>)</span><br><span class="line">                             ? <span class="number">0</span></span><br><span class="line">                             : spaceCount % (wordCount - <span class="number">1</span>); <span class="comment">// 额外空格的余数</span></span><br><span class="line">        string ans;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = bg; i &lt; ed; i++) &#123;</span><br><span class="line">            ans += words[i]; <span class="comment">// 填入单词</span></span><br><span class="line">            <span class="keyword">if</span> (lastLine) &#123;  <span class="comment">// 特殊处理最后一行</span></span><br><span class="line">                <span class="built_in">fill_n</span>(<span class="built_in">back_inserter</span>(ans), <span class="number">1</span>, <span class="string">&#x27; &#x27;</span>);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">fill_n</span>(<span class="built_in">back_inserter</span>(ans),</span><br><span class="line">                   spaceSuffix + spaceAvg + ((i - bg) &lt; spaceExtra),</span><br><span class="line">                   <span class="string">&#x27; &#x27;</span>); <span class="comment">// 根据计算结果补上空格</span></span><br><span class="line">        &#125;</span><br><span class="line">        ans += words[ed]; <span class="comment">// 填入最后一个单词</span></span><br><span class="line">        <span class="built_in">fill_n</span>(<span class="built_in">back_inserter</span>(ans), maxWidth - ans.<span class="built_in">size</span>(), <span class="string">&#x27; &#x27;</span>);</span><br><span class="line">        <span class="comment">// 补上这一行最后的空格</span></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">fullJustify</span><span class="params">(vector&lt;string&gt;&amp; words, <span class="type">int</span> maxWidth)</span> </span>&#123;</span><br><span class="line">        vector&lt;string&gt; ans;</span><br><span class="line">        <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> bg = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; words.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            cnt += words[i].<span class="built_in">size</span>() + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (i + <span class="number">1</span> == words.<span class="built_in">size</span>() ||</span><br><span class="line">                cnt + words[i + <span class="number">1</span>].<span class="built_in">size</span>() &gt;</span><br><span class="line">                    maxWidth) &#123; <span class="comment">// 如果是最后一个单词，或者加上下一个词就超过长度了，即可凑成一行</span></span><br><span class="line">                ans.<span class="built_in">push_back</span>(</span><br><span class="line">                    <span class="built_in">fillWords</span>(words, bg, i, maxWidth, i + <span class="number">1</span> == words.<span class="built_in">size</span>()));</span><br><span class="line">                bg = i + <span class="number">1</span>;</span><br><span class="line">                cnt = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="10-字符串匹配-难度较高"><a href="#10-字符串匹配-难度较高" class="headerlink" title="10.字符串匹配(难度较高)"></a>10.字符串匹配(难度较高)</h1><h2 id="10-1-找出字符串中第一个匹配项的下标-28"><a href="#10-1-找出字符串中第一个匹配项的下标-28" class="headerlink" title="10-1.找出字符串中第一个匹配项的下标:28"></a>10-1.找出字符串中第一个匹配项的下标:28</h2><p>法一：暴力匹配</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">strStr</span><span class="params">(string haystack, string needle)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = haystack.<span class="built_in">size</span>(), m = needle.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i + m &lt;= n; i++) &#123;</span><br><span class="line">            <span class="type">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (haystack[i + j] != needle[j]) &#123;</span><br><span class="line">                    flag = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>使用substr与之同理：</p><p><code>substr()</code>的时间复杂度为$O(n)$,空间复杂度是$O(1)$.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">strStr</span><span class="params">(string haystack, string needle)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; haystack.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (haystack[i] == needle[<span class="number">0</span>]) &#123; <span class="comment">//第一个字符是否相等再决定是不是要尝试匹配整个字符串</span></span><br><span class="line">                string x = haystack.<span class="built_in">substr</span>(i, needle.<span class="built_in">size</span>());</span><br><span class="line">                <span class="keyword">if</span> (x == needle) &#123;</span><br><span class="line">                    <span class="keyword">return</span> i;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>法二：KMP算法</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">strStr</span><span class="params">(string haystack, string needle)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = haystack.<span class="built_in">size</span>(), m = needle.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span> (m == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">next</span><span class="params">(m)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, j = <span class="number">0</span>; i &lt; m; i++) &#123; <span class="comment">//计算出next数组</span></span><br><span class="line">            <span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; needle[i] != needle[j]) &#123;</span><br><span class="line">                j = next[j - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (needle[i] == needle[j]) &#123;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            next[i] = j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; n; i++) &#123; <span class="comment">//根据next数组进行匹配</span></span><br><span class="line">            <span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; haystack[i] != needle[j]) &#123;</span><br><span class="line">                j = next[j - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (haystack[i] == needle[j]) &#123;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (j == m) &#123;</span><br><span class="line">                <span class="keyword">return</span> i - m + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="关于KMP"><a href="#关于KMP" class="headerlink" title="关于KMP"></a>关于KMP</h2><p><img src="https://s2.loli.net/2024/02/03/SAhEnMkz5LfJD1W.png" alt=""></p><p><img src="https://s2.loli.net/2024/02/03/B6Z1blgJqCnyRpv.png" title="" alt="" width="473"></p><h2 id="常见字符串匹配算法"><a href="#常见字符串匹配算法" class="headerlink" title="常见字符串匹配算法"></a>常见字符串匹配算法</h2><p>讲解：<a href="https://zhuanlan.zhihu.com/p/159879354">字符串匹配之Sunday、KMP和BM算法入门级讲解</a></p><ol><li><p><strong>暴力匹配算法（Brute Force）</strong>：也称为朴素字符串匹配算法，它通过逐个比较文本和模式串的字符来进行匹配。</p></li><li><p><strong>KMP算法</strong>：KMP算法利用模式串自身的特点，通过构建部分匹配表（next数组）来实现快速匹配。</p></li><li><p><strong>Boyer-Moore算法</strong>：该算法通过从右往左比较模式串和文本串，利用坏字符规则和好后缀规则来快速定位匹配位置。</p></li><li><p><strong>Rabin-Karp算法</strong>：Rabin-Karp算法利用哈希函数来快速比较文本中的子串和模式串，以确定是否需要进行进一步的精确比较（首先是计算两个字符串的哈希值，然后通过比较这两个哈希值的大小来判断是否出现匹配）。</p></li><li><p><strong>Sunday算法</strong>：Sunday算法是一种简单而高效的字符串匹配算法，它利用预处理模式串得到的偏移表，以便在匹配失败时快速移动模式串。</p></li></ol><hr><h2 id="10-2-重复叠加字符串匹配：686"><a href="#10-2-重复叠加字符串匹配：686" class="headerlink" title="10-2.重复叠加字符串匹配：686"></a>10-2.重复叠加字符串匹配：686</h2><p>法一：KMP.</p><p>时间复杂度：$O(n+m)$，空间复杂度：$O(m)$。</p><p>该题代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">strStr</span><span class="params">(string haystack, string needle)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = haystack.<span class="built_in">size</span>(), m = needle.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span> (m == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">next</span><span class="params">(m)</span></span>;</span><br><span class="line">        <span class="comment">// 计算出next数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, j = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; needle[i] != needle[j]) &#123;</span><br><span class="line">                j = next[j - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (needle[i] == needle[j]) &#123;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            next[i] = j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 根据next数值进行匹配</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i - j &lt; n; i++) &#123; <span class="comment">// b 开始匹配的位置是否超过第一个叠加的 a</span></span><br><span class="line">            <span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; haystack[i % n] != needle[j]) &#123; <span class="comment">//i%n,因为可能是多个haystack重复</span></span><br><span class="line">                j = next[j - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (haystack[i % n] == needle[j]) &#123;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (j == m) &#123;</span><br><span class="line">                <span class="keyword">return</span> i - m + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">repeatedStringMatch</span><span class="params">(string a, string b)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> an = a.<span class="built_in">size</span>(), bn = b.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> index = <span class="built_in">strStr</span>(a, b);</span><br><span class="line">        <span class="keyword">if</span> (index == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (an - index &gt;= bn) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (bn + index - an - <span class="number">1</span>) / an + <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>法二：Rabin-Karp算法</p><p>时间复杂度：O(n+m)，空间复杂度：O(1)。</p><p>关于Rabin-Karp的讲解:<a href="https://zhuanlan.zhihu.com/p/563551141?utm_id=0">Rabin–Karp 算法</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> BASE 256</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MODULUS 101</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">RabinKarp</span><span class="params">(<span class="type">char</span> t[], <span class="type">char</span> p[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> t_len = <span class="built_in">strlen</span>(t);</span><br><span class="line">    <span class="type">int</span> p_len = <span class="built_in">strlen</span>(p);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 哈希滚动之用</span></span><br><span class="line">    <span class="type">int</span> h = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; p_len - <span class="number">1</span>; i++)</span><br><span class="line">        h = (h * BASE) % MODULUS;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> t_hash = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> p_hash = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; p_len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        t_hash = (BASE * t_hash + t[i]) % MODULUS;</span><br><span class="line">        p_hash = (BASE * p_hash + p[i]) % MODULUS;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= t_len - p_len)</span><br><span class="line">    &#123;</span><br><span class="line">         <span class="comment">// 考虑到哈希碰撞的可能性，还需要用 memcmp 再比对一下</span></span><br><span class="line">        <span class="keyword">if</span> (t_hash == p_hash &amp;&amp; <span class="built_in">memcmp</span>(p, t + i, p_len) == <span class="number">0</span>)</span><br><span class="line">            cout &lt;&lt; p &lt;&lt; <span class="string">&quot; is found at index &quot;</span> &lt;&lt; i &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 哈希滚动</span></span><br><span class="line">        t_hash = (BASE * (t_hash - t[i] * h) + t[i + p_len]) % MODULUS;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 防止出现负数</span></span><br><span class="line">        <span class="keyword">if</span> (t_hash &lt; <span class="number">0</span>)</span><br><span class="line">            t_hash = t_hash + MODULUS;</span><br><span class="line"></span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="C:\Users\huangjiakun\Pictures\Marktext全局图片\09710814ec32b4e67959fb730df10269ff888601.png" alt=""></p><p>该题代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">strStr</span><span class="params">(string haystack, string needle)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = haystack.<span class="built_in">size</span>(), m = needle.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span> (m == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> k1 = <span class="number">1e9</span> + <span class="number">7</span>;  <span class="comment">// 选择一个较大的质数作为模数</span></span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> k2 = <span class="number">1337</span>;  <span class="comment">// 另选一个较小的质数</span></span><br><span class="line">        <span class="built_in">srand</span>((<span class="type">unsigned</span>)<span class="built_in">time</span>(<span class="literal">NULL</span>));  <span class="comment">// 初始化随机数种子</span></span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> kMod1 = <span class="built_in">rand</span>() % k1 + k1;  <span class="comment">// 生成一个随机数作为模数</span></span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> kMod2 = <span class="built_in">rand</span>() % k2 + k2;  <span class="comment">// 生成另一个随机数作为模数</span></span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> hash_needle = <span class="number">0</span>;  <span class="comment">// 初始化模式串的哈希值</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> c : needle) &#123;</span><br><span class="line">            hash_needle = (hash_needle * kMod2 + c) % kMod1;  <span class="comment">// 计算模式串的哈希值</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> hash_haystack = <span class="number">0</span>, extra = <span class="number">1</span>;  <span class="comment">// 初始化文本串的哈希值和额外变量</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            hash_haystack = (hash_haystack * kMod2 + haystack[i % n]) % kMod1;  <span class="comment">// 计算文本串的哈希值</span></span><br><span class="line">            extra = (extra * kMod2) % kMod1;  <span class="comment">// 更新额外变量</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = m - <span class="number">1</span>; (i - m + <span class="number">1</span>) &lt; n; i++) &#123;</span><br><span class="line">            hash_haystack = (hash_haystack * kMod2 + haystack[i % n]) % kMod1;  <span class="comment">// 更新文本串的哈希值</span></span><br><span class="line">            <span class="keyword">if</span> (hash_haystack == hash_needle) &#123;  <span class="comment">// 检查哈希值是否匹配</span></span><br><span class="line">                <span class="keyword">return</span> i - m + <span class="number">1</span>;  <span class="comment">// 返回匹配位置</span></span><br><span class="line">            &#125;</span><br><span class="line">            hash_haystack = (hash_haystack - extra * haystack[(i - m + <span class="number">1</span>) % n]) % kMod1;  <span class="comment">// 更新文本串的哈希值</span></span><br><span class="line">            hash_haystack = (hash_haystack + kMod1) % kMod1;  <span class="comment">// 处理负数情况</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;  <span class="comment">// 未找到匹配，返回-1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">repeatedStringMatch</span><span class="params">(string a, string b)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> an = a.<span class="built_in">size</span>(), bn = b.<span class="built_in">size</span>();  <span class="comment">// 获取字符串a和b的长度</span></span><br><span class="line">        <span class="type">int</span> index = <span class="built_in">strStr</span>(a, b);  <span class="comment">// 调用strStr函数查找b在a中的匹配位置</span></span><br><span class="line">        <span class="keyword">if</span> (index == <span class="number">-1</span>) &#123;  <span class="comment">// 如果未找到匹配位置</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;  <span class="comment">// 返回-1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (an - index &gt;= bn) &#123;  <span class="comment">// 如果匹配位置之后的长度大于等于b的长度</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;  <span class="comment">// 返回1，表示a本身就包含了至少一个b</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (bn + index - an - <span class="number">1</span>) / an + <span class="number">2</span>;  <span class="comment">// 返回重复拼接a后能够包含b的最小次数</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="10-3-重复的子字符串：459"><a href="#10-3-重复的子字符串：459" class="headerlink" title="10-3.重复的子字符串：459"></a>10-3.重复的子字符串：459</h2><h2 id="10-4-最短回文串：214（困难）"><a href="#10-4-最短回文串：214（困难）" class="headerlink" title="10-4.最短回文串：214（困难）"></a>10-4.最短回文串：214（困难）</h2><h1 id="11-中心拓展法"><a href="#11-中心拓展法" class="headerlink" title="11.中心拓展法"></a>11.中心拓展法</h1><p>中心拓展法的基本思想是以字符串中的每个字符（或者每两个字符之间）为中心，向两边扩展，以<u>寻找最长的回文串</u>。这种方法的时间复杂度较低，因为在中心拓展时，只需要线性的时间。</p><p>具体步骤如下：</p><ol><li>遍历字符串，以每个字符（或者每两个字符之间）为中心，向两边扩展，直到不再满足回文串的条件。</li><li>在扩展的过程中，记录下最长的回文串的起始位置和长度。</li></ol><p>中心拓展法在解决回文串相关问题时非常有效，例如在寻找最长回文子串或者统计回文子串的个数时，该方法可以提供较高的效率。</p><h2 id="11-1-最长回文子串：5"><a href="#11-1-最长回文子串：5" class="headerlink" title="11-1.最长回文子串：5"></a>11-1.最长回文子串：5</h2><p>法一：动态规划</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">longestPalindrome</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span> (n &lt; <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> s;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> maxLen = <span class="number">1</span>, begin = <span class="number">0</span>;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(n, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n));</span><br><span class="line">        <span class="comment">// 边界条件P(i,i)=true</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            dp[i][i] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 枚举子串长度L</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> L = <span class="number">2</span>; L &lt;= n; L++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">                <span class="type">int</span> j = L + i - <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (j &gt;= n) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (s[i] != s[j]) &#123;</span><br><span class="line">                    dp[i][j] = <span class="literal">false</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (j - i &lt; <span class="number">3</span>) &#123; <span class="comment">//(j-1)-(i+1)&lt;=0</span></span><br><span class="line">                        dp[i][j] = <span class="literal">true</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        dp[i][j] = dp[i + <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 只要 dp[i][j] == true 成立，就表示子串 s[i..j]</span></span><br><span class="line">                <span class="comment">// 是回文，此时记录回文长度和起始位置</span></span><br><span class="line">                <span class="keyword">if</span> (dp[i][j]) &#123;</span><br><span class="line">                    maxLen = <span class="built_in">max</span>(maxLen, j - i + <span class="number">1</span>);</span><br><span class="line">                    begin = i;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s.<span class="built_in">substr</span>(begin, maxLen);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>法二：中心扩展法</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; <span class="title">expandAroundCenter</span><span class="params">(<span class="type">const</span> string&amp; s, <span class="type">int</span> left, <span class="type">int</span> right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (left &gt;= <span class="number">0</span> &amp;&amp; right &lt; s.<span class="built_in">size</span>() &amp;&amp; s[left] == s[right]) &#123;</span><br><span class="line">            <span class="comment">// 满足回文条件，向两边扩展</span></span><br><span class="line">            --left;</span><br><span class="line">            ++right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123;left + <span class="number">1</span>, right - <span class="number">1</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">string <span class="title">longestPalindrome</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> start = <span class="number">0</span>, end = <span class="number">0</span>; <span class="comment">// 从最左侧边界开始</span></span><br><span class="line">        <span class="comment">// 如果从最右侧边界，则start和end初始值应为s.size;同时auto [left2,right2]=expandAroundCenter(s,i-1,i);</span></span><br><span class="line">        <span class="comment">// 然后i从s.size()-1反向遍历nter(s,i-1,i);</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">auto</span> [left1, right1] = <span class="built_in">expandAroundCenter</span>(s, i, i);     <span class="comment">// a&#x27;b&#x27;a</span></span><br><span class="line">            <span class="keyword">auto</span> [left2, right2] = <span class="built_in">expandAroundCenter</span>(s, i, i + <span class="number">1</span>); <span class="comment">// a&#x27;bb&#x27;a</span></span><br><span class="line">            <span class="keyword">if</span> (right1 - left1 &gt; end - start) &#123;</span><br><span class="line">                start = left1;</span><br><span class="line">                end = right1;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (right2 - left2 &gt; end - start) &#123;</span><br><span class="line">                start = left2;</span><br><span class="line">                end = right2;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s.<span class="built_in">substr</span>(start, end - start + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>法三：Manacher算法(了解)</p><h2 id="11-2-统计回文子串数目：647"><a href="#11-2-统计回文子串数目：647" class="headerlink" title="11-2.统计回文子串数目：647"></a>11-2.统计回文子串数目：647</h2><p>三个方法类似11-1，这里展示中心扩展法代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">expandAroundCenter</span><span class="params">(<span class="type">const</span> string&amp; s, <span class="type">int</span> left, <span class="type">int</span> right)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &gt;= <span class="number">0</span> &amp;&amp; right &lt; s.<span class="built_in">size</span>() &amp;&amp; s[left] == s[right]) &#123;</span><br><span class="line">            --left;</span><br><span class="line">            ++right;</span><br><span class="line">            ++ans;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">countSubstrings</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>, right = <span class="number">0</span>, ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            ans +=<span class="built_in">expandAroundCenter</span>(s, i, i) + <span class="built_in">expandAroundCenter</span>(s, i, i + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> leetcode刷题笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> leetcode </tag>
            
            <tag> string </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2.1字符串篇(2)</title>
      <link href="/posts/283bba67.html"/>
      <url>/posts/283bba67.html</url>
      
        <content type="html"><![CDATA[<h1 id="6-数字与字符串之间转换"><a href="#6-数字与字符串之间转换" class="headerlink" title="6.数字与字符串之间转换"></a>6.数字与字符串之间转换</h1><p>299:使用额外两个数组记录Bulls,cows</p><h2 id="6-1-相对名次：506"><a href="#6-1-相对名次：506" class="headerlink" title="6-1.相对名次：506"></a>6-1.相对名次：506</h2><p><code>make_pair(a,b)</code>:形成诸如<code>pair&lt;int,int&gt;</code>的形式</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">findRelativeRanks</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; score)</span> </span>&#123;</span><br><span class="line">        vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; arr;</span><br><span class="line">        <span class="type">int</span> n = score.<span class="built_in">size</span>();</span><br><span class="line">        string rankTop[<span class="number">3</span>] = &#123;<span class="string">&quot;Gold Medal&quot;</span>, <span class="string">&quot;Silver Medal&quot;</span>, <span class="string">&quot;Bronze Medal&quot;</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            arr.<span class="built_in">emplace_back</span>(</span><br><span class="line">                <span class="built_in">make_pair</span>(-score[i], i)); <span class="comment">//-score[i]以保证sort排序时由大到小</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sort</span>(arr.<span class="built_in">begin</span>(), arr.<span class="built_in">end</span>());<span class="comment">//根据arr[index].first的大小排序</span></span><br><span class="line">        <span class="function">vector&lt;string&gt; <span class="title">res</span><span class="params">(n)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &lt; <span class="number">3</span>) &#123;</span><br><span class="line">                res[arr[i].second] = rankTop[i];<span class="comment">//arr[i].second记录原下标</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                res[arr[i].second] = <span class="built_in">to_string</span>(i + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在C++中，<code>arr</code>可以是任何<u>支持随机访问迭代器的容器</u>类型，例如：</p><ul><li><code>std::vector</code></li><li><code>std::array</code></li><li><code>std::deque</code></li><li><code>std::string</code></li><li>内置数组（例如<code>int arr[5]</code>）</li></ul><p>这些类型都支持<code>begin()</code>和<code>end()</code>成员函数，因此可以作为<code>sort</code>函数的参数。</p><hr><p><code>vector</code>中每个元素都是<code>pair</code>类型时，也可以使用<code>sort</code>函数。因为<code>vector&lt;pair&lt;T1, T2&gt;&gt;</code>支持随机访问迭代器，所以可以直接作为<code>sort</code>函数的参数,排序默认是按照<code>pair</code>的<mark>第一个</mark>元素进行比较的。如果第一个元素相等，则会比较第二个元素。</p><hr><p>法二：使用map(不是unordered_map),它能够实现自主排序</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">findRelativeRanks</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; score)</span> </span>&#123;</span><br><span class="line">        map&lt;<span class="type">int</span>, <span class="type">int</span>, greater&lt;<span class="type">int</span>&gt;&gt; mp; <span class="comment">//由大到小,看第一个int</span></span><br><span class="line">        <span class="type">int</span> n = score.<span class="built_in">size</span>();</span><br><span class="line">        string rankTop[<span class="number">3</span>] = &#123;<span class="string">&quot;Gold Medal&quot;</span>, <span class="string">&quot;Silver Medal&quot;</span>, <span class="string">&quot;Bronze Medal&quot;</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            mp[score[i]] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">vector&lt;string&gt; <span class="title">res</span><span class="params">(n)</span></span>;</span><br><span class="line">        <span class="keyword">auto</span> it = mp.<span class="built_in">begin</span>(); <span class="comment">// it是迭代器</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &lt; <span class="number">3</span>) &#123;</span><br><span class="line">                res[(*it).second] = rankTop[i];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                res[(*it).second] = <span class="built_in">to_string</span>(i + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            it++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>法三：使用set,方法与使用map类似</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">findRelativeRanks</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; score)</span> </span>&#123;</span><br><span class="line">        set&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;, greater&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt;&gt; s; <span class="comment">//由大到小</span></span><br><span class="line">        <span class="type">int</span> n = score.<span class="built_in">size</span>();</span><br><span class="line">        string rankTop[<span class="number">3</span>] = &#123;<span class="string">&quot;Gold Medal&quot;</span>, <span class="string">&quot;Silver Medal&quot;</span>, <span class="string">&quot;Bronze Medal&quot;</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            s.<span class="built_in">emplace</span>(score[i], i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">vector&lt;string&gt; <span class="title">res</span><span class="params">(n)</span></span>;</span><br><span class="line">        <span class="keyword">auto</span> it = s.<span class="built_in">begin</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &lt; <span class="number">3</span>) &#123;</span><br><span class="line">                res[(*it).second] = rankTop[i];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                res[(*it).second] = <span class="built_in">to_string</span>(i + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            it++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>值得注意的是:1.set<mark>不存在</mark>类似s[i]的表示形式</p><p>2.向set中加入元素应该使用<code>emplace</code>而非empalce_back</p><p>3.元素形式为pair时，定义应该为<code>set&lt;pair&lt;int, int&gt;, greater&lt;pair&lt;int, int&gt;&gt;&gt; s</code>，这里的排序写法不是greater<int>!<code>greater&lt;int&gt;</code>表示<mark>按照键值</mark>进行降序排序，只有map、vector这种元素对应键值才是固定的，set则随时改变元素的位置，在元素为int类型时greater<int>没有问题，但在pair<int,int>类型时，会出错。</p><p>在这种情况下，我们需要使用<code>greater&lt;pair&lt;int, int&gt;&gt;</code>而不是<code>greater&lt;int&gt;</code>，因为我们想要按照分数降序排列，并且在分数相同时，按照索引升序排列。使用<code>greater&lt;pair&lt;int, int&gt;&gt;</code>可以确保首先按照分数降序排列，然后按照索引升序排列。 </p><hr><p>鸽巢原理：539法二。由鸽巢原理可知，如果 timePoints 的长度超过 1440，那么必然会有两个相同的时间，此时可以直接返回 0.</p><h2 id="6-2-正则表达式：537"><a href="#6-2-正则表达式：537" class="headerlink" title="6-2.正则表达式：537"></a>6-2.正则表达式：537</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">string <span class="title">complexNumberMultiply</span><span class="params">(string num1, string num2)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 定义正则表达式，用于匹配&quot;+&quot;和&quot;i&quot;</span></span><br><span class="line">    <span class="function">regex <span class="title">re</span><span class="params">(<span class="string">&quot;\\+|i&quot;</span>)</span></span>; </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用正则表达式对复数字符串进行分割，存储到vector中</span></span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">complex1</span><span class="params">(sregex_token_iterator(num1.begin(), num1.end(), re, <span class="number">-1</span>), std::sregex_token_iterator())</span></span>;</span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">complex2</span><span class="params">(sregex_token_iterator(num2.begin(), num2.end(), re, <span class="number">-1</span>), std::sregex_token_iterator())</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将分割后的字符串转换为整数部分和虚数部分</span></span><br><span class="line">    <span class="type">int</span> real1 = <span class="built_in">stoi</span>(complex1[<span class="number">0</span>]);</span><br><span class="line">    <span class="type">int</span> imag1 = <span class="built_in">stoi</span>(complex1[<span class="number">1</span>]);</span><br><span class="line">    <span class="type">int</span> real2 = <span class="built_in">stoi</span>(complex2[<span class="number">0</span>]);</span><br><span class="line">    <span class="type">int</span> imag2 = <span class="built_in">stoi</span>(complex2[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算两个复数的乘积</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">to_string</span>(real1 * real2 - imag1 * imag2) + <span class="string">&quot;+&quot;</span> + <span class="built_in">to_string</span>(real1 * imag2 + imag1 * real2) + <span class="string">&quot;i&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="关于正则"><a href="#关于正则" class="headerlink" title="关于正则"></a>关于正则</h2><p>1.<strong>regex</strong>:<code>regex</code>是C++标准库中用于处理正则表达式的类。它允许你使用正则表达式来进行字符串的匹配、搜索和替换操作。通过使用<code>regex</code>类，你可以在C++中执行与正则表达式相关的操作，例如查找模式匹配、提取部分字符串、替换文本等。需要头文件<code>&lt;regex&gt;</code></p><p>2.<strong>sregex_token_iterator</strong>:<code>sregex_token_iterator</code>是C++标准库中用于在字符串上执行正则表达式分词操作的迭代器。它允许你在字符串中使用正则表达式来进行分词，从而将字符串分割为符合特定模式的子字符串。在上面的代码中，<code>sregex_token_iterator</code>来将复数字符串根据正则表达式分割为整数部分和虚数部分。</p><p><mark>语法</mark>：sregex_token_iterator(起始位置，终止位置，正则, 返回的匹配类型（-1是返回未匹配的部分，即分隔操作）)。</p><p>会返回一个迭代器的首地址，<code>std::sregex_token_iterator()</code>会返回一个end。vector用这两个迭代器构造得到符合匹配的序列</p><p>3.<strong>正则匹配</strong>：<a href="https://www.cnblogs.com/yongchao/p/17165643.html">正则表达式-菜鸟教程 - Theseus‘Ship - 博客园</a></p><p><a href="https://www.cnblogs.com/chen-cs/p/13387914.html">C++ 正则表达式 - Chen沉尘 - 博客园</a></p><p><a href="https://blog.51cto.com/u_12071646/3752288">[笔记]c++基础实践《二》regex正则表达式_51CTO博客_c++ 正则表达式</a></p><p>4.<code>&quot;\\+|i&quot;</code> 这个正则表达式中，<code>\\+</code> 匹配加号 “+”，<code>|</code> 表示或，<code>i</code> 匹配字符 “i”。因此，这个正则表达式可以用于匹配复数字符串中的加号和虚数单位 “i”。</p><p>  <code>&quot;(-?\\d+)/(\\d+)([+-])(-?\\d+)/(\\d+)&quot;</code>表示两个分数相加。</p><ul><li><code>-?</code>：表示匹配一个可选的减号（负号）。<code>-</code> 表示减号，<code>?</code> 表示前面的字符（这里是减号）在文本中可以出现 0 次或 1 次。</li><li><code>\\d+</code>：表示匹配一个或多个数字。<code>\\d</code> 表示一个数字，<code>+</code> 表示前面的元素（这里是数字）可以出现一次或多次。(<code>\\.</code>用来表示小数点)</li><li><code>[+-]</code> 是一个正则表达式模式，用于匹配加号(+)或减号(-)。在正则表达式中，方括号 <code>[]</code> 用于表示一个字符集，其中列出的字符之一都可以匹配成功。因此，<code>[+-]</code> 表示匹配一个加号或减号。</li></ul><p>5.<strong>smatch</strong>:<code>smatch</code> 是 C++ 标准库中的一种数据结构，用于存储正则表达式匹配的结果。它是 <code>std::match_results</code> 类型的别名，用于保存正则表达式匹配的结果和子匹配的位置信息。当使用正则表达式进行匹配时，匹配结果会被存储在 <code>smatch</code> 对象中，可以通过索引或迭代器来访问匹配的子字符串。在T592中，使用 <code>smatch</code> 对象来存储正则表达式匹配的结果，并从中提取分数的分子、分母以及操作符等信息。</p><p>  <code>matches[5].str()</code> 表示从 <code>smatch</code> 对象中获取第 5 个匹配的子字符串，并将其作为 <code>std::string</code> 类型返回。在这种情况下，<code>matches[5]</code> 用于访问正则表达式匹配中的第 5 个捕获组，即第 5 个括号内匹配的内容。在T592中，<code>matches[5].str()</code> 用于获取第 5 个捕获组的字符串表示形式<code>(\\d+)</code>，这个捕获组对应于分数的分母。</p><p>  <code>matches.prefix().str()</code> 表示从 <code>smatch</code> 对象中获取<mark>匹配的子字符串之前</mark>的部分，并将其作为 <code>std::string</code> 类型返回。在这种情况下，<code>matches.prefix()</code> 用于获取匹配子字符串之前的部分，然后通过 <code>str()</code> 方法将其转换为字符串表示形式。</p><p>  <code>matches.suffix().str()</code>则表示之后的那部分。</p><p>6.<strong>用括号将正则表达式分成多组</strong></p><p>在正则表达式中使用括号可以将匹配的部分分组，这样做有几个好处：</p><ul><li><p><strong>提取子匹配</strong>：括号可以将匹配的部分分成多个组，这样可以方便地从整个匹配中提取出我们感兴趣的部分。在这个例子中，括号将分数的分子、分母以及操作符分成了多个组，方便后续的处理。</p></li><li><p><strong>方便后续处理</strong>：分组可以让我们更方便地对匹配到的内容进行后续处理，比如在这个例子中，可以方便地提取出分数的分子和分母，然后进行加减法运算。</p></li><li><p><strong>捕获匹配信息</strong>：分组可以捕获匹配的信息，方便后续的引用。在这个例子中，我们可以使用 <code>matches[1]</code>、<code>matches[2]</code>、<code>matches[3]</code> 等来引用不同的匹配组。</p></li></ul><p>因此，使用括号将正则表达式的部分分成多个组可以使代码更清晰、更易于理解，并且方便后续的处理和提取。</p><p>7.<strong>regex_search</strong>:<code>regex_search(expression, matches, pattern)</code>用于在字符串 <code>expression</code> 中搜索满足正则表达式模式 <code>pattern</code> 的部分，并将匹配的结果存储在 <code>matches</code> 对象中，以便后续的处理和提取。</p><p>8.<strong>regex_match</strong>:<code>regex_match(string code, regex pattern)</code>用于检查字符串是否与给定的正则表达式模式匹配。在这种情况下，它会尝试使用给定的正则表达式模式pattern来匹配输入的代码字符串code，并返回bool值。</p><p>9.<strong>相关学习网站</strong>：<a href="https://r2coding.com/#/?id=正则表达式">Road 2 Coding</a></p><p>正则表达式测试网站：<a href="https://regex101.com/">regex101</a></p><blockquote><p>在对性能敏感的程序中尽量避免使用正则表达式，尽量使用更加高效、更加简单的字符串匹配方案来提高程序性能。在C++中，正则表达式使用<u>ECMAScript语法</u>作为默认语法。这意味着它使用类似于JavaScript和Python的正则表达式语法。但C++的正则表达式与其他语言的正则表达式相比，<u>缺少了独占模式</u>，只有贪婪模式和非贪婪模式(懒惰模式)，这使得匹配所消耗的时间更长。</p><p>ECMAScript语法：<a href="https://zhuanlan.zhihu.com/p/634341574">Modern C++ 学习笔记——正则表达式</a></p><p><a href="https://zhuanlan.zhihu.com/p/38278481/">藏在正则表达式中的陷阱—知乎</a></p><p><a href="https://www.cnblogs.com/lixuwu/p/16201714.html">正则表达式引起的性能下降—博客园</a></p></blockquote><hr><h2 id="正则规则汇总"><a href="#正则规则汇总" class="headerlink" title="正则规则汇总"></a>正则规则汇总</h2><hr><h2 id="6-3-分数加减运算：592"><a href="#6-3-分数加减运算：592" class="headerlink" title="6-3.分数加减运算：592"></a>6-3.分数加减运算：592</h2><p>法一：模拟，遍历整个字符串</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">fractionAddition</span><span class="params">(string expression)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = expression.<span class="built_in">size</span>(), index = <span class="number">0</span>;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> x = <span class="number">0</span>, y = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (index &lt; n) &#123;</span><br><span class="line">            <span class="comment">//分子</span></span><br><span class="line">            <span class="type">long</span> <span class="type">long</span> x1 = <span class="number">0</span>, sign = <span class="number">1</span>; <span class="comment">// x1记录当前数字,sign记录正负号</span></span><br><span class="line">            <span class="keyword">if</span> (expression[index] == <span class="string">&#x27;-&#x27;</span> || expression[index] == <span class="string">&#x27;+&#x27;</span>) &#123;</span><br><span class="line">                sign = expression[index] == <span class="string">&#x27;-&#x27;</span> ? <span class="number">-1</span> : <span class="number">1</span>;</span><br><span class="line">                index++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (index &lt; n &amp;&amp; <span class="built_in">isdigit</span>(expression[index])) &#123; <span class="comment">// index&lt;n别忘了</span></span><br><span class="line">                x1 = x1 * <span class="number">10</span> + expression[index] - <span class="string">&#x27;0&#x27;</span>;       <span class="comment">//更新x1</span></span><br><span class="line">                index++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//遇到“/”</span></span><br><span class="line">            x1 *= sign; <span class="comment">//最后把符号带上</span></span><br><span class="line">            index++;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//分母.再次遇到+/-时则结束</span></span><br><span class="line">            <span class="type">long</span> <span class="type">long</span> y1 = <span class="number">0</span>; <span class="comment">//分母不可能有符号，所以无需sign</span></span><br><span class="line">            <span class="keyword">while</span> (index &lt; n &amp;&amp; <span class="built_in">isdigit</span>(expression[index])) &#123;</span><br><span class="line">                y1 = y1 * <span class="number">10</span> + expression[index] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                index++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//更新当前数字(再次遇到“+/-”时),x/y+=x1/y1</span></span><br><span class="line">            x = x * y1 + x1 * y;</span><br><span class="line">            y *= y1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;0/1&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> g = <span class="built_in">gcd</span>(<span class="built_in">abs</span>(x), y); <span class="comment">//获取最大公约数，用来化简分数</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">to_string</span>(x / g) + <span class="string">&quot;/&quot;</span> + <span class="built_in">to_string</span>(y / g);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>法二：正则匹配,该解法的时间复杂度为$ O(n^2)$，空间复杂度为 $O(1)$,但法一时间复杂度仅为$O(n+log⁡C)$。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;regex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">performOperation</span><span class="params">(<span class="type">int</span> num1, <span class="type">int</span> den1, <span class="type">int</span> num2, <span class="type">int</span> den2, <span class="type">char</span> op)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> numerator, denominator;</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="string">&#x27;+&#x27;</span>) &#123;</span><br><span class="line">            numerator = num1 * den2 + num2 * den1;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            numerator = num1 * den2 - num2 * den1;</span><br><span class="line">        &#125;</span><br><span class="line">        denominator = den1 * den2;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">toLowestTerms</span>(numerator, denominator);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">string <span class="title">toLowestTerms</span><span class="params">(<span class="type">int</span> numerator, <span class="type">int</span> denominator)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> divisor = <span class="built_in">gcd</span>(<span class="built_in">abs</span>(numerator), <span class="built_in">abs</span>(denominator));</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">to_string</span>(numerator / divisor) + <span class="string">&quot;/&quot;</span> +</span><br><span class="line">               <span class="built_in">to_string</span>(denominator / divisor);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">string <span class="title">fractionAddition</span><span class="params">(string expression)</span> </span>&#123;</span><br><span class="line">        <span class="function">regex <span class="title">pattern</span><span class="params">(<span class="string">&quot;(-?\\d+)/(\\d+)([+-])(-?\\d+)/(\\d+)&quot;</span>)</span></span>;</span><br><span class="line">        smatch matches;</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">regex_search</span>(expression, matches, pattern)) &#123;</span><br><span class="line">            <span class="type">int</span> num1 = std::<span class="built_in">stoi</span>(matches[<span class="number">1</span>].<span class="built_in">str</span>());</span><br><span class="line">            <span class="type">int</span> den1 = std::<span class="built_in">stoi</span>(matches[<span class="number">2</span>].<span class="built_in">str</span>());</span><br><span class="line">            <span class="type">int</span> num2 = std::<span class="built_in">stoi</span>(matches[<span class="number">4</span>].<span class="built_in">str</span>());</span><br><span class="line">            <span class="type">int</span> den2 = std::<span class="built_in">stoi</span>(matches[<span class="number">5</span>].<span class="built_in">str</span>());</span><br><span class="line">            <span class="type">char</span> op = matches[<span class="number">3</span>].<span class="built_in">str</span>()[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">            expression = matches.<span class="built_in">prefix</span>().<span class="built_in">str</span>() +</span><br><span class="line">                         <span class="built_in">performOperation</span>(num1, den1, num2, den2, op) +</span><br><span class="line">                         matches.<span class="built_in">suffix</span>().<span class="built_in">str</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> expression;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>关于最大公约数gcd和最小公倍数lcm:</p><p>(Greatest Common Divisor、Least Common Multiple)</p><p>需要的头文件为<code>&lt;numeric&gt;</code></p><h2 id="6-4-分数到小数-分数乘除运算-：166"><a href="#6-4-分数到小数-分数乘除运算-：166" class="headerlink" title="6-4.分数到小数(分数乘除运算)：166"></a>6-4.分数到小数(分数乘除运算)：166</h2><p>两个整数相除，结果一定是有理数，一定有循环。使用了哈希表存储竖式模拟过程中出现过的余数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">fractionToDecimal</span><span class="params">(<span class="type">int</span> numerator, <span class="type">int</span> denominator)</span> </span>&#123;</span><br><span class="line">        <span class="type">long</span> numeratorLong = numerator;</span><br><span class="line">        <span class="type">long</span> denominatorLong = denominator;</span><br><span class="line">        <span class="keyword">if</span> (numeratorLong % denominatorLong == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">to_string</span>(numeratorLong / denominatorLong);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        string ans;</span><br><span class="line">        <span class="keyword">if</span> (numeratorLong &lt; <span class="number">0</span> ^ denominatorLong &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            ans.<span class="built_in">push_back</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 整数部分</span></span><br><span class="line">        numeratorLong = <span class="built_in">abs</span>(numeratorLong);</span><br><span class="line">        denominatorLong = <span class="built_in">abs</span>(denominatorLong);</span><br><span class="line">        <span class="type">long</span> integerPart = numeratorLong / denominatorLong;</span><br><span class="line">        ans += <span class="built_in">to_string</span>(integerPart);</span><br><span class="line">        ans.<span class="built_in">push_back</span>(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 小数部分</span></span><br><span class="line">        string fractionPart;</span><br><span class="line">        unordered_map&lt;<span class="type">long</span>, <span class="type">int</span>&gt; remainderIndexMap;</span><br><span class="line">        <span class="type">long</span> remainder = numeratorLong % denominatorLong;</span><br><span class="line">        <span class="type">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (remainder != <span class="number">0</span> &amp;&amp; !remainderIndexMap.<span class="built_in">count</span>(remainder)) &#123;</span><br><span class="line">            remainderIndexMap[remainder] = index;</span><br><span class="line">            remainder *= <span class="number">10</span>;</span><br><span class="line">            fractionPart += <span class="built_in">to_string</span>(remainder / denominatorLong);</span><br><span class="line">            remainder %= denominatorLong;</span><br><span class="line">            index++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (remainder != <span class="number">0</span>) &#123; <span class="comment">// 有循环节</span></span><br><span class="line">            <span class="type">int</span> insertIndex = remainderIndexMap[remainder];</span><br><span class="line">            fractionPart = fractionPart.<span class="built_in">substr</span>(<span class="number">0</span>,insertIndex) + <span class="string">&#x27;(&#x27;</span> + fractionPart.<span class="built_in">substr</span>(insertIndex);</span><br><span class="line">            fractionPart.<span class="built_in">push_back</span>(<span class="string">&#x27;)&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        ans += fractionPart;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="6-5-求解方程：640"><a href="#6-5-求解方程：640" class="headerlink" title="6-5.求解方程：640"></a>6-5.求解方程：640</h2><p><img src="https://s2.loli.net/2024/01/23/NfTy7ME3SJHCcKV.png" alt=""></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">solveEquation</span><span class="params">(string equation)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> index = <span class="number">0</span>, n = equation.<span class="built_in">size</span>(), sign1 = <span class="number">1</span>; <span class="comment">// sign1记录等式右边系数</span></span><br><span class="line">        <span class="type">int</span> factor = <span class="number">0</span>, val = <span class="number">0</span>; <span class="comment">//记录变量的系数，常量值</span></span><br><span class="line">        <span class="keyword">while</span> (index &lt; n) &#123;</span><br><span class="line">            <span class="keyword">if</span> (equation[index] == <span class="string">&#x27;=&#x27;</span>) &#123;</span><br><span class="line">                sign1 = <span class="number">-1</span>; <span class="comment">//等式右边默认系数为负</span></span><br><span class="line">                index++;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> sign2 = sign1, number = <span class="number">0</span>;</span><br><span class="line">            <span class="type">bool</span> valid = <span class="literal">false</span>; <span class="comment">//记录number是否有效</span></span><br><span class="line">            <span class="keyword">if</span> (equation[index] == <span class="string">&#x27;-&#x27;</span> ||</span><br><span class="line">                equation[index] == <span class="string">&#x27;+&#x27;</span>) &#123; <span class="comment">//去掉前面的符号</span></span><br><span class="line">                sign2 = (equation[index] == <span class="string">&#x27;-&#x27;</span>) ? -sign1 : sign1;</span><br><span class="line">                index++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (index &lt; n &amp;&amp; <span class="built_in">isdigit</span>(equation[index])) &#123;</span><br><span class="line">                number = number * <span class="number">10</span> + equation[index] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                index++;</span><br><span class="line">                valid = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (index &lt; n &amp;&amp; equation[index] == <span class="string">&#x27;x&#x27;</span>) &#123; <span class="comment">//变量</span></span><br><span class="line">                factor += valid ? sign2 * number : sign2;</span><br><span class="line">                index++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">//数值</span></span><br><span class="line">                val += sign2 * number;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!factor) &#123;  <span class="comment">//factor * x + val = 0</span></span><br><span class="line">            <span class="keyword">return</span> val == <span class="number">0</span> ? <span class="string">&quot;Infinite solutions&quot;</span> : <span class="string">&quot;No solution&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;x=&quot;</span> + <span class="built_in">to_string</span>(-val / factor);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="6-6-外观数列：38"><a href="#6-6-外观数列：38" class="headerlink" title="6-6.外观数列：38"></a>6-6.外观数列：38</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">countAndSay</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        string prev = <span class="string">&quot;1&quot;</span>; <span class="comment">//记录下前一个字符串是什么，默认为第一个字符串&quot;1&quot;</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            string curr = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="type">int</span> start = <span class="number">0</span>, pos = <span class="number">0</span>;<span class="comment">//双指针</span></span><br><span class="line">            <span class="keyword">while</span> (pos &lt; prev.<span class="built_in">size</span>()) &#123;</span><br><span class="line">                <span class="keyword">while</span> (pos &lt; prev.<span class="built_in">size</span>() &amp;&amp; prev[pos] == prev[start]) &#123;</span><br><span class="line">                    pos++;</span><br><span class="line">                &#125;</span><br><span class="line">                curr += <span class="built_in">to_string</span>(pos - start) + prev[start];</span><br><span class="line">                start = pos; <span class="comment">//更新start</span></span><br><span class="line">            &#125;</span><br><span class="line">            prev = curr; <span class="comment">//更新prev为下一个字符串</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> prev;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>6-6.自定义字符串转换整数：8</p><p>法一：依次遍历</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">strToInt</span><span class="params">(string str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (str.<span class="built_in">empty</span>()) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> index = <span class="number">0</span>, n = str.<span class="built_in">size</span>(), sign = <span class="number">1</span>, res = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 处理前置空格</span></span><br><span class="line">        <span class="keyword">while</span> (index &lt; n &amp;&amp; str[index] == <span class="string">&#x27; &#x27;</span>) &#123;</span><br><span class="line">            ++index;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 处理符号，应该继续向后，因为+-12的结果应为0</span></span><br><span class="line">        <span class="keyword">if</span> (index &lt; n &amp;&amp; (str[index] == <span class="string">&#x27;+&#x27;</span> || str[index] == <span class="string">&#x27;-&#x27;</span>)) &#123;</span><br><span class="line">            sign = str[index++] == <span class="string">&#x27;+&#x27;</span> ? <span class="number">1</span> : <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 处理数字</span></span><br><span class="line">        <span class="keyword">while</span> (index &lt; n &amp;&amp; <span class="built_in">isdigit</span>(str[index])) &#123;</span><br><span class="line">            <span class="type">int</span> digit = str[index++] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            <span class="comment">// 判断是否溢出</span></span><br><span class="line">            <span class="keyword">if</span> (res &gt; (INT_MAX - digit) / <span class="number">10</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> sign == <span class="number">1</span> ? INT_MAX : INT_MIN;</span><br><span class="line">            &#125;</span><br><span class="line">            res = res * <span class="number">10</span> + digit;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res * sign;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>本题关键：处理整数溢出的情况，原题：如果整数数超过 32 位有符号整数范围 $[−2^{31},  2^{31} − 1]$ ，需要截断这个整数，使其保持在这个范围内。具体来说，小于 $2^{31}$ 的整数应该被固定为 $2^{31}$ ，大于 $2^{31}− 1$ 的整数应该被固定为 $2^{31}− 1 $。</p><hr><p>法二：自动机</p><p><img src="https://s2.loli.net/2024/01/24/TAa7d6Hgjy4iYqC.png" alt=""></p><p><img src="https://s2.loli.net/2024/01/24/QxOmc2DHh3U51nf.png" alt=""></p><p><img src="https://s2.loli.net/2024/01/24/d13ieFt2Aa4SQIX.png" alt=""></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Automaton</span> &#123;</span><br><span class="line">    string state = <span class="string">&quot;start&quot;</span>;</span><br><span class="line">    unordered_map&lt;string, vector&lt;string&gt;&gt; table = &#123;</span><br><span class="line">        &#123;<span class="string">&quot;start&quot;</span>, &#123;<span class="string">&quot;start&quot;</span>, <span class="string">&quot;signed&quot;</span>, <span class="string">&quot;in_number&quot;</span>, <span class="string">&quot;end&quot;</span>&#125;&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;signed&quot;</span>, &#123;<span class="string">&quot;end&quot;</span>, <span class="string">&quot;end&quot;</span>, <span class="string">&quot;in_number&quot;</span>, <span class="string">&quot;end&quot;</span>&#125;&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;in_number&quot;</span>, &#123;<span class="string">&quot;end&quot;</span>, <span class="string">&quot;end&quot;</span>, <span class="string">&quot;in_number&quot;</span>, <span class="string">&quot;end&quot;</span>&#125;&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;end&quot;</span>, &#123;<span class="string">&quot;end&quot;</span>, <span class="string">&quot;end&quot;</span>, <span class="string">&quot;end&quot;</span>, <span class="string">&quot;end&quot;</span>&#125;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">get_col</span><span class="params">(<span class="type">char</span> c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">isspace</span>(c)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">&#x27;+&#x27;</span> <span class="keyword">or</span> c == <span class="string">&#x27;-&#x27;</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">isdigit</span>(c)) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> sign = <span class="number">1</span>;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> ans = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">get</span><span class="params">(<span class="type">char</span> c)</span> </span>&#123;</span><br><span class="line">        state = table[state][<span class="built_in">get_col</span>(c)];</span><br><span class="line">        <span class="keyword">if</span> (state == <span class="string">&quot;in_number&quot;</span>) &#123;</span><br><span class="line">            ans = ans * <span class="number">10</span> + c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            ans = sign == <span class="number">1</span> ? <span class="built_in">min</span>(ans, (<span class="type">long</span> <span class="type">long</span>)INT_MAX) : <span class="built_in">min</span>(ans, -(<span class="type">long</span> <span class="type">long</span>)INT_MIN);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (state == <span class="string">&quot;signed&quot;</span>)</span><br><span class="line">            sign = c == <span class="string">&#x27;+&#x27;</span> ? <span class="number">1</span> : <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">myAtoi</span><span class="params">(string str)</span> </span>&#123;</span><br><span class="line">        Automaton automaton;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c : str)</span><br><span class="line">            automaton.<span class="built_in">get</span>(c);</span><br><span class="line">        <span class="keyword">return</span> automaton.sign * automaton.ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="关于自动机"><a href="#关于自动机" class="headerlink" title="关于自动机"></a>关于自动机</h2><p>在C++中，自动机通常指的是有限状态自动机（Finite State Machine，FSM），它是一种抽象的数学模型，用于描述系统的状态及状态之间的转移。</p><p>一个简单的有限状态自动机由以下几部分组成：</p><ul><li>一组状态：描述系统可能处于的状态。</li><li>一组转移：描述状态之间的转移条件。</li><li>初始状态：描述系统的初始状态。</li><li>终止状态：描述系统的结束状态。</li></ul><p>在C++中，我们可以使用类和枚举类型来实现有限状态自动机。以下是一个简单的示例，演示了一个有限状态自动机，用于模拟一个简单的灯的状态变化。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 枚举类型表示灯的状态</span></span><br><span class="line"><span class="keyword">enum class</span> <span class="title class_">LightState</span> &#123;</span><br><span class="line">    OFF,</span><br><span class="line">    ON,</span><br><span class="line">    DIM</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LightStateMachine</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    LightState state;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">LightStateMachine</span>() : <span class="built_in">state</span>(LightState::OFF) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">transition</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (state) &#123;</span><br><span class="line">            <span class="keyword">case</span> LightState::OFF:</span><br><span class="line">                state = LightState::ON;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> LightState::ON:</span><br><span class="line">                state = LightState::DIM;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> LightState::DIM:</span><br><span class="line">                state = LightState::OFF;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">LightState <span class="title">getState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> state;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    LightStateMachine light;</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Initial state: &quot;</span> &lt;&lt; <span class="built_in">static_cast</span>&lt;<span class="type">int</span>&gt;(light.<span class="built_in">getState</span>()) &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    light.<span class="built_in">transition</span>();</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;State after transition: &quot;</span> &lt;&lt; <span class="built_in">static_cast</span>&lt;<span class="type">int</span>&gt;(light.<span class="built_in">getState</span>()) &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    light.<span class="built_in">transition</span>();</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;State after transition: &quot;</span> &lt;&lt; <span class="built_in">static_cast</span>&lt;<span class="type">int</span>&gt;(light.<span class="built_in">getState</span>()) &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的示例中，我们定义了一个简单的有限状态自动机 <code>LightStateMachine</code>，用于模拟灯的状态变化。通过调用 <code>transition</code> 方法，状态机会根据当前状态进行转移，并可以通过 <code>getState</code> 方法获取当前状态。</p><h2 id="6-6-整数转罗马数字：12"><a href="#6-6-整数转罗马数字：12" class="headerlink" title="6-6.整数转罗马数字：12"></a>6-6.整数转罗马数字：12</h2><p>法一：模拟</p><p>注意，这里<mark>不能</mark>用unordered_map，因为其遍历的时候是乱序的，应该用能设置排列规则的map，用<code>greater&lt;int&gt;</code>保证由大到小遍历。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">const</span> map&lt;<span class="type">int</span>, string, greater&lt;<span class="type">int</span>&gt;&gt; valueSymbols = &#123;</span><br><span class="line">        &#123;<span class="number">1000</span>, <span class="string">&quot;M&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="number">900</span>,  <span class="string">&quot;CM&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="number">500</span>,  <span class="string">&quot;D&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="number">400</span>,  <span class="string">&quot;CD&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="number">100</span>,  <span class="string">&quot;C&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="number">90</span>,   <span class="string">&quot;XC&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="number">50</span>,   <span class="string">&quot;L&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="number">40</span>,   <span class="string">&quot;XL&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="number">10</span>,   <span class="string">&quot;X&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="number">9</span>,    <span class="string">&quot;IX&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="number">5</span>,    <span class="string">&quot;V&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="number">4</span>,    <span class="string">&quot;IV&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="number">1</span>,    <span class="string">&quot;I&quot;</span>&#125;,</span><br><span class="line">    &#125;;</span><br><span class="line"><span class="comment">//使用了greater&lt;int&gt;才能保证遍历顺序是按照当前1000-&gt;500-&gt;...</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">intToRoman</span><span class="params">(<span class="type">int</span> num)</span> </span>&#123;</span><br><span class="line">        string roman;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; [value, symbol] : valueSymbols) &#123; <span class="comment">//注意auto前面这里需要加上const</span></span><br><span class="line">            <span class="keyword">while</span> (num &gt;= value) &#123;</span><br><span class="line">                num -= value;</span><br><span class="line">                roman += symbol;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (num == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> roman;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>也可以直接使用数组，其中每个元素均为pair类型。遍历数组的顺序并不是乱序。pair数组除了第一行的定义以外，其他代码几乎没有区别。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> pair&lt;<span class="type">int</span>, string&gt; valueSymbols[] = &#123;</span><br><span class="line">    &#123;<span class="number">1000</span>, <span class="string">&quot;M&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="number">900</span>,  <span class="string">&quot;CM&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="number">500</span>,  <span class="string">&quot;D&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="number">400</span>,  <span class="string">&quot;CD&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="number">100</span>,  <span class="string">&quot;C&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="number">90</span>,   <span class="string">&quot;XC&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="number">50</span>,   <span class="string">&quot;L&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="number">40</span>,   <span class="string">&quot;XL&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="number">10</span>,   <span class="string">&quot;X&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="number">9</span>,    <span class="string">&quot;IX&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="number">5</span>,    <span class="string">&quot;V&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="number">4</span>,    <span class="string">&quot;IV&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="number">1</span>,    <span class="string">&quot;I&quot;</span>&#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">intToRoman</span><span class="params">(<span class="type">int</span> num)</span> </span>&#123;</span><br><span class="line">        string roman;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span> &amp;[value, symbol] : valueSymbols) &#123;</span><br><span class="line">            <span class="keyword">while</span> (num &gt;= value) &#123;</span><br><span class="line">                num -= value;</span><br><span class="line">                roman += symbol;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (num == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> roman;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>法二：硬编码数字</p><p><img src="https://s2.loli.net/2024/01/24/wqVmOtoUaXb4H7A.png" alt=""></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> string thousands[] = &#123;<span class="string">&quot;&quot;</span>, <span class="string">&quot;M&quot;</span>, <span class="string">&quot;MM&quot;</span>, <span class="string">&quot;MMM&quot;</span>&#125;;</span><br><span class="line"><span class="type">const</span> string hundreds[]  = &#123;<span class="string">&quot;&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="string">&quot;CC&quot;</span>, <span class="string">&quot;CCC&quot;</span>, <span class="string">&quot;CD&quot;</span>, <span class="string">&quot;D&quot;</span>, <span class="string">&quot;DC&quot;</span>, <span class="string">&quot;DCC&quot;</span>, <span class="string">&quot;DCCC&quot;</span>, <span class="string">&quot;CM&quot;</span>&#125;;</span><br><span class="line"><span class="type">const</span> string tens[]      = &#123;<span class="string">&quot;&quot;</span>, <span class="string">&quot;X&quot;</span>, <span class="string">&quot;XX&quot;</span>, <span class="string">&quot;XXX&quot;</span>, <span class="string">&quot;XL&quot;</span>, <span class="string">&quot;L&quot;</span>, <span class="string">&quot;LX&quot;</span>, <span class="string">&quot;LXX&quot;</span>, <span class="string">&quot;LXXX&quot;</span>, <span class="string">&quot;XC&quot;</span>&#125;;</span><br><span class="line"><span class="type">const</span> string ones[]      = &#123;<span class="string">&quot;&quot;</span>, <span class="string">&quot;I&quot;</span>, <span class="string">&quot;II&quot;</span>, <span class="string">&quot;III&quot;</span>, <span class="string">&quot;IV&quot;</span>, <span class="string">&quot;V&quot;</span>, <span class="string">&quot;VI&quot;</span>, <span class="string">&quot;VII&quot;</span>, <span class="string">&quot;VIII&quot;</span>, <span class="string">&quot;IX&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">intToRoman</span><span class="params">(<span class="type">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> thousands[num / <span class="number">1000</span>] + hundreds[num % <span class="number">1000</span> / <span class="number">100</span>] + tens[num % <span class="number">100</span> / <span class="number">10</span>] + ones[num % <span class="number">10</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="6-7-比较版本号：165"><a href="#6-7-比较版本号：165" class="headerlink" title="6-7.比较版本号：165"></a>6-7.比较版本号：165</h2><p>注意其中细节即可，双指针法，尽可能简化代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">compareVersion</span><span class="params">(string version1, string version2)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> pos1 = <span class="number">0</span>, pos2 = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> n1 = version1.<span class="built_in">length</span>(), n2 = version2.<span class="built_in">length</span>();</span><br><span class="line">        <span class="keyword">while</span> (pos1 &lt; n1 || pos2 &lt; n2) &#123; <span class="comment">//用或，需要把两个都遍历完</span></span><br><span class="line">            <span class="type">long</span> <span class="type">int</span> v1 = <span class="number">0</span>, v2 = <span class="number">0</span>; <span class="comment">//版本号可能是&quot;1.2147483647&quot;</span></span><br><span class="line">            <span class="keyword">while</span> (pos1 &lt; n1 &amp;&amp; version1[pos1] != <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">                v1 = v1 * <span class="number">10</span> + version1[pos1++] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (pos2 &lt; n2 &amp;&amp; version2[pos2] != <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">                v2 = v2 * <span class="number">10</span> + version2[pos2++] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (v1 != v2) &#123;</span><br><span class="line">                <span class="keyword">return</span> v1 &gt; v2 ? <span class="number">1</span> : <span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            pos1++;</span><br><span class="line">            pos2++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>stoi(stringVar)</code>中，stringVar不能为空。</p><h2 id="6-8-神奇字符串：481"><a href="#6-8-神奇字符串：481" class="headerlink" title="6-8.神奇字符串：481"></a>6-8.神奇字符串：481</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">magicalString</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        string s = <span class="string">&quot;\1\2\2&quot;</span>; <span class="comment">//需要用反斜杠</span></span><br><span class="line">        <span class="comment">// 值就是 1,2,2，这样就可以直接用 s[i] 当作个数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; s.<span class="built_in">length</span>() &lt; n; ++i) &#123;</span><br><span class="line">            s += <span class="built_in">string</span>(s[i], s.<span class="built_in">back</span>() ^ <span class="number">3</span>);</span><br><span class="line">            <span class="comment">// 1^3=2, 2^3=1，这样就能在 1 和 2 之间转换</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">count</span>(s.<span class="built_in">begin</span>(), s.<span class="built_in">begin</span>() + n, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol><li><p><code>string s = &quot;\1\2\2&quot;;</code>和<code>string s = &quot;122&quot;;</code>的区别:在C++中，字符串字面值中的转义序列是以反斜杠（<code>\</code>）开头的字符序列。<code>&quot;\1\2\2&quot;</code> 和 <code>&quot;122&quot;</code> 的区别在于<mark>转义序列</mark>的使用。<code>&quot;\1\2\2&quot;</code>：这个字符串包含了转义序列 <code>\1</code>、<code>\2</code> 和 <code>\2</code>。这些是八进制转义序列，代表特定的ASCII字符。具体而言，<code>\1</code> 对应ASCII值1，<code>\2</code> 对应ASCII值2。因此，这个字符串实际上是包含了三个字符，分别是1、2和2。<code>&quot;122&quot;</code>这个字符串没有使用八进制转义序列，它只包含了三个字符，分别是’1’、’2’和’2’。前者的s[i]可以直接用来当做个数。</p></li><li><p><code>s += string(s[i], s.back()^3)</code>：<code>string(int count,char value);</code>这是表示s加上一个包含value字符，且长度为count的字符串。比如<code>s+=string(&#39;\2&#39;, 1)</code>就是<code>s+=&quot;11&quot;</code>,常规写法是<code>string(2, &#39;1&#39;)</code>;</p></li><li><p><code>s.back()^3</code>:s.back()就是字符串s的最后一个字符。<code>^3</code>用于实现1与2的不断切换，1^3=2, 2^3=1.(二进制运算)</p></li><li><p><code>count(s.begin(), s.begin()+n, 1)</code>:计数特定区间内有多少个值为1的字符。模板<code>count(T.begin(),T.end(),value)</code>。</p></li></ol><hr><p>现在不用反斜杠：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">magicalString</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        string s = <span class="string">&quot;122&quot;</span>; <span class="comment">//不用反斜杠</span></span><br><span class="line">        <span class="comment">// 这样就不可以直接用 s[i] 当作个数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; s.<span class="built_in">length</span>() &lt; n; ++i) &#123;</span><br><span class="line">            s += <span class="built_in">string</span>(s[i]-<span class="string">&#x27;0&#x27;</span>, (s.<span class="built_in">back</span>()-<span class="string">&#x27;0&#x27;</span>) ^ <span class="number">3</span> +<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">            <span class="comment">// 1^3=2, 2^3=1，这样就能在 1 和 2 之间转换</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">count</span>(s.<span class="built_in">begin</span>(), s.<span class="built_in">begin</span>() + n, <span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> leetcode刷题笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> leetcode </tag>
            
            <tag> string </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2.0字符串篇</title>
      <link href="/posts/10e5d792.html"/>
      <url>/posts/10e5d792.html</url>
      
        <content type="html"><![CDATA[<h1 id="关于string和cstring"><a href="#关于string和cstring" class="headerlink" title="关于string和cstring"></a>关于string和cstring</h1><p><code>&lt;string&gt;</code> 和 <code>&lt;cstring&gt;</code> 是 C++ 中的两个不同的头文件，它们有不同的作用和功能：</p><ul><li><p><code>&lt;string&gt;</code> 头文件包含了 C++ 标准库中的字符串类 <code>std::string</code>，以及与字符串相关的一些函数和操作符重载。这个头文件用于处理 C++ 中的字符串操作，提供了更多的字符串处理功能和便利。</p></li><li><p><code>&lt;cstring&gt;</code> 头文件是 C 标准库中的头文件，其中定义了一些 C 语言字符串操作的函数，比如字符串复制、连接、比较等。在 C++ 中，这些函数通常被包含在 <code>std</code> 命名空间中，比如 <code>std::strcpy</code>、<code>std::strcat</code> 等。</p></li></ul><p>总的来说，<code>&lt;string&gt;</code> 更适合用于 C++ 中的字符串操作，而 <code>&lt;cstring&gt;</code> 则更适合用于 C 风格的字符串操作。</p><hr><h1 id="关于string包含的常见函数"><a href="#关于string包含的常见函数" class="headerlink" title="关于string包含的常见函数"></a>关于string包含的常见函数</h1><ul><li><code>length()</code> 或 <code>size()</code>: 返回字符串的长度。</li><li><code>append(str)</code>: 在字符串末尾添加另一个字符串。</li><li><code>insert(pos, str)</code>: 在指定位置插入另一个字符串。</li><li><code>erase(pos, len)</code>: 从指定位置删除指定长度的字符。</li><li><code>find(str)</code>: 查找字符串中是否包含指定的子字符串。</li><li><code>substr(pos, len)</code>: 返回从指定位置开始的指定长度的子字符串。</li><li><code>compare(str)</code>: 比较两个字符串。</li><li><code>replace(pos, len, str)</code>: 用另一个字符串替换指定位置的指定长度的字符。</li><li><code>push_back()、pop_back()</code>:类似数组的操作方式，对字符串依然使用。</li></ul><hr><p>异或：<code>^</code>.运算规则：<code>N^0=N;N^N=0;</code></p><p>判断大小写：<code>islower</code>、<code>isupper</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">detectCapitalUse</span><span class="params">(string word)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (word.<span class="built_in">size</span>() &gt;= <span class="number">2</span> &amp;&amp; <span class="built_in">islower</span>(word[<span class="number">0</span>]) &amp;&amp; <span class="built_in">isupper</span>(word[<span class="number">1</span>])) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//排除形如uSA的情况</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt; word.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">islower</span>(word[i]) ^ <span class="built_in">islower</span>(word[<span class="number">1</span>])) &#123;</span><br><span class="line">                <span class="comment">//除了第一个字母以外的字母大小写不一致</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>转为小写：<code>tolower</code>/转为大写:<code>toupper</code>(注意，返回值类型为int。可以写作<code>char ch = tolower(c);</code>或者<code>auto ch = char(tolower(c));</code>)。如果是数字，则无变化，<mark>可以接受数字</mark></p><p>检查一个字符是否是字母或数字:<code>isalnum</code>,需要头文件<code>&lt;cctype&gt;</code>.如果判断是否为字母:<code>isalpha</code>,判断是否为数字:<code>isdigit</code>.也是需要头文件<code>&lt;cctype&gt;</code></p><p>定义b为a的逆序字符串：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">string b(a.rbgin(),a.rend());</span><br></pre></td></tr></table></figure><h1 id="1-回文串的定义"><a href="#1-回文串的定义" class="headerlink" title="1.回文串的定义"></a>1.回文串的定义</h1><h2 id="验证回文串：125"><a href="#验证回文串：125" class="headerlink" title="验证回文串：125"></a>验证回文串：125</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isPalindrome</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        string schange;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> ch : s) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">isalnum</span>(ch)) &#123;</span><br><span class="line">                schange += <span class="built_in">tolower</span>(ch); <span class="comment">//防止大小写干扰之后的相等判断</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">string <span class="title">schangeReverse</span><span class="params">(schange.rbegin(), schange.rend())</span></span>;</span><br><span class="line">        <span class="keyword">return</span> schange == schangeReverse;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>空间优化:使用双指针，在原字符串上直接判断</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isPalindrome</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n=s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> left=<span class="number">0</span>,right=n<span class="number">-1</span>;</span><br><span class="line">        <span class="comment">//每次将指针移到下一个字母字符或数字字符，再判断这两个指针指向的字符是否相同</span></span><br><span class="line">        <span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">            <span class="keyword">while</span>(left&lt;right&amp;&amp;!<span class="built_in">isalnum</span>(s[left]))&#123;</span><br><span class="line">                ++left;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span>(left&lt;right&amp;&amp;!<span class="built_in">isalnum</span>(s[right]))&#123;</span><br><span class="line">                --right;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(left&lt;right)&#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">tolower</span>(s[left])!=<span class="built_in">tolower</span>(s[right]))&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                ++left;</span><br><span class="line">                --right;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>取字符串str从索引 0 开始、长度为 index 的子字符串：(注意包括的是str[0]到str[i-1]的部分！)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.<span class="built_in">substr</span>(<span class="number">0</span>, index);</span><br></pre></td></tr></table></figure><h1 id="2-公共前缀"><a href="#2-公共前缀" class="headerlink" title="2.公共前缀"></a>2.公共前缀</h1><h2 id="最长公共前缀：14"><a href="#最长公共前缀：14" class="headerlink" title="最长公共前缀：14"></a>最长公共前缀：14</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//纵向扫描</span></span><br><span class="line"><span class="comment">//从前往后遍历所有字符串的每一列，比较相同列上的字符是否相同，</span></span><br><span class="line"><span class="comment">//如果相同则继续对下一列进行比较，如果不相同则当前列不再属于公共前缀，</span></span><br><span class="line"><span class="comment">//当前列之前的部分为最长公共前缀。</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">longestCommonPrefix</span><span class="params">(vector&lt;string&gt;&amp; strs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!strs.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; strs[<span class="number">0</span>].<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; strs.<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (strs[<span class="number">0</span>][i] != strs[j][i]) &#123;</span><br><span class="line">                    <span class="keyword">return</span> strs[<span class="number">0</span>].<span class="built_in">substr</span>(<span class="number">0</span>, i) ;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> strs[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="3-单词"><a href="#3-单词" class="headerlink" title="3.单词"></a>3.单词</h1><h2 id="判断单词数：434"><a href="#判断单词数：434" class="headerlink" title="判断单词数：434"></a>判断单词数：434</h2><p>关键在于看该字符的<u>前一个</u>字符s[i-1]是否为空(这样可以遍历到所有字符而且不需要额外判断)，而不是看下一个字符s[i+1]是否为空</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">countSegments</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i] != <span class="string">&#x27; &#x27;</span> &amp;&amp; (i == <span class="number">0</span> || s[i - <span class="number">1</span>] == <span class="string">&#x27; &#x27;</span>)) &#123;</span><br><span class="line">                <span class="comment">// i==0必须写在s[i-1]前面，否则会溢出</span></span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="4-字符串的反转"><a href="#4-字符串的反转" class="headerlink" title="4.字符串的反转"></a>4.字符串的反转</h1><h2 id="反转字符串s"><a href="#反转字符串s" class="headerlink" title="反转字符串s"></a>反转字符串s</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">reverseString</span><span class="params">(vector&lt;<span class="type">char</span>&gt;&amp; s)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//法一</span></span><br><span class="line">    <span class="type">int</span> n = s.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n / <span class="number">2</span> - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">swap</span>(s[i], s[n - <span class="number">1</span> - i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//法二：自带方法</span></span><br><span class="line">    <span class="built_in">reverse</span>(s.<span class="built_in">begin</span>(),s.<span class="built_in">end</span>());</span><br><span class="line">    <span class="comment">//法三：双指针</span></span><br><span class="line">    <span class="type">int</span> n = s.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> left = <span class="number">0</span>, right = n - <span class="number">1</span>; left &lt; right; ++left, --right) &#123;</span><br><span class="line">        <span class="built_in">swap</span>(s[left], s[right]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注：关于min()，两个参数都必须是int类型，而s.size()是unsigned int类型，需要转换！(或者一开始就写成<code>int n=s.size()</code>，然后后面用n代替)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">reverse</span>(s.<span class="built_in">begin</span>() + i, s.<span class="built_in">begin</span>() + <span class="built_in">min</span>(i + k, (<span class="type">int</span>)s.<span class="built_in">size</span>()));</span><br></pre></td></tr></table></figure><p>反转字符串中的各个单词：557(进阶：包括前置后置以后中间与多个空格时，stringstream能够很好解决,只不过用到了额外空间ans和t并非原地解法,时间复杂度为O(n * m + k)，空间复杂度为O(n)。原地解法应该用双指针)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">string <span class="title">reverseWords</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">    <span class="function">stringstream <span class="title">ss</span><span class="params">(s)</span></span>;</span><br><span class="line">    string t, ans;</span><br><span class="line">    <span class="keyword">while</span> (ss &gt;&gt; t) &#123;</span><br><span class="line">        <span class="built_in">reverse</span>(t.<span class="built_in">begin</span>(), t.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">if</span> (!ans.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            ans += <span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ans += t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="5-统计字符串-哈希表"><a href="#5-统计字符串-哈希表" class="headerlink" title="5.统计字符串(哈希表)"></a>5.统计字符串(哈希表)</h1><h2 id="5-1-字符串中的第一个唯一字符：387"><a href="#5-1-字符串中的第一个唯一字符：387" class="headerlink" title="5-1.字符串中的第一个唯一字符：387"></a>5-1.字符串中的第一个唯一字符：387</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">firstUniqChar</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n = s.<span class="built_in">length</span>();</span><br><span class="line">    unordered_map&lt;<span class="type">char</span>, <span class="type">int</span>&gt; count;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">char</span> ch : s) &#123;</span><br><span class="line">        count[ch]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (count[s[i]] == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还可以用find()和rfind():(空间复杂度为$O(1)$,时间复杂度$O(n^2)$)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">firstUniqChar</span><span class="params">(string s)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>( i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(s.<span class="built_in">find</span>(s[i]) == s.<span class="built_in">rfind</span>(s[i]))<span class="comment">//find()时间复杂度O(n)</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>优化：记录频数改为记录<strong>索引</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">firstUniqChar</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = s.<span class="built_in">length</span>();</span><br><span class="line">        unordered_map&lt;<span class="type">char</span>, <span class="type">int</span>&gt; position;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (position.<span class="built_in">count</span>(s[i])) &#123; <span class="comment">//该字符已经出现过至少一次</span></span><br><span class="line">                position[s[i]] = <span class="number">-1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                position[s[i]] = i; <span class="comment">//只出现第一次的，记录下对应索引</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> first = n;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; [_, pos] : position) &#123;</span><br><span class="line">            <span class="keyword">if</span> (pos != <span class="number">-1</span>) &#123;</span><br><span class="line">                first = <span class="built_in">min</span>(first, pos);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> first == n ? <span class="number">-1</span> : first;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>注：（用纯数组更快，尽管时间复杂度和空间复杂度相同，但是哈希表牵涉到建表、哈希碰撞等等）</p><p>方法二：使用队列queue（时间空间复杂度同法一）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">firstUniqChar</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = s.<span class="built_in">length</span>();</span><br><span class="line">        unordered_map&lt;<span class="type">char</span>, <span class="type">int</span>&gt; position;</span><br><span class="line">        queue&lt;pair&lt;<span class="type">char</span>, <span class="type">int</span>&gt;&gt; q;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (position.<span class="built_in">count</span>(s[i])) &#123; <span class="comment">//该字符已经出现过至少一次</span></span><br><span class="line">                position[s[i]] = <span class="number">-1</span>;</span><br><span class="line">                <span class="keyword">while</span> (!q.<span class="built_in">empty</span>() &amp;&amp; position[q.<span class="built_in">front</span>().first] == <span class="number">-1</span>) &#123;</span><br><span class="line">                    q.<span class="built_in">pop</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                position[s[i]] = i; <span class="comment">//只出现第一次的，记录下对应索引</span></span><br><span class="line">                q.<span class="built_in">emplace</span>(s[i], i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> q.<span class="built_in">empty</span>() ? <span class="number">-1</span> : q.<span class="built_in">front</span>().second;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>emplace()</code> 是 C++ 中容器类的一个成员函数，用于在容器中就地构造元素，而不是通过拷贝或移动构造函数。</p><p>对于<mark>容器类</mark>（如 <code>std::vector</code>、<code>std::map</code>、<code>std::unordered_map</code> 等），<code>emplace()</code> 函数接受构造函数的参数，并在容器中直接构造一个新的元素，而不是将一个已经构造好的对象插入容器。</p><p>这种就地构造的方式可以避免额外的拷贝或移动操作，提高代码的效率。它对于大型对象或者不可复制/移动的对象特别有用。</p><hr><h3 id="注：关于哈希表"><a href="#注：关于哈希表" class="headerlink" title="注：关于哈希表"></a>注：关于哈希表</h3><p>统计出现次数(时间复杂度$O(1)$)：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">position.<span class="built_in">count</span>(s[i]);</span><br></pre></td></tr></table></figure><p>内部定义：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">unordered_map&lt;<span class="type">char</span>, <span class="type">int</span>&gt; mp = &#123;</span><br><span class="line">        &#123;<span class="string">&#x27;I&#x27;</span>, <span class="number">1</span>&#125;,  </span><br><span class="line">        &#123;<span class="string">&#x27;V&#x27;</span>, <span class="number">5</span>&#125;,   </span><br><span class="line">        &#123;<span class="string">&#x27;X&#x27;</span>, <span class="number">10</span>&#125;,   </span><br><span class="line">        &#123;<span class="string">&#x27;L&#x27;</span>, <span class="number">50</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&#x27;C&#x27;</span>, <span class="number">100</span>&#125;, </span><br><span class="line">        &#123;<span class="string">&#x27;D&#x27;</span>, <span class="number">500</span>&#125;, </span><br><span class="line">        &#123;<span class="string">&#x27;M&#x27;</span>, <span class="number">1000</span>&#125;,</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure><p>遍历元素：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; [_, pos] : position) &#123;</span><br><span class="line">     <span class="keyword">if</span> (pos != <span class="number">-1</span>) &#123;</span><br><span class="line">          first = <span class="built_in">min</span>(first, pos);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码使用了 C++17 中的结构化绑定（structured bindings）语法，用于遍历名为 <code>position</code> 的容器中的元素。遍历的顺序并不是unordered_map中元素的插入顺序，由于unordered_map<mark>没有保证</mark>元素的插入顺序，遍历顺序为乱序，从而影响结果。这是因为 <code>std::unordered_map</code> 使用哈希表实现，元素的存储位置是根据哈希值计算得到的，而不是按照插入顺序或其他特定顺序。</p><p>在每次循环迭代中，<code>auto&amp; [_, pos]</code> 将容器中的键值对解构为两个变量 <code>_</code> 和 <code>pos</code>。这里使用 <code>_</code> 表示<u>不需要使用</u>的变量，而 <code>pos</code> 则表示容器中的值。</p><p>这两个for循环等价：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span>&amp; [_,strArray]:mp)&#123;</span><br><span class="line">    res.<span class="built_in">emplace_back</span>(strArray);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it = mp.<span class="built_in">begin</span>(); it != mp.<span class="built_in">end</span>(); ++it) &#123;</span><br><span class="line">     res.<span class="built_in">emplace_back</span>(it-&gt;second);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//注：unordered_map&lt;string, vector&lt;string&gt;&gt; mp;</span></span><br><span class="line"><span class="comment">//vector&lt;vector&lt;string&gt;&gt; res;详细可见49题</span></span><br></pre></td></tr></table></figure><p>哈希表中的每个元素的类型为pair</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">unordered_map&lt;<span class="type">char</span>, <span class="type">int</span>&gt; mp;</span><br><span class="line">vector&lt;pair&lt;<span class="type">char</span>, <span class="type">int</span>&gt;&gt; cnt;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; it : mp) &#123; <span class="comment">// it的类型是pair&lt;char,int&gt;</span></span><br><span class="line">     cnt.<span class="built_in">emplace_back</span>(it);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自定义比较方法(这里second值大的排在前面)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sort</span>(cnt.<span class="built_in">begin</span>(), cnt.<span class="built_in">end</span>(),</span><br><span class="line">     [](<span class="type">const</span> pair&lt;<span class="type">char</span>, <span class="type">int</span>&gt;&amp; a, <span class="type">const</span> pair&lt;<span class="type">char</span>, <span class="type">int</span>&gt;&amp; b) &#123;</span><br><span class="line">         <span class="keyword">return</span> a.second &gt; b.second;</span><br><span class="line">     &#125;);</span><br></pre></td></tr></table></figure><hr><h2 id="5-2-字符串找不同：389、242"><a href="#5-2-字符串找不同：389、242" class="headerlink" title="5-2.字符串找不同：389、242"></a>5-2.字符串找不同：389、242</h2><p>一、计数：首先遍历字符串 s，对其中的每个字符都将计数值加 1；然后遍历字符串 t，对其中的每个字符都将计数值减 1。也可以使用哈希表，但法一空间复杂度较高。(如果是Unicode字符就老老实实用这种方法)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">char</span> <span class="title">findTheDifference</span><span class="params">(string s, string t)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = t.<span class="built_in">size</span>(), n1 = s.<span class="built_in">size</span>();</span><br><span class="line">        unordered_map&lt;<span class="type">char</span>, <span class="type">int</span>&gt; count;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n1; i++) &#123;</span><br><span class="line">            count[t[i]]++;</span><br><span class="line">            count[s[i]]--;</span><br><span class="line">        &#125;</span><br><span class="line">        count[t[n - <span class="number">1</span>]]++;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; [pos, cnt] : count) &#123;<span class="comment">//pos是key,cnt是值。都用到了不能写为_</span></span><br><span class="line">            <span class="keyword">if</span> (cnt != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> pos;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>二、求和:将字符串 s 中每个字符的 ASCII 码的值求和，得到 $A_s$​；对字符串 t 同样的方法得到 $A_t$。两者的差值 $A_t-A_s$​ 即代表了被添加的字符。</p><p>三、<mark>位运算</mark>:将两个字符串拼接成一个字符串，则问题转换成求字符串中出现<u>奇数次</u>的字符。(136题也是位运算，用到了异或<code>^</code>)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">char</span> <span class="title">findTheDifference</span><span class="params">(string s, string t)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> ch: s) &#123;</span><br><span class="line">            ret ^= ch;<span class="comment">//异或运算时ch会先被转换成ASCII码(此处为int型)</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> ch: t) &#123;</span><br><span class="line">            ret ^= ch;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>因为在s和t之中都出现的ch,在异或运算之后变成了0，相当于<code>ret^s[0]^s[1]...^t[0]^t[1]...=0^(s[0]^t[0])^(s[1]^t[1])^...^t[more]=0^0^0^...^0^t[more]=t[more].</code></p><p>(这里假设s[0]==t[0],s[1]==t[1]…)</p><p>容器角度一般的优化思路。完整的是多容器-&gt;多次新建容器-&gt;单容器-&gt;数组-&gt;二进制位。</p><h2 id="5-3-字母异位词分组：49"><a href="#5-3-字母异位词分组：49" class="headerlink" title="5-3.字母异位词分组：49"></a>5-3.字母异位词分组：49</h2><p>法一：排序(由于互为字母异位词的两个字符串包含的字母相同，因此对两个字符串分别进行排序之后得到的字符串一定是相同的，故可以将<strong>排序之后的字符串作为哈希表的键</strong>。)可以不用sort()来排序以节省时间开销，但是可能增加空间开销。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;string&gt;&gt; <span class="built_in">groupAnagrams</span>(vector&lt;string&gt;&amp; strs) &#123;</span><br><span class="line">        unordered_map&lt;string, vector&lt;string&gt;&gt; mp;</span><br><span class="line">        <span class="keyword">for</span> (string&amp; str : strs) &#123;</span><br><span class="line">            string key = str;</span><br><span class="line">            <span class="built_in">sort</span>(key.<span class="built_in">begin</span>(), key.<span class="built_in">end</span>());</span><br><span class="line">            mp[key].<span class="built_in">emplace_back</span>(str);</span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;vector&lt;string&gt;&gt; res;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> it = mp.<span class="built_in">begin</span>(); it != mp.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">            res.<span class="built_in">emplace_back</span>(it-&gt;second);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>法二：计数(将每个字母出现的次数使用字符串表示，作为哈希表的键。时间复杂度更低，空间复杂度更高)</p><h2 id="5-4-根据字符串出现频率排序：451"><a href="#5-4-根据字符串出现频率排序：451" class="headerlink" title="5-4.根据字符串出现频率排序：451"></a>5-4.根据字符串出现频率排序：451</h2><p>桶排序：速度比sort()快</p><p>1.遍历字符串，统计每个字符出现的频率，同时记录最高频率 maxFreq；</p><p>2.创建桶，存储从 1 到 maxFreq 的每个出现频率的字符；</p><p>3.按照出现频率从大到小的顺序遍历桶，对于每个出现频率，获得对应的字符，然后将每个字符按照出现频率拼接到排序后的字符串。</p><h2 id="5-5-求连续递增子串的个数，并去重：467"><a href="#5-5-求连续递增子串的个数，并去重：467" class="headerlink" title="5-5.求连续递增子串的个数，并去重：467"></a>5-5.求连续递增子串的个数，并去重：467</h2><p>动态规划</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findSubstringInWraproundString</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> k = <span class="number">0</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(<span class="number">26</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">length</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &amp;&amp; (s[i] - s[i - <span class="number">1</span>] + <span class="number">26</span>) % <span class="number">26</span> == <span class="number">1</span>) &#123; <span class="comment">// s[i-1]在s[i]前面</span></span><br><span class="line">                k++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                k = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            dp[s[i] - <span class="string">&#x27;a&#x27;</span>] = <span class="built_in">max</span>(dp[s[i] - <span class="string">&#x27;a&#x27;</span>], k);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">accumulate</span>(dp.<span class="built_in">begin</span>(), dp.<span class="built_in">end</span>(), <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="5-6-URL的解密与加密：535"><a href="#5-6-URL的解密与加密：535" class="headerlink" title="5-6.URL的解密与加密：535"></a>5-6.URL的解密与加密：535</h2><p>如果想要实现相同的 URL 加密成同一个 TinyURL，则额外保存一个从 URL到 TinyURL 的映射。</p><p>注：int-&gt;string:<code>to_string(intVar);</code></p><p>string-&gt;int:<code>stoi(stringVar);</code></p><h3 id="关于随机数"><a href="#关于随机数" class="headerlink" title="关于随机数"></a>关于随机数</h3><p><code>time(0)</code>函数返回当前的系统时间（从某一时刻开始的秒数），而<code>srand</code>函数是用来设置随机数生成器的种子。将<code>time(0)</code>的返回值传递给<code>srand</code>函数，可以使用当前时间作为随机数生成器的种子，从而使得每次程序运行时生成的随机数序列都不同。</p><p>在C++中，通常在使用随机数生成函数<code>rand</code>之前，会调用<code>srand(time(0))</code>来<u>初始化随机数生成器</u>。这样可以确保每次程序运行时都会生成不同的随机数序列，因为种子不同会导致不同的随机数序列。之后就可以使用<code>randomNumber=rand();</code></p>]]></content>
      
      
      <categories>
          
          <category> leetcode刷题笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> leetcode </tag>
            
            <tag> string </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.数组篇</title>
      <link href="/posts/254d58d4.html"/>
      <url>/posts/254d58d4.html</url>
      
        <content type="html"><![CDATA[<p>数组的遍历:414</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">thirdMax</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//sort(nums.begin(),nums.end(),greater&lt;&gt;());//从大到小排序</span></span><br><span class="line">        <span class="comment">//使用了set就没有必要sort()，排序需要 O(nlog⁡n)的时间</span></span><br><span class="line">        set&lt;<span class="type">int</span>&gt;s;<span class="comment">//set会自动从小到大排序（默认时）,一个元素只能出现一次</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> num:nums)&#123;</span><br><span class="line">            s.<span class="built_in">insert</span>(num);<span class="comment">//set自动去重</span></span><br><span class="line">            <span class="keyword">if</span>(s.<span class="built_in">size</span>()&gt;<span class="number">3</span>)&#123;</span><br><span class="line">                s.<span class="built_in">erase</span>(s.<span class="built_in">begin</span>());<span class="comment">//注意s.begin()是迭代器类型</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s.<span class="built_in">size</span>()==<span class="number">3</span>?*s.<span class="built_in">begin</span>():*s.<span class="built_in">rbegin</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>统计数组中的元素：645(哈希表解法)。关键思想:<strong>原地哈希</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">findErrorNums</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt;<span class="built_in">res</span>(<span class="number">2</span>);</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>,<span class="type">int</span>&gt;mp;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; num:nums)&#123;    <span class="comment">//需要利用迭代器进行遍历</span></span><br><span class="line">            mp[num]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=nums.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            <span class="type">int</span> count=mp[i];</span><br><span class="line">            <span class="keyword">if</span>(count==<span class="number">2</span>)&#123;</span><br><span class="line">                res[<span class="number">0</span>]=i;<span class="comment">//重复的数字</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(count==<span class="number">0</span>)&#123;</span><br><span class="line">                res[<span class="number">1</span>]=i;<span class="comment">//缺失的数字</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>难题：41</p><p>二分搜索：274</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">hIndex</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; citations)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//双指针，二分搜索</span></span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>, right = citations.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> mid = <span class="number">0</span>, count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            mid = (left + right + <span class="number">1</span>) / <span class="number">2</span>;<span class="comment">//加1防止死循环</span></span><br><span class="line">            count = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; citations.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (citations[i] &gt;= mid) &#123;</span><br><span class="line">                    count++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (count &gt;= mid) &#123;</span><br><span class="line">                left = mid;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>类似min的函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> minNum = *<span class="built_in">min_element</span>(nums.<span class="built_in">begin</span>(),nums.<span class="built_in">end</span>());</span><br></pre></td></tr></table></figure><p>扫描：419</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">countBattleships</span><span class="params">(vector&lt;vector&lt;<span class="type">char</span>&gt;&gt;&amp; board)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> row = board.<span class="built_in">size</span>(), col = board[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; row; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; col; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (board[i][j] == <span class="string">&#x27;X&#x27;</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((i &gt;= <span class="number">1</span> &amp;&amp; board[i - <span class="number">1</span>][j] == <span class="string">&#x27;X&#x27;</span>) ||</span><br><span class="line">                        (j &gt;= <span class="number">1</span> &amp;&amp; board[i][j - <span class="number">1</span>] == <span class="string">&#x27;X&#x27;</span>)) &#123;</span><br><span class="line">                        <span class="comment">//如果发现其上方或者左边有过X,则继续向右下扫描</span></span><br><span class="line">                        <span class="comment">//此时res不增加，直接continue进入下一次循环</span></span><br><span class="line">                        <span class="comment">//直到确实走到尽头才会结束，然后计数+1</span></span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    res++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>迭代：396</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;numeric&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxRotateFunction</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>(), res = INT_MIN, Fk = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> sum = <span class="built_in">accumulate</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>(), <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            Fk += i * nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        res = Fk; <span class="comment">//也就是让res=F(0)，避免nums只有一个元素时return INT_MIN</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">            Fk += sum - n * nums[i];</span><br><span class="line">            res = <span class="built_in">max</span>(res, Fk);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>模拟：54、59</p><p>对角线遍历498：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m + n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="type">int</span> x = (i &lt; n ? <span class="number">0</span> : i - n + <span class="number">1</span>);</span><br><span class="line">                <span class="type">int</span> y = (i &lt; n ? i : n - <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">while</span> (x &lt; m &amp;&amp; y &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    res.<span class="built_in">emplace_back</span>(mat[x][y]);</span><br><span class="line">                    x++;</span><br><span class="line">                    y--; </span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">int</span> x = (i &lt; m ? i : m - <span class="number">1</span>);</span><br><span class="line">                <span class="type">int</span> y = (i &lt; m ? <span class="number">0</span> : i - m + <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">while</span> (x &gt;= <span class="number">0</span> &amp;&amp; y &lt; n) &#123;</span><br><span class="line">                    res.<span class="built_in">emplace_back</span>(mat[x][y]);</span><br><span class="line">                    x--;</span><br><span class="line">                    y++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在选择使用 <code>emplace_back</code> 还是 <code>push_back</code> 时，通常情况下，<code>emplace_back</code> 更好一些。这是因为 <code>emplace_back</code> 可以避免创建临时对象，从而提高了性能。</p><p>另外，<code>emplace_back</code> 也更加灵活，因为它允许你直接传递构造元素所需的参数，而不需要显式地创建对象。</p><p>总的来说，如果你需要向 <code>vector</code> 中添加新元素，通常情况下优先考虑使用 <code>emplace_back</code>。</p><p>二维数组变换行列长宽：566</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> m = mat.<span class="built_in">size</span>(), n = mat[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m * n; i++) &#123;</span><br><span class="line">     res[i / c][i % c] =mat[i / n][i % n]; </span><br><span class="line">     <span class="comment">//找到第i个数到底分别在数组的哪个位置</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>二维矩阵顺时针旋转（48）=<code>水平</code>翻转(竖直线对称翻转)+(沿)<code>主对角</code>线翻转</p><p><u>矩阵原地置换(73)</u>：用矩阵第一行和第一列代替标记行和列的两个标记数组，使得空间复杂度为$O(1)$，时间复杂度为$O(row*col)$.但这样会导致原数组的第一行和第一列被修改，无法记录它们是否原本包含 0。因此我们需要额外使用两个标记变量分别记录第一行和第一列是否原本包含 0。</p><p>   在实际代码中，我们首先预处理出两个标记变量，接着使用其他行与列去处理第一行与第一列，然后反过来使用第一行与第一列去更新其他行与列，最后使用两个标记变量更新第一行与第一列即可。</p><pre><code>我们可以对方法二进一步优化，只使用一个标记变量记录第一列是否原本存在 0。这样，第一列的第一个元素即可以标记第一行是否出现 0。但为了防止每一列的第一个元素被提前更新，我们需要从最后一行开始，倒序地处理矩阵元素。</code></pre><p><u>矩阵原地置换拓展(289)</u>：创建复合状态2，可以知道修改前是0，而之后变为1.常用于需要同步更新情况。</p><p>涉及到类：303</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">NumArray</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; sum;</span><br><span class="line">    <span class="built_in">NumArray</span>(vector&lt;<span class="type">int</span>&gt;&amp; nums) &#123; <span class="comment">//初始化sum数组</span></span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        sum.<span class="built_in">resize</span>(n + <span class="number">1</span>); <span class="comment">//注意</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            sum[i + <span class="number">1</span>] = sum[i] + nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">sumRange</span><span class="params">(<span class="type">int</span> left, <span class="type">int</span> right)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//错误：nums是临时数组，应该用sum</span></span><br><span class="line">        <span class="comment">// return accumulate(nums.begin() + left, nums.begin() + right, 0);</span></span><br><span class="line">        <span class="keyword">return</span> sum[right + <span class="number">1</span>] - sum[left];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>二维数组resize:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sums.<span class="built_in">resize</span>(m + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n + <span class="number">1</span>));</span><br></pre></td></tr></table></figure><p>二维数组定义：(创建n×n的数组，默认初始化所有元素为0)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">res</span>(n, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n));</span><br></pre></td></tr></table></figure><p>前缀/后缀之和/之积：238</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">productExceptSelf</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">res</span><span class="params">(nums.size())</span></span>;</span><br><span class="line">        res[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            res[i]=res[i<span class="number">-1</span>]*nums[i<span class="number">-1</span>];<span class="comment">//先用res存储前缀之积</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> r=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=nums.<span class="built_in">size</span>()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">            res[i]=res[i]*r;<span class="comment">//更新res,res[i]最终应为nums[i]的前缀之积×后缀之积</span></span><br><span class="line">            r*=nums[i];<span class="comment">//用R存储当前对应元素的后缀之积</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> leetcode刷题笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> leetcode </tag>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>0.常用的C++ STL用法</title>
      <link href="/posts/123456.html"/>
      <url>/posts/123456.html</url>
      
        <content type="html"><![CDATA[<p>转载自github.</p><p><strong>C++ 标准模板库 (STL, Standard Template Library)</strong>：包含一些常用数据结构与算法的模板的 C++ 软件库。其包含四个组件——算法 (Algorithms)、容器 (Containers)、仿函数 (Functors)、迭代器 (Iterators).</p><span id="more"></span><p>示例：</p><ul><li>算法：<code>sort(a.begin(), a.end())</code></li><li>容器：<code>priority_queue&lt;int&gt; pque</code></li><li>仿函数：<code>greater&lt;int&gt;()</code></li><li>迭代器：<code>vector&lt;int&gt;::iterator it = a.begin()</code></li></ul><h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1 前言"></a>1 前言</h1><p>STL 作为一个封装良好，性能合格的 C++ 标准库，在算法竞赛中运用极其常见。灵活且正确使用 STL 可以节省非常多解题时间，这一点不仅是由于可以直接调用，还是因为它封装良好，可以让代码的可读性变高，解题思路更清晰，调试过程 <del>往往</del> 更顺利。</p><p>不过 STL 毕竟使用了很多复杂的结构来实现丰富的功能，它的效率往往是比不上自己手搓针对特定题目的数据结构与算法的。因此，STL 的使用相当于使用更长的运行时间换取更高的编程效率。因此，在实际比赛中要权衡 STL 的利弊，不过这一点就得靠经验了。</p><p>接下来，我会分享在算法竞赛中常用的 STL 容器和算法，对于函数和迭代器，就不着重展开讲了。</p><h1 id="2-常用容器"><a href="#2-常用容器" class="headerlink" title="2 常用容器"></a>2 常用容器</h1><h2 id="2-1-内容总览"><a href="#2-1-内容总览" class="headerlink" title="2.1 内容总览"></a>2.1 内容总览</h2><p>打勾的是本次将会详细讲解的，加粗的是算法竞赛中有必要学习的。</p><ul><li><p>顺序容器</p><ul><li><p>[ ] <strong>array</strong></p></li><li><p>[x] <strong>vector</strong></p></li><li><p>[ ] <strong>deque</strong></p></li><li><p>[ ] forward_list</p></li><li><p>[ ] <strong>list</strong></p></li></ul></li><li><p>关联容器</p><ul><li>[x] <strong>set</strong></li><li>[x] <strong>map</strong></li><li>[ ] <strong>multiset</strong></li><li>[ ] <strong>multimap</strong></li></ul></li><li><p>无序关联容器</p><ul><li>[ ] <strong>unordered_set</strong></li><li>[ ] <strong>unordered_map</strong></li><li>[ ] <strong>unordered_multiset</strong></li><li>[ ] <strong>unordered_multimap</strong></li></ul></li><li><p>容器适配器</p><ul><li>[x] <strong>stack</strong></li><li>[x] <strong>queue</strong></li><li>[x] <strong>priority_queue</strong></li><li>[ ] flat_set</li><li>[ ] flat_map</li><li>[ ] flat_multiset</li><li>[ ] flat_multimap</li></ul></li><li><p>字符串</p><ul><li>[x] <strong>string</strong> (basic_string\<char\>)</li></ul></li><li><p>对与元组</p><ul><li>[x] <strong>pair</strong></li><li>[ ] <strong>tuple</strong></li></ul></li></ul><h2 id="2-2-向量-vector"><a href="#2-2-向量-vector" class="headerlink" title="2.2 向量 vector"></a>2.2 向量 <a href="https://zh.cppreference.com/w/cpp/container/vector">vector</a></h2><p><strong><code>#include &lt;vector&gt;</code></strong></p><p>连续的顺序的储存结构（和数组一样的类别），但是有长度可变的特性。</p><h3 id="2-2-1-常用方法"><a href="#2-2-1-常用方法" class="headerlink" title="2.2.1 常用方法"></a>2.2.1 常用方法</h3><h4 id="构造"><a href="#构造" class="headerlink" title="构造"></a>构造</h4><p><strong><code>vector&lt;类型&gt; arr(长度, [初值])</code></strong></p><p>时间复杂度：$O(n)$</p><p>常用的一维和二维数组构造示例，高维也是一样的（就是会有点长）.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; arr;         <span class="comment">// 构造int数组</span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">arr</span><span class="params">(<span class="number">100</span>)</span></span>;    <span class="comment">// 构造初始长100的int数组</span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">arr</span><span class="params">(<span class="number">100</span>, <span class="number">1</span>)</span></span>; <span class="comment">// 构造初始长100的int数组，初值为1</span></span><br><span class="line"></span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">mat</span>(<span class="number">100</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt; ());       <span class="comment">// 构造初始100行，不指定列数的二维数组</span></span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">mat</span>(<span class="number">100</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt; (<span class="number">666</span>, <span class="number">-1</span>)) <span class="comment">// 构造初始100行，初始666列的二维数组，初值为-1</span></span><br></pre></td></tr></table></figure><p>构造二维数组的奇葩写法，千万别用：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; arr[<span class="number">100</span>];         <span class="comment">// 正确，构造初始100行，不指定列数的二维数组，可用于链式前向星存图</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; arr[<span class="number">100</span>](<span class="number">100</span>, <span class="number">1</span>); <span class="comment">// 语法错误！</span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">arr</span><span class="params">(<span class="number">100</span>, <span class="number">1</span>)</span>[100]</span>; <span class="comment">// 语法错误！</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; arr[<span class="number">100</span>] &#123;&#123;<span class="number">100</span>, <span class="number">1</span>&#125;, 这里省略<span class="number">98</span>个 ,&#123;<span class="number">100</span>, <span class="number">1</span>&#125;&#125;; <span class="comment">// 正确但奇葩，使用列表初始化</span></span><br></pre></td></tr></table></figure><h4 id="尾接-amp-尾删"><a href="#尾接-amp-尾删" class="headerlink" title="尾接 &amp; 尾删"></a>尾接 &amp; 尾删</h4><ul><li><strong><code>.push_back(元素)</code></strong>：在 vector 尾接一个元素，数组长度 $+1$.</li><li><strong><code>.pop_back()</code></strong>：删除 vector 尾部的一个元素，数组长度 $-1$</li></ul><p>时间复杂度：均摊 $O(1)$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// init: arr = []</span></span><br><span class="line">arr.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line"><span class="comment">// after: arr = [1]</span></span><br><span class="line">arr.<span class="built_in">push_back</span>(<span class="number">2</span>);</span><br><span class="line"><span class="comment">// after: arr = [1, 2]</span></span><br><span class="line">arr.<span class="built_in">pop_back</span>();</span><br><span class="line"><span class="comment">// after: arr = [1]</span></span><br><span class="line">arr.<span class="built_in">pop_back</span>();</span><br><span class="line"><span class="comment">// after: arr = []</span></span><br></pre></td></tr></table></figure><h4 id="中括号运算符"><a href="#中括号运算符" class="headerlink" title="中括号运算符"></a>中括号运算符</h4><p>和一般数组一样的作用</p><p>时间复杂度：$O(1)$</p><h4 id="获取长度"><a href="#获取长度" class="headerlink" title="获取长度"></a>获取长度</h4><p><strong><code>.size()</code></strong></p><p>获取当前 vector 的长度</p><p>时间复杂度：$O(1)$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; arr.<span class="built_in">size</span>(); i++)</span><br><span class="line">    cout &lt;&lt; a[i] &lt;&lt; endl;</span><br></pre></td></tr></table></figure><h4 id="清空"><a href="#清空" class="headerlink" title="清空"></a>清空</h4><p><strong><code>.clear()</code></strong></p><p>清空 vector</p><p>时间复杂度：$O(n)$</p><h4 id="判空"><a href="#判空" class="headerlink" title="判空"></a>判空</h4><p><strong><code>.empty()</code></strong></p><p>如果是空返回 <code>true</code> 反之返回 <code>false</code>.</p><p>时间复杂度：$O(1)$</p><h4 id="改变长度"><a href="#改变长度" class="headerlink" title="改变长度"></a>改变长度</h4><p><strong><code>.resize(新长度, [默认值])</code></strong></p><p>修改 vector 的长度</p><ul><li>如果是缩短，则删除多余的值</li><li>如果是扩大，且指定了默认值，则新元素均为默认值<strong>（旧元素不变）</strong></li></ul><p>时间复杂度：$O(n)$</p><h3 id="2-2-2-适用情形"><a href="#2-2-2-适用情形" class="headerlink" title="2.2.2 适用情形"></a>2.2.2 适用情形</h3><p>一般情况 <code>vector</code> 可以替换掉普通数组，除非该题卡常。</p><p>有些情况普通数组没法解决：$n\times m$ 的矩阵，$1\leq n,m\leq 10^6$ 且 $n\times m \leq 10^6$</p><ul><li>如果用普通数组 <code>int mat[1000010][1000010]</code>，浪费内存，会导致 MLE。</li><li>如果使用 <code>vector&lt;vector&lt;int&gt;&gt; mat(n + 10, vector&lt;int&gt; (m + 10))</code>，完美解决该问题。</li></ul><p>另外，<code>vector</code> 的数据储存在堆空间中，不会爆栈。</p><h3 id="2-2-3-注意事项"><a href="#2-2-3-注意事项" class="headerlink" title="2.2.3 注意事项"></a>2.2.3 注意事项</h3><h4 id="提前指定长度"><a href="#提前指定长度" class="headerlink" title="提前指定长度"></a>提前指定长度</h4><p>如果长度已经确定，那么应当直接在构造函数指定长度，而不是一个一个 <code>.push_back()</code>. 因为 <code>vector</code> 额外内存耗尽后的重分配是有时间开销的，直接指定长度就不会出现重分配了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 优化前: 522ms</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; a;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1e8</span>; i++)</span><br><span class="line">    a.<span class="built_in">push_back</span>(i);</span><br><span class="line"><span class="comment">// 优化后: 259ms</span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(<span class="number">1e8</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; a.<span class="built_in">size</span>(); i++)</span><br><span class="line">    a[i] = i;</span><br></pre></td></tr></table></figure><h4 id="当心-size-t-溢出"><a href="#当心-size-t-溢出" class="headerlink" title="当心 size_t 溢出"></a>当心 size_t 溢出</h4><p>vector 获取长度的方法 <code>.size()</code> 返回值类型为 <code>size_t</code>，通常 OJ 平台使用的是 32 位编译器（有些平台例如 cf 可选 64 位），那么该类型范围为 $[0,2^{32})$.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(<span class="number">65536</span>)</span></span>;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> a = a.<span class="built_in">size</span>() * a.<span class="built_in">size</span>(); <span class="comment">// 直接溢出变成0了</span></span><br></pre></td></tr></table></figure><h2 id="2-3-栈-stack"><a href="#2-3-栈-stack" class="headerlink" title="2.3 栈 stack"></a>2.3 栈 <a href="https://zh.cppreference.com/w/cpp/container/stack">stack</a></h2><p><strong><code>#include &lt;stack&gt;</code></strong></p><p>通过二次封装双端队列 (deque) 容器，实现先进后出的栈数据结构。</p><h3 id="2-3-1-常用方法"><a href="#2-3-1-常用方法" class="headerlink" title="2.3.1 常用方法"></a>2.3.1 常用方法</h3><div class="table-container"><table><thead><tr><th>作用</th><th>用法</th><th>示例</th></tr></thead><tbody><tr><td>构造</td><td><code>stack&lt;类型&gt; stk</code></td><td><code>stack&lt;int&gt; stk;</code></td></tr><tr><td>进栈</td><td><code>.push(元素)</code></td><td><code>stk.push(1);</code></td></tr><tr><td>出栈</td><td><code>.pop()</code></td><td><code>stk.pop();</code></td></tr><tr><td>取栈顶</td><td><code>.top()</code></td><td><code>int a = stk.top();</code></td></tr><tr><td>查看大小 / 清空 / 判空</td><td>略</td><td>略</td></tr></tbody></table></div><h3 id="2-3-2-适用情形"><a href="#2-3-2-适用情形" class="headerlink" title="2.3.2 适用情形"></a>2.3.2 适用情形</h3><p>如果不卡常的话，就可以直接用它而不需要手写栈了。</p><p>另外，vector 也可以当栈用，vector 的 <code>.back()</code> 取尾部元素，就相当于取栈顶，<code>.push_back()</code> 相当于进栈，<code>.pop_back()</code> 相当于出栈。</p><h3 id="2-3-3-注意事项"><a href="#2-3-3-注意事项" class="headerlink" title="2.3.3 注意事项"></a>2.3.3 注意事项</h3><p>不可访问内部元素！<strong>下面都是错误用法</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; stk.<span class="built_in">size</span>(); i++)</span><br><span class="line">    cout &lt;&lt; stk[i] &lt;&lt; endl;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> ele : stk)</span><br><span class="line">    cout &lt;&lt; stk &lt;&lt; endl;</span><br></pre></td></tr></table></figure><h2 id="2-4-队列-queue"><a href="#2-4-队列-queue" class="headerlink" title="2.4 队列 queue"></a>2.4 队列 <a href="https://zh.cppreference.com/w/cpp/container/queue">queue</a></h2><p><strong><code>#include &lt;queue&gt;</code></strong></p><p>通过二次封装双端队列 (deque) 容器，实现先进先出的队列数据结构。</p><h3 id="2-4-1-常用方法"><a href="#2-4-1-常用方法" class="headerlink" title="2.4.1 常用方法"></a>2.4.1 常用方法</h3><div class="table-container"><table><thead><tr><th>作用</th><th>用法</th><th>示例</th></tr></thead><tbody><tr><td>构造</td><td><code>queue&lt;类型&gt; que</code></td><td><code>queue&lt;int&gt; que;</code></td></tr><tr><td>进队</td><td><code>.push(元素)</code></td><td><code>que.push(1);</code></td></tr><tr><td>出队</td><td><code>.pop()</code></td><td><code>que.pop();</code></td></tr><tr><td>取队首</td><td><code>.front()</code></td><td><code>int a = que.front();</code></td></tr><tr><td>取队尾</td><td><code>.back()</code></td><td><code>int a = que.back();</code></td></tr><tr><td>查看大小 / 清空 / 判空</td><td>略</td><td>略</td></tr></tbody></table></div><h3 id="2-4-2-适用情形"><a href="#2-4-2-适用情形" class="headerlink" title="2.4.2 适用情形"></a>2.4.2 适用情形</h3><p>如果不卡常的话，就可以直接用它而不需要手写队列了。</p><h3 id="2-4-3-注意事项"><a href="#2-4-3-注意事项" class="headerlink" title="2.4.3 注意事项"></a>2.4.3 注意事项</h3><p>不可访问内部元素！<strong>下面都是错误用法</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; que.<span class="built_in">size</span>(); i++)</span><br><span class="line">    cout &lt;&lt; que[i] &lt;&lt; endl;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> ele : que)</span><br><span class="line">    cout &lt;&lt; ele &lt;&lt; endl;</span><br></pre></td></tr></table></figure><h2 id="2-5-优先队列-priority-queue"><a href="#2-5-优先队列-priority-queue" class="headerlink" title="2.5 优先队列 priority_queue"></a>2.5 优先队列 <a href="https://zh.cppreference.com/w/cpp/container/priority_queue">priority_queue</a></h2><p><strong><code>#include &lt;queue&gt;</code></strong></p><p>提供常数时间的最大元素查找，对数时间的插入与提取，底层原理是二叉堆。</p><h3 id="2-5-1-常用方法"><a href="#2-5-1-常用方法" class="headerlink" title="2.5.1 常用方法"></a>2.5.1 常用方法</h3><h4 id="构造-1"><a href="#构造-1" class="headerlink" title="构造"></a>构造</h4><p><strong><code>priority_queue&lt;类型, 容器, 比较器&gt; pque</code></strong></p><ul><li>类型：要储存的数据类型</li><li>容器：储存数据的底层容器，默认为 <code>vector&lt;类型&gt;</code>，竞赛中保持默认即可</li><li>比较器：比较大小使用的比较器，默认为 <code>less&lt;类型&gt;</code>，可自定义</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">priority_queue&lt;<span class="type">int</span>&gt; pque1;                            <span class="comment">// 储存int的大顶堆</span></span><br><span class="line">priority_queue&lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;, greater&lt;<span class="type">int</span>&gt;&gt; pque2; <span class="comment">// 储存int的小顶堆</span></span><br></pre></td></tr></table></figure><blockquote><p>对于需要自定义比较器的情况，涉及一些初学时容易看迷糊的语法（重载小括号运算符 / lambda 表达式），在此就不展开讲了。如果想要了解，可以查阅 cppreference 中的代码示例。</p></blockquote><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><div class="table-container"><table><thead><tr><th>作用</th><th>用法</th><th>示例</th></tr></thead><tbody><tr><td>进堆</td><td><code>.push(元素)</code></td><td><code>que.push(1);</code></td></tr><tr><td>出堆</td><td><code>.pop()</code></td><td><code>que.pop();</code></td></tr><tr><td>取堆顶</td><td><code>.top()</code></td><td><code>int a = que.top();</code></td></tr><tr><td>查看大小 / 判空</td><td>略</td><td>略</td></tr></tbody></table></div><p>进出队复杂度 $O(\log n)$，取堆顶 $O(1)$.</p><h3 id="2-5-2-适用情形"><a href="#2-5-2-适用情形" class="headerlink" title="2.5.2 适用情形"></a>2.5.2 适用情形</h3><p>持续维护元素的有序性：每次向队列插入大小不定的元素，或者每次从队列里取出大小最小/最大的元素，元素数量 $n$，插入操作数量 $k$.</p><ul><li>每次插入后进行快速排序：$k\cdot n\log n$</li><li>使用优先队列维护：$k\cdot\log n$</li></ul><h3 id="2-5-3-注意事项"><a href="#2-5-3-注意事项" class="headerlink" title="2.5.3 注意事项"></a>2.5.3 注意事项</h3><h4 id="仅堆顶可读"><a href="#仅堆顶可读" class="headerlink" title="仅堆顶可读"></a>仅堆顶可读</h4><p>只可访问堆顶，其他元素都无法读取到。<strong>下面是错误用法：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cout &lt;&lt; pque[<span class="number">1</span>] &lt;&lt; endl;</span><br></pre></td></tr></table></figure><h4 id="所有元素不可写"><a href="#所有元素不可写" class="headerlink" title="所有元素不可写"></a>所有元素不可写</h4><p>堆中所有元素是不可修改的。<strong>下面是错误用法：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pque[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">pque.<span class="built_in">top</span>() = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>如果你恰好要修改的是堆顶元素，那么是可以完成的：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> tp = pque.<span class="built_in">top</span>();</span><br><span class="line">pque.<span class="built_in">pop</span>();</span><br><span class="line">pque.<span class="built_in">push</span>(tp + <span class="number">1</span>);</span><br></pre></td></tr></table></figure><h2 id="2-6-集合-set"><a href="#2-6-集合-set" class="headerlink" title="2.6 集合 set"></a>2.6 集合 <a href="https://zh.cppreference.com/w/cpp/container/set">set</a></h2><p><strong><code>#include &lt;set&gt;</code></strong></p><p>提供对数时间的插入、删除、查找的集合数据结构。底层原理是红黑树。</p><div class="table-container"><table><thead><tr><th>集合三要素</th><th>解释</th><th>set</th><th>multiset</th><th>unordered_set</th></tr></thead><tbody><tr><td>确定性</td><td>一个元素要么在集合中，要么不在</td><td>✔</td><td>✔</td><td>✔</td></tr><tr><td>互异性</td><td>一个元素仅可以在集合中出现一次</td><td>✔</td><td>❌（任意次）</td><td>✔</td></tr><tr><td>无序性</td><td>集合中的元素是没有顺序的</td><td>❌（从小到大）</td><td>❌（从小到大）</td><td>✔</td></tr></tbody></table></div><h3 id="2-6-1-常用方法"><a href="#2-6-1-常用方法" class="headerlink" title="2.6.1 常用方法"></a>2.6.1 常用方法</h3><h4 id="构造-2"><a href="#构造-2" class="headerlink" title="构造"></a>构造</h4><p><strong><code>set&lt;类型, 比较器&gt; st</code></strong></p><ul><li>类型：要储存的数据类型</li><li>比较器：比较大小使用的比较器，默认为 <code>less&lt;类型&gt;</code>，可自定义</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set&lt;<span class="type">int</span>&gt; st1;               <span class="comment">// 储存int的集合（从小到大）</span></span><br><span class="line">set&lt;<span class="type">int</span>, greater&lt;<span class="type">int</span>&gt;&gt; st2; <span class="comment">// 储存int的集合（从大到小）</span></span><br></pre></td></tr></table></figure><blockquote><p>对于需要自定义比较器的情况，涉及一些初学时容易看迷糊的语法（重载小括号运算符 / lambda 表达式），在此就不展开讲了。</p></blockquote><h4 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h4><p>可使用迭代器进行遍历：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (set&lt;<span class="type">int</span>&gt;::iterator it = st.<span class="built_in">begin</span>(); it != st.<span class="built_in">end</span>(); ++it)</span><br><span class="line">    cout &lt;&lt; *it &lt;&lt; endl;</span><br></pre></td></tr></table></figure><p>基于范围的循环（C++ 11）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> &amp;ele : st)</span><br><span class="line">    cout &lt;&lt; ele &lt;&lt; endl;</span><br></pre></td></tr></table></figure><h4 id="其他-1"><a href="#其他-1" class="headerlink" title="其他"></a>其他</h4><div class="table-container"><table><thead><tr><th>作用</th><th>用法</th><th>示例</th></tr></thead><tbody><tr><td>插入元素</td><td><code>.insert(元素)</code></td><td><code>st.insert(1);</code></td></tr><tr><td>删除元素</td><td><code>.erase(元素)</code></td><td><code>st.erase(2);</code></td></tr><tr><td>查找元素</td><td><code>.find(元素)</code></td><td><code>auto it = st.find(1);</code></td></tr><tr><td>判断元素是否存在</td><td><code>.count(元素)</code></td><td><code>st.count(3);</code></td></tr><tr><td>查看大小 / 清空 / 判空</td><td>略</td><td>略</td></tr></tbody></table></div><p>增删查时间复杂度均为 $O(\log n)$</p><h3 id="2-6-2-适用情形"><a href="#2-6-2-适用情形" class="headerlink" title="2.6.2 适用情形"></a>2.6.2 适用情形</h3><ul><li>元素去重：$[1,1,3,2,4,4]\to[1,2,3,4]$</li><li>维护顺序：$[1,5,3,7,9]\to[1,3,5,7,9]$</li><li>元素是否出现过：元素大小 $[-10^{18},10^{18}]$，元素数量 $10^6$，vis 数组无法实现，通过 set 可以完成。</li></ul><h3 id="2-6-3-注意事项"><a href="#2-6-3-注意事项" class="headerlink" title="2.6.3 注意事项"></a>2.6.3 注意事项</h3><h4 id="不存在下标索引"><a href="#不存在下标索引" class="headerlink" title="不存在下标索引"></a>不存在下标索引</h4><p>set 虽说可遍历，但仅可使用迭代器进行遍历，它不存在下标这一概念，无法通过下标访问到数据。<strong>下面是错误用法：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cout &lt;&lt; st[<span class="number">0</span>] &lt;&lt; endl;</span><br></pre></td></tr></table></figure><h4 id="元素只读"><a href="#元素只读" class="headerlink" title="元素只读"></a>元素只读</h4><p>set 的迭代器取到的元素是只读的（因为是 const 迭代器），不可修改其值。如果要改，需要先 erase 再 insert. <strong>下面是错误用法：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cout &lt;&lt; *st.<span class="built_in">begin</span>() &lt;&lt; endl; <span class="comment">// 正确。可读。</span></span><br><span class="line">*st.<span class="built_in">begin</span>() = <span class="number">1</span>;             <span class="comment">// 错误！不可写！</span></span><br></pre></td></tr></table></figure><h4 id="不可用迭代器计算下标"><a href="#不可用迭代器计算下标" class="headerlink" title="不可用迭代器计算下标"></a>不可用迭代器计算下标</h4><p>set 的迭代器不能像 vector 一样相减得到下标。<strong>下面是错误用法：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> it = st.<span class="built_in">find</span>(<span class="number">2</span>);      <span class="comment">// 正确，返回2所在位置的迭代器。</span></span><br><span class="line"><span class="type">int</span> idx = it - st.<span class="built_in">begin</span>(); <span class="comment">// 错误！不可相减得到下标。</span></span><br></pre></td></tr></table></figure><h2 id="2-7-映射-map"><a href="#2-7-映射-map" class="headerlink" title="2.7 映射 map"></a>2.7 映射 <a href="https://zh.cppreference.com/w/cpp/container/map">map</a></h2><p><strong><code>#include &lt;map&gt;</code></strong></p><p>提供对数时间的有序键值对结构。底层原理是红黑树。</p><p>映射：</p><script type="math/tex; mode=display">\begin{matrix}1&\to&2\\2&\to&2\\3&\to&1\\4&\to&5\\&\vdots\end{matrix}</script><div class="table-container"><table><thead><tr><th>性质</th><th>解释</th><th>map</th><th>multimap</th><th>unordered_map</th></tr></thead><tbody><tr><td>互异性</td><td>一个键仅可以在映射中出现一次</td><td>✔</td><td>❌（任意次）</td><td>✔</td></tr><tr><td>无序性</td><td>键是没有顺序的</td><td>❌（从小到大）</td><td>❌（从小到大）</td><td>✔</td></tr></tbody></table></div><h3 id="2-7-1-常用方法"><a href="#2-7-1-常用方法" class="headerlink" title="2.7.1 常用方法"></a>2.7.1 常用方法</h3><h4 id="构造-3"><a href="#构造-3" class="headerlink" title="构造"></a>构造</h4><p><strong><code>map&lt;键类型, 值类型, 比较器&gt; mp</code></strong></p><ul><li>键类型：要储存键的数据类型</li><li>值类型：要储存值的数据类型</li><li>比较器：键比较大小使用的比较器，默认为 <code>less&lt;类型&gt;</code>，可自定义</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; mp1;               <span class="comment">// int-&gt;int 的映射（键从小到大）</span></span><br><span class="line">map&lt;<span class="type">int</span>, <span class="type">int</span>, greater&lt;<span class="type">int</span>&gt;&gt; st2; <span class="comment">// int-&gt;int 的映射（键从大到小）</span></span><br></pre></td></tr></table></figure><blockquote><p>对于需要自定义比较器的情况，涉及一些初学时容易看迷糊的语法（重载小括号运算符 / lambda 表达式），在此就不展开讲了。</p></blockquote><h4 id="遍历-1"><a href="#遍历-1" class="headerlink" title="遍历"></a>遍历</h4><p>可使用迭代器进行遍历：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (map&lt;<span class="type">int</span>, <span class="type">int</span>&gt;::iterator it = mp.<span class="built_in">begin</span>(); it != mp.<span class="built_in">end</span>(); ++it)</span><br><span class="line">    cout &lt;&lt; it-&gt;first &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; it-&gt;second &lt;&lt; endl;</span><br></pre></td></tr></table></figure><p>基于范围的循环（C++ 11）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> &amp;pr : mp)</span><br><span class="line">    cout &lt;&lt; pr.first &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; pr.second &lt;&lt; endl;</span><br></pre></td></tr></table></figure><p>结构化绑定 + 基于范围的循环（C++17）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> &amp;[key, val] : mp)</span><br><span class="line">    cout &lt;&lt; key &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; val &lt;&lt; endl;</span><br></pre></td></tr></table></figure><h4 id="其他-2"><a href="#其他-2" class="headerlink" title="其他"></a>其他</h4><div class="table-container"><table><thead><tr><th>作用</th><th>用法</th><th>示例</th></tr></thead><tbody><tr><td>增 / 改 / 查元素</td><td>中括号</td><td><code>mp[1] = 2;</code></td></tr><tr><td>查元素（返回迭代器）</td><td><code>.find(元素)</code></td><td><code>auto it = mp.find(1);</code></td></tr><tr><td>删除元素</td><td><code>.erase(元素)</code></td><td><code>mp.erase(2);</code></td></tr><tr><td>判断元素是否存在</td><td><code>.count(元素)</code></td><td><code>mp.count(3);</code></td></tr><tr><td>查看大小 / 清空 / 判空</td><td>略</td><td>略</td></tr></tbody></table></div><p>增删改查时间复杂度均为 $O(\log n)$</p><h3 id="2-7-2-适用情形"><a href="#2-7-2-适用情形" class="headerlink" title="2.7.2 适用情形"></a>2.7.2 适用情形</h3><p>需要维护映射的场景可以使用：输入若干字符串，统计每种字符串的出现次数。(<code>map&lt;string, int&gt; mp</code>)</p><h3 id="2-7-3-注意事项"><a href="#2-7-3-注意事项" class="headerlink" title="2.7.3 注意事项"></a>2.7.3 注意事项</h3><h4 id="中括号访问时默认值"><a href="#中括号访问时默认值" class="headerlink" title="中括号访问时默认值"></a>中括号访问时默认值</h4><p>如果使用中括号访问 map 时对应的键不存在，那么会新增这个键，并且值为默认值，因此中括号会影响键的存在性。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">map&lt;<span class="type">char</span>, <span class="type">int</span>&gt; mp;</span><br><span class="line">cout &lt;&lt; mp.<span class="built_in">count</span>(<span class="string">&#x27;a&#x27;</span>) &lt;&lt; endl; <span class="comment">// 0</span></span><br><span class="line">mp[<span class="string">&#x27;a&#x27;</span>];                       <span class="comment">// 即使什么都没做，此时mp[&#x27;a&#x27;]=0已经插入了</span></span><br><span class="line">cout &lt;&lt; mp.<span class="built_in">count</span>(<span class="string">&#x27;a&#x27;</span>) &lt;&lt; endl; <span class="comment">// 1</span></span><br><span class="line">cout &lt;&lt; mp[<span class="string">&#x27;a&#x27;</span>] &lt;&lt; endl;       <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><h4 id="不可用迭代器计算下标-1"><a href="#不可用迭代器计算下标-1" class="headerlink" title="不可用迭代器计算下标"></a>不可用迭代器计算下标</h4><p>map 的迭代器不能像 vector 一样相减得到下标。<strong>下面是错误用法：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> it = mp.<span class="built_in">find</span>(<span class="string">&#x27;a&#x27;</span>);      <span class="comment">// 正确，返回2所在位置的迭代器。</span></span><br><span class="line"><span class="type">int</span> idx = it - mp.<span class="built_in">begin</span>();   <span class="comment">// 错误！不可相减得到下标。</span></span><br></pre></td></tr></table></figure><h2 id="2-8-字符串-string"><a href="#2-8-字符串-string" class="headerlink" title="2.8 字符串 string"></a>2.8 字符串 <a href="https://zh.cppreference.com/w/cpp/string">string</a></h2><p><strong><code>#include &lt;string&gt;</code></strong></p><p>顾名思义，就是储存字符串的。</p><h3 id="2-8-1-常用方法"><a href="#2-8-1-常用方法" class="headerlink" title="2.8.1 常用方法"></a>2.8.1 常用方法</h3><h4 id="构造-4"><a href="#构造-4" class="headerlink" title="构造"></a>构造</h4><p>构造函数：<code>string(长度, 初值)</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">string s1;           <span class="comment">// 构造字符串，为空</span></span><br><span class="line">string s2 = <span class="string">&quot;awa!&quot;</span>;  <span class="comment">// 构造字符串，并赋值awa!</span></span><br><span class="line"><span class="function">string <span class="title">s3</span><span class="params">(<span class="number">10</span>, <span class="string">&#x27;6&#x27;</span>)</span></span>;  <span class="comment">// 构造字符串，通过构造函数构造为6666666666</span></span><br></pre></td></tr></table></figure><h4 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h4><p>C++</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">string s;</span><br><span class="line">cin &gt;&gt; s;</span><br><span class="line">cout &lt;&lt; s;</span><br></pre></td></tr></table></figure><p>C</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">string s;</span><br><span class="line"><span class="type">char</span> buf[<span class="number">100</span>];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, &amp;buf);</span><br><span class="line">s = buf;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, s.<span class="built_in">c_str</span>());</span><br></pre></td></tr></table></figure><h4 id="其他-3"><a href="#其他-3" class="headerlink" title="其他"></a>其他</h4><div class="table-container"><table><thead><tr><th>作用</th><th>用法</th><th>示例</th></tr></thead><tbody><tr><td>修改、查询指定下标字符</td><td><code>[]</code></td><td><code>s[1] = &#39;a&#39;;</code></td></tr><tr><td>是否相同</td><td><code>==</code></td><td><code>if (s1 == s2) ...</code></td></tr><tr><td>字符串连接</td><td><code>+</code></td><td><code>string s = s1 + s2;</code></td></tr><tr><td>尾接字符串</td><td><code>+=</code></td><td><code>s += &quot;awa&quot;;</code></td></tr><tr><td>取子串</td><td><code>.substr(起始下标, 子串长度)</code></td><td><code>string sub = s.substr(2, 10);</code></td></tr><tr><td>查找字符串</td><td><code>.find(字符串, 起始下标)</code></td><td><code>int pos = s.find(&quot;awa&quot;);</code></td></tr></tbody></table></div><h4 id="数值与字符串互转（C-11）"><a href="#数值与字符串互转（C-11）" class="headerlink" title="数值与字符串互转（C++11）"></a>数值与字符串互转（C++11）</h4><div class="table-container"><table><thead><tr><th>源</th><th>目的</th><th>函数</th></tr></thead><tbody><tr><td>int / long long / float / double / long double</td><td>string</td><td>to_string()</td></tr><tr><td>string</td><td>int</td><td>stoi()</td></tr><tr><td>string</td><td>long long</td><td>stoll()</td></tr><tr><td>string</td><td>float</td><td>stof()</td></tr><tr><td>string</td><td>double</td><td>stod()</td></tr><tr><td>string</td><td>long double</td><td>stold()</td></tr></tbody></table></div><h3 id="2-8-2-适用情形"><a href="#2-8-2-适用情形" class="headerlink" title="2.8.2 适用情形"></a>2.8.2 适用情形</h3><p>非常好用！<del>建议直接把字符数组扔了，赶快投入 string 的怀抱。</del></p><h3 id="2-8-3-注意事项"><a href="#2-8-3-注意事项" class="headerlink" title="2.8.3 注意事项"></a>2.8.3 注意事项</h3><h4 id="尾接字符串一定要用"><a href="#尾接字符串一定要用" class="headerlink" title="尾接字符串一定要用 +="></a>尾接字符串一定要用 <code>+=</code></h4><p>string 的 += 运算符，将会在原字符串原地尾接字符串。而 + 了再 = 赋值，会先生成一个临时变量，在复制给 string.</p><p>通常字符串长度可以很长，如果使用 + 字符串很容易就 TLE 了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 优化前: 15139ms</span></span><br><span class="line">string s;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5e5</span>; i++)</span><br><span class="line">    s = s + <span class="string">&quot;a&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 优化后: &lt; 1ms (计时器显示0)</span></span><br><span class="line">string s;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5e5</span>; i++)</span><br><span class="line">    s += <span class="string">&quot;a&quot;</span>;</span><br></pre></td></tr></table></figure><h4 id="substr-方法的奇葩参数"><a href="#substr-方法的奇葩参数" class="headerlink" title=".substr() 方法的奇葩参数"></a><code>.substr()</code> 方法的奇葩参数</h4><p>一定要注意，C++ string 的取子串的第一个参数是<strong>子串起点下标</strong>，第二个参数是<strong>子串长度</strong>。</p><p>第二个参数不是子串终点！不是子串终点！要与 java 等其他语言区分开来。</p><h4 id="find-方法的复杂度"><a href="#find-方法的复杂度" class="headerlink" title=".find() 方法的复杂度"></a><code>.find()</code> 方法的复杂度</h4><p>该方法实现为暴力实现，时间复杂度为 $O(n^2)$.</p><p><del>不要幻想 STL 内置了个 $O(n)$ 的 KMP 算法</del></p><h2 id="2-9-二元组-pair"><a href="#2-9-二元组-pair" class="headerlink" title="2.9 二元组 pair"></a>2.9 二元组 <a href="https://zh.cppreference.com/w/cpp/utility/pair">pair</a></h2><p><strong><code>#include &lt;utility&gt;</code></strong></p><p>顾名思义，就是储存二元组的。</p><h3 id="2-9-1-常用方法"><a href="#2-9-1-常用方法" class="headerlink" title="2.9.1 常用方法"></a>2.9.1 常用方法</h3><h4 id="构造-5"><a href="#构造-5" class="headerlink" title="构造"></a>构造</h4><p><strong><code>pair&lt;第一个值类型, 第二个值类型&gt; pr</code></strong></p><ul><li>第一个值类型：要储存的第一个值的数据类型</li><li>第二个值类型：要储存的第二个值的数据类型</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; p1;</span><br><span class="line">pair&lt;<span class="type">int</span>, <span class="type">long</span> <span class="type">long</span>&gt; p2;</span><br><span class="line">pair&lt;<span class="type">char</span>, <span class="type">int</span>&gt; p3;</span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><h4 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h4><p>老式</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pair&lt;<span class="type">int</span>, <span class="type">char</span>&gt; pr = <span class="built_in">make_pair</span>(<span class="number">1</span>, <span class="string">&#x27;a&#x27;</span>);</span><br></pre></td></tr></table></figure><p>列表构造 C++11</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pair&lt;<span class="type">int</span>, <span class="type">char</span>&gt; pr = &#123;<span class="number">1</span>, <span class="string">&#x27;a&#x27;</span>&#125;;</span><br></pre></td></tr></table></figure><h4 id="取值"><a href="#取值" class="headerlink" title="取值"></a>取值</h4><p>直接取值</p><ul><li>取第一个值：<code>.first</code></li><li>取第二个值：<code>.second</code></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pair&lt;<span class="type">int</span>, <span class="type">char</span>&gt; pr = &#123;<span class="number">1</span>, <span class="string">&#x27;a&#x27;</span>&#125;;</span><br><span class="line"><span class="type">int</span> awa = pr.first;</span><br><span class="line"><span class="type">char</span> bwb = pr.second;</span><br></pre></td></tr></table></figure><p>结构化绑定 C++17</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pair&lt;<span class="type">int</span>, <span class="type">char</span>&gt; pr = &#123;<span class="number">1</span>, <span class="string">&#x27;a&#x27;</span>&#125;;</span><br><span class="line"><span class="keyword">auto</span> &amp;[awa, bwb] = pr;</span><br></pre></td></tr></table></figure><h4 id="判同"><a href="#判同" class="headerlink" title="判同"></a>判同</h4><p>直接用 <code>==</code> 运算符</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; p1 = &#123;<span class="number">1</span>, <span class="number">2</span>&#125;;</span><br><span class="line">pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; p2 = &#123;<span class="number">1</span>, <span class="number">3</span>&#125;;</span><br><span class="line"><span class="keyword">if</span> (p1 == p2) &#123; ... &#125; <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h3 id="2-9-2-适用场景"><a href="#2-9-2-适用场景" class="headerlink" title="2.9.2 适用场景"></a>2.9.2 适用场景</h3><p>所有需要二元组的场景均可使用，效率和自己定义结构体差不多。</p><h3 id="2-9-3-注意事项"><a href="#2-9-3-注意事项" class="headerlink" title="2.9.3 注意事项"></a>2.9.3 注意事项</h3><p>无</p><h1 id="3-迭代器简介"><a href="#3-迭代器简介" class="headerlink" title="3 迭代器简介"></a>3 迭代器简介</h1><h2 id="3-1-迭代器是什么？"><a href="#3-1-迭代器是什么？" class="headerlink" title="3.1 迭代器是什么？"></a>3.1 迭代器是什么？</h2><p>不搞抽象，直接举例。</p><p>对于一个 vector，我们可以用下标遍历：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; a.<span class="built_in">size</span>(); i++)</span><br><span class="line">    cout &lt;&lt; a[i] &lt;&lt; endl;</span><br></pre></td></tr></table></figure><p>我们同时也可以用迭代器来遍历：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (vector&lt;<span class="type">int</span>&gt;::iterator it = a.<span class="built_in">begin</span>(); it != a.<span class="built_in">end</span>(); ++it)</span><br><span class="line">    cout &lt;&lt; *it &lt;&lt; endl;</span><br></pre></td></tr></table></figure><ul><li><code>a.begin()</code> 是一个迭代器，指向的是第一个元素</li><li><code>a.end()</code> 是一个迭代器，指向的是最后一个元素<strong>再后面一位</strong></li><li>上述迭代器具有自增运算符，自增则迭代器向下一个元素移动</li><li>迭代器与指针相似，如果对它使用解引用运算符，即 <code>*it</code>，就能取到对应值了</li></ul><h2 id="3-2-为何需要迭代器？"><a href="#3-2-为何需要迭代器？" class="headerlink" title="3.2 为何需要迭代器？"></a>3.2 为何需要迭代器？</h2><p>很多数据结构并不是线性的（例如红黑树），对于非线性数据结构，下标是无意义的。无法使用下标来遍历整个数据结构。</p><p>迭代器的作用就是定义某个数据结构的遍历方式，通过迭代器的增减，代表遍历到的位置，通过迭代器便能成功遍历非线性结构了。</p><p>例如，set 的实现是红黑树，我们是没法用下标来访问元素的。但是通过迭代器，我们就能遍历 set 中的元素了：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (set&lt;<span class="type">int</span>&gt;::iterator it = st.<span class="built_in">begin</span>(); it != st.<span class="built_in">end</span>(); ++it)</span><br><span class="line">    cout &lt;&lt; *it &lt;&lt; endl;</span><br></pre></td></tr></table></figure><h2 id="3-3-迭代器用法"><a href="#3-3-迭代器用法" class="headerlink" title="3.3 迭代器用法"></a>3.3 迭代器用法</h2><p>对于 vector 容器，它的迭代器功能比较完整，以它举例：</p><ul><li><code>.begin()</code>：头迭代器</li><li><code>.end()</code>：尾迭代器</li><li><code>.rbegin()</code>：反向头迭代器</li><li><code>.rend()</code>：反向尾迭代器</li><li>迭代器 <code>+</code> 整型：将迭代器向后移动</li><li>迭代器 <code>-</code> 整型：将迭代器向前移动</li><li>迭代器 <code>++</code>：将迭代器向后移动 1 位</li><li>迭代器 <code>--</code>：将迭代器向前移动 1 位</li><li>迭代器 <code>-</code> 迭代器：两个迭代器的距离</li><li><code>prev(it)</code>：返回 it 的前一个迭代器</li><li><code>next(it)</code>：返回 it 的后一个迭代器</li></ul><p>对于其他容器，由于其结构特性，上面的功能不一定都有（例如 set 的迭代器是不能相减求距离的）</p><h2 id="3-4-常见问题"><a href="#3-4-常见问题" class="headerlink" title="3.4 常见问题"></a>3.4 常见问题</h2><p><strong><code>.end()</code> 和 <code>.rend()</code> 指向的位置是无意义的值</strong></p><p>对于一个长度为 10 的数组：<code>for (int i = 0; i &lt; 10; i++)</code>，第 10 位是不可访问的</p><p>对于一个长度为 10 的容器：<code>for (auto it = a.begin(); it != a.end(); ++it)</code>，.end 是不可访问的</p><p><strong>不同容器的迭代器功能可能不一样</strong></p><p>迭代器细化的话有正向、反向、双向，每个容器的迭代器支持的运算符也可能不同，因此不同容器的迭代器细节很有可能是不一样的。</p><p><strong>删除操作时需要警惕</strong></p><p>为什么 3 没删掉？</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; a&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it = a.<span class="built_in">begin</span>(); it != a.<span class="built_in">end</span>(); ++it)</span><br><span class="line">    <span class="keyword">if</span> (*it == <span class="number">2</span> || *it == <span class="number">3</span>)</span><br><span class="line">        a.<span class="built_in">erase</span>(it);</span><br><span class="line"><span class="comment">// a = [1, 3, 4]</span></span><br></pre></td></tr></table></figure><p>为啥 RE 了？</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; a&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it = a.<span class="built_in">begin</span>(); it != a.<span class="built_in">end</span>(); ++it)</span><br><span class="line">    <span class="keyword">if</span> (*it == <span class="number">4</span>)</span><br><span class="line">        a.<span class="built_in">erase</span>(it);</span><br></pre></td></tr></table></figure><center><b>建议：如无必要，别用迭代器操作容器。（遍历与访问没关系）</b></center><h1 id="4-常用算法"><a href="#4-常用算法" class="headerlink" title="4 常用算法"></a>4 常用算法</h1><h2 id="4-1-内容总览"><a href="#4-1-内容总览" class="headerlink" title="4.1 内容总览"></a>4.1 内容总览</h2><p>打勾的是本次将会详细讲解的，其他的是算法竞赛中建议学习的，不在下表列出的在比赛中基本用不到。</p><p>（很多函数的功能很简单，自己都能快速写出来，但是使用函数可以让代码可读性变得更高，这在比赛中是至关紧要的）</p><ul><li><p>算法库 Algorithm</p><ul><li>[ ] <code>count()</code></li><li>[ ] <code>find()</code></li><li>[ ] <code>fill()</code></li><li>[x] <a href="https://zh.cppreference.com/w/cpp/algorithm/swap"><code>swap()</code></a></li><li>[x] <a href="https://zh.cppreference.com/w/cpp/algorithm/reverse"><code>reverse()</code></a></li><li>[ ] <code>shuffle()</code> C++11</li><li>[x] <a href="https://zh.cppreference.com/w/cpp/algorithm/unique"><code>unique()</code></a></li><li>[x] <a href="https://zh.cppreference.com/w/cpp/algorithm/sort"><code>sort()</code></a></li><li>[x] <a href="https://zh.cppreference.com/w/cpp/algorithm/lower_bound"><code>lower_bound()</code></a> / <a href="https://zh.cppreference.com/w/cpp/algorithm/upper_bound"><code>upper_bound()</code></a></li><li>[x] <a href="https://zh.cppreference.com/w/cpp/algorithm/max"><code>max()</code></a> / <a href="https://zh.cppreference.com/w/cpp/algorithm/min"><code>min()</code></a></li><li>[ ] <code>max_element()</code> / <code>min_element()</code></li><li>[ ] <code>prev_permutation()</code> / <code>next_permutation()</code></li></ul></li><li><p>数学函数 cmath</p><ul><li>[x] <a href="https://zh.cppreference.com/w/cpp/numeric/math/fabs"><code>abs()</code></a></li><li>[x] <a href="https://zh.cppreference.com/w/cpp/numeric/math/exp"><code>exp()</code></a></li><li>[x] <a href="https://zh.cppreference.com/w/cpp/numeric/math/log"><code>log()</code></a> / <code>log10()</code> / <code>log2()</code></li><li>[x] <a href="https://zh.cppreference.com/w/cpp/numeric/math/pow"><code>pow()</code></a></li><li>[x] <a href="https://zh.cppreference.com/w/cpp/numeric/math/sqrt"><code>sqrt()</code></a></li><li>[ ] <code>sin()</code> / <code>cos()</code> / <code>tan()</code></li><li>[ ] <code>asin()</code> / <code>acos()</code> / <code>atan()</code></li><li>[ ] <code>sinh()</code> / <code>cosh()</code> / <code>tanh()</code></li><li>[ ] <code>asinh()</code> / <code>acosh()</code> / <code>atanh()</code> C++11</li><li>[x] <a href="https://zh.cppreference.com/w/cpp/numeric/math/ceil"><code>ceil()</code></a> / <a href="https://zh.cppreference.com/w/cpp/numeric/math/floor"><code>floor()</code></a></li><li>[x] <a href="https://zh.cppreference.com/w/cpp/numeric/math/round"><code>round()</code></a> C++11</li></ul></li><li><p>数值算法 numeric</p><ul><li>[ ] <code>iota()</code> C++11</li><li>[ ] <code>accumulate()</code></li><li>[x] <a href="https://zh.cppreference.com/w/cpp/numeric/gcd"><code>gcd()</code></a> C++17</li><li>[x] <a href="https://zh.cppreference.com/w/cpp/numeric/lcm"><code>lcm()</code></a> C++17</li></ul></li><li><p>伪随机数生成 random</p><ul><li>[ ] <code>mt19937</code></li><li>[ ] <code>random_device()</code></li></ul></li></ul><h2 id="4-2-swap"><a href="#4-2-swap" class="headerlink" title="4.2 swap()"></a>4.2 <code>swap()</code></h2><p>交换两个变量的值</p><p><strong>用法示例</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt; <span class="keyword">class</span> T &gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">( T&amp; a, T&amp; b )</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">0</span>, b = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">swap</span>(a, b);</span><br><span class="line"><span class="comment">// now a = 1, b = 0</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> arr[<span class="number">10</span>] &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;;</span><br><span class="line"><span class="built_in">swap</span>(arr[<span class="number">4</span>], arr[<span class="number">6</span>]);</span><br><span class="line"><span class="comment">// now arr = &#123;0, 1, 2, 3, 6, 5, 4, 7, 8, 9&#125;</span></span><br></pre></td></tr></table></figure><p><strong>注意事项</strong></p><p>这个 swap 参数是引用的，不需要像 C 语言一样取地址。</p><h2 id="4-3-sort"><a href="#4-3-sort" class="headerlink" title="4.3 sort()"></a>4.3 <code>sort()</code></h2><p>使用快速排序给一个可迭代对象排序</p><p><strong>用法示例</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt; <span class="keyword">class</span> RandomIt, <span class="keyword">class</span> Compare &gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sort</span><span class="params">( RandomIt first, RandomIt last, Compare comp )</span></span>;</span><br></pre></td></tr></table></figure><p>默认排序从小到大</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; arr&#123;<span class="number">1</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">0</span>&#125;;</span><br><span class="line"><span class="built_in">sort</span>(arr.<span class="built_in">begin</span>(), arr.<span class="built_in">end</span>());</span><br><span class="line"><span class="comment">// arr = [0, 1, 1, 1, 8, 9, 9]</span></span><br></pre></td></tr></table></figure><p>如果要从大到小，则需要传比较器进去。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; arr&#123;<span class="number">1</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">0</span>&#125;;</span><br><span class="line"><span class="built_in">sort</span>(arr.<span class="built_in">begin</span>(), arr.<span class="built_in">end</span>(), <span class="built_in">greater</span>&lt;<span class="type">int</span>&gt;());</span><br><span class="line"><span class="comment">// arr = [9, 9, 8, 1, 1, 1, 0]</span></span><br></pre></td></tr></table></figure><p>如果需要完成特殊比较，则需要手写比较器。</p><p>比较器函数返回值是 bool 类型，传参是需要比较的两个元素。记我们定义的该比较操作为 $\star$：</p><ul><li>若 $a\star b$，则比较器函数应当返回 <code>true</code></li><li>若 $a\not\star b$，则比较器函数应当返回 <code>false</code></li></ul><p><strong>注意：</strong>如果 $a=b$，比较器函数必须返回 <code>false</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; a, pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a.second != b.second)</span><br><span class="line">        <span class="keyword">return</span> a.second &lt; b.second;</span><br><span class="line">    <span class="keyword">return</span> a.first &gt; b.first;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; arr&#123;&#123;<span class="number">1</span>, <span class="number">9</span>&#125;, &#123;<span class="number">2</span>, <span class="number">9</span>&#125;, &#123;<span class="number">8</span>, <span class="number">1</span>&#125;, &#123;<span class="number">0</span>, <span class="number">0</span>&#125;&#125;;</span><br><span class="line">    <span class="built_in">sort</span>(arr.<span class="built_in">begin</span>(), arr.<span class="built_in">end</span>(), cmp);</span><br><span class="line">    <span class="comment">// arr = [(0, 0), (8, 1), (2, 9), (1, 9)]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-4-lower-bound-upper-bound"><a href="#4-4-lower-bound-upper-bound" class="headerlink" title="4.4 lower_bound() / upper_bound()"></a>4.4 <code>lower_bound()</code> / <code>upper_bound()</code></h2><p>在<strong>已升序排序</strong>的元素中，应用二分查找检索指定元素，返回对应元素迭代器位置。<strong>找不到则返回尾迭代器。</strong></p><ul><li><code>lower_bound()</code>: 寻找 $\geq x$ 的第一个元素的位置</li><li><code>upper_bound()</code>: 寻找 $&gt;x$ 的第一个元素的位置</li></ul><p>怎么找 $\leq x$ / $&lt; x$ 的第一个元素呢？</p><ul><li>$&gt;x$ 的第一个元素的前一个元素（如果有）便是 $\leq x$ 的第一个元素</li><li>$\geq x$ 的第一个元素的前一个元素（如果有）便是 $&lt;x$ 的第一个元素</li></ul><p>返回的是迭代器，如何转成下标索引呢？减去头迭代器即可。</p><p><strong>用法示例</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt; <span class="keyword">class</span> ForwardIt, <span class="keyword">class</span> T &gt;</span></span><br><span class="line"><span class="function">ForwardIt <span class="title">lower_bound</span><span class="params">( ForwardIt first, ForwardIt last, <span class="type">const</span> T&amp; value )</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; arr&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">9</span>&#125;;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;::iterator it = <span class="built_in">lower_bound</span>(arr.<span class="built_in">begin</span>(), arr.<span class="built_in">end</span>(), <span class="number">7</span>);</span><br><span class="line"><span class="type">int</span> idx = it - arr.<span class="built_in">begin</span>();</span><br><span class="line"><span class="comment">// idx = 4</span></span><br></pre></td></tr></table></figure><p>我们通常写成一行：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; arr&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">9</span>&#125;;</span><br><span class="line">idx = <span class="built_in">lower_bound</span>(arr.<span class="built_in">begin</span>(), arr.<span class="built_in">end</span>(), <span class="number">7</span>) - arr.<span class="built_in">begin</span>(); <span class="comment">// 4</span></span><br><span class="line">idx = <span class="built_in">lower_bound</span>(arr.<span class="built_in">begin</span>(), arr.<span class="built_in">end</span>(), <span class="number">8</span>) - arr.<span class="built_in">begin</span>(); <span class="comment">// 4</span></span><br><span class="line">idx = <span class="built_in">upper_bound</span>(arr.<span class="built_in">begin</span>(), arr.<span class="built_in">end</span>(), <span class="number">7</span>) - arr.<span class="built_in">begin</span>(); <span class="comment">// 4</span></span><br><span class="line">idx = <span class="built_in">upper_bound</span>(arr.<span class="built_in">begin</span>(), arr.<span class="built_in">end</span>(), <span class="number">8</span>) - arr.<span class="built_in">begin</span>(); <span class="comment">// 5</span></span><br></pre></td></tr></table></figure><h2 id="4-5-reverse"><a href="#4-5-reverse" class="headerlink" title="4.5 reverse()"></a>4.5 <code>reverse()</code></h2><p>反转一个可迭代对象的元素顺序</p><p><strong>用法示例</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt; <span class="keyword">class</span> BidirIt &gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">reverse</span><span class="params">( BidirIt first, BidirIt last )</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">arr</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line"><span class="built_in">iota</span>(arr.<span class="built_in">begin</span>(), arr.<span class="built_in">end</span>(), <span class="number">1</span>);</span><br><span class="line"><span class="comment">// 1, 2, 3, 4, 5, 6, 7, 8, 9, 10</span></span><br><span class="line"><span class="built_in">reverse</span>(arr.<span class="built_in">begin</span>(), arr.<span class="built_in">end</span>());</span><br><span class="line"><span class="comment">// 10, 9, 8, 7, 6, 5, 4, 3, 2, 1</span></span><br></pre></td></tr></table></figure><h2 id="4-6-max-min"><a href="#4-6-max-min" class="headerlink" title="4.6 max() / min()"></a>4.6 <code>max()</code> / <code>min()</code></h2><p>返回最大值 / 最小值的<strong>数值</strong></p><p><strong>用法示例</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> mx = <span class="built_in">max</span>(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">// 2</span></span><br><span class="line"><span class="type">int</span> mn = <span class="built_in">min</span>(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>在 C++11 之后，可以使用列表构造语法传入一个列表，这样就能一次性给多个元素找最大值而不用套娃了：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Before C++11</span></span><br><span class="line"><span class="type">int</span> mx = <span class="built_in">max</span>(<span class="built_in">max</span>(<span class="number">1</span>, <span class="number">2</span>), <span class="built_in">max</span>(<span class="number">3</span>, <span class="number">4</span>)); <span class="comment">// 4</span></span><br><span class="line"><span class="type">int</span> mn = <span class="built_in">min</span>(<span class="built_in">min</span>(<span class="number">1</span>, <span class="number">2</span>), <span class="built_in">min</span>(<span class="number">3</span>, <span class="number">4</span>)); <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// After C++11</span></span><br><span class="line"><span class="type">int</span> mx = <span class="built_in">max</span>(&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;); <span class="comment">// 4</span></span><br><span class="line"><span class="type">int</span> mn = <span class="built_in">min</span>(&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><h2 id="4-7-unique"><a href="#4-7-unique" class="headerlink" title="4.7 unique()"></a>4.7 <code>unique()</code></h2><p>消除数组的重复<strong>相邻</strong>元素，数组长度不变，但是有效数据缩短，返回的是有效数据位置的结尾迭代器。</p><p>例如：$[1,1,4,5,1,4]\to[1,4,5,1,4,\underline?]$，下划线位置为返回的迭代器指向。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt; <span class="keyword">class</span> ForwardIt &gt;</span></span><br><span class="line"><span class="function">ForwardIt <span class="title">unique</span><span class="params">( ForwardIt first, ForwardIt last )</span></span>;</span><br></pre></td></tr></table></figure><p><strong>用法示例</strong></p><p>单独使用 unique 并不能达成去重效果，因为它只消除<strong>相邻</strong>的重复元素。但是如果序列有序，那么它就能去重了。</p><p>但是它去重后，序列尾部会产生一些无效数据：$[1,1,2,4,4,4,5]\to[1,2,4,5,\underline?,?,?]$，为了删掉这些无效数据，我们需要结合 erase.</p><p>最终，给 vector 去重的写法便是：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; arr&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">4</span>&#125;;</span><br><span class="line"><span class="built_in">sort</span>(arr.<span class="built_in">begin</span>(), arr.<span class="built_in">end</span>());</span><br><span class="line">arr.<span class="built_in">erase</span>(<span class="built_in">unique</span>(arr.<span class="built_in">begin</span>(), arr.<span class="built_in">end</span>()), arr.<span class="built_in">end</span>());</span><br></pre></td></tr></table></figure><h2 id="4-8-数学函数"><a href="#4-8-数学函数" class="headerlink" title="4.8 数学函数"></a>4.8 数学函数</h2><p>所有函数参数均支持 <code>int</code> / <code>long long</code> / <code>float</code> / <code>double</code> / <code>long double</code></p><div class="table-container"><table><thead><tr><th>公式</th><th>示例</th></tr></thead><tbody><tr><td>$f(x)=\lvert x\rvert$</td><td><code>abs(-1.0)</code></td></tr><tr><td>$f(x)=e^x$</td><td><code>exp(2)</code></td></tr><tr><td>$f(x)=\ln x$</td><td><code>log(3)</code></td></tr><tr><td>$f(x,y)=x^y$</td><td><code>pow(2, 3)</code></td></tr><tr><td>$f(x)=\sqrt x$</td><td><code>sqrt(2)</code></td></tr><tr><td>$f(x)=\lceil x\rceil$</td><td><code>ceil(2.1)</code></td></tr><tr><td>$f(x)=\lfloor x\rfloor$</td><td><code>floor(2.1)</code></td></tr><tr><td>$f(x)=\left<x\right>$</td><td><code>rount(2.1)</code></td></tr></tbody></table></div><p><strong>注意事项</strong></p><p>由于浮点误差，有些的数学函数的行为可能与预期不符，导致 WA。如果你的操作数都是整型，那么用下面的写法会更稳妥。</p><blockquote><p>原文地址：<a href="https://codeforces.com/blog/entry/107717">https://codeforces.com/blog/entry/107717</a></p></blockquote><ul><li>$\lfloor\frac{a}{b}\rfloor$<ul><li>别用：<code>floor(1.0 * a / b)</code></li><li>要用：<code>a / b</code></li></ul></li><li>$\lceil\frac{a}{b}\rceil$<ul><li>别用：<code>ceil(1.0 * a / b)</code></li><li>要用：<code>(a + b - 1) / b</code>  （$\lceil\frac{a}{b}\rceil=\lfloor\frac{a+b-1}{b}\rfloor$）</li></ul></li><li>$\lfloor\sqrt a\rfloor$<ul><li>别用：<code>(int) sqrt(a)</code></li><li>要用：二分查找 <a href="https://io.zouht.com/7.html">https://io.zouht.com/7.html</a></li></ul></li><li>$a^b$<ul><li>别用：<code>pow(a, b)</code></li><li>要用：快速幂 <a href="https://io.zouht.com/18.html">https://io.zouht.com/18.html</a></li></ul></li><li>$\lfloor\log_2 a\rfloor$<ul><li>别用：<code>log2(a)</code></li><li>要用：<code>__lg</code> （不规范，但是这是竞赛）/ <code>bit_width</code>（C++20 可用）</li></ul></li></ul><h2 id="4-9-gcd-lcm"><a href="#4-9-gcd-lcm" class="headerlink" title="4.9 gcd() / lcm()"></a>4.9 <code>gcd()</code> / <code>lcm()</code></h2><p>（C++17）返回最大公因数 / 最小公倍数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> x = <span class="built_in">gcd</span>(<span class="number">8</span>, <span class="number">12</span>); <span class="comment">// 4</span></span><br><span class="line"><span class="type">int</span> y = <span class="built_in">lcm</span>(<span class="number">8</span>, <span class="number">12</span>); <span class="comment">// 24</span></span><br></pre></td></tr></table></figure><p>如果不是 C++17，但是是 GNU 编译器（g++），那么可以用内置函数 <code>__gcd()</code>.</p><p>当然，<code>gcd</code> / <code>lcm</code> 函数也挺好写，直接写也行（欧几里得算法）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">gcd</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!b)</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">gcd</span>(b, a % b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lcm</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a / <span class="built_in">gcd</span>(a, b) * b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> leetcode刷题笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STL </tag>
            
            <tag> C++ </tag>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>欢迎来到本站</title>
      <link href="/posts/9b94e219.html"/>
      <url>/posts/9b94e219.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title></title>
      <link href="/manifest.json"/>
      <url>/manifest.json</url>
      
        <content type="html"><![CDATA[{"name":"SumikiruのBlog","short_name":"SumikiruのBlog","theme_color":"#d9f8ff","background_color":"#d9f8ff","display":"standalone","scope":"/","start_url":"/","icons":[{"src":"/images/siteicon/16.png","sizes":"16x16","type":"image/png"},{"src":"/images/siteicon/32.png","sizes":"32x32","type":"image/png"},{"src":"/images/siteicon/48.png","sizes":"48x48","type":"image/png"},{"src":"/images/siteicon/64.png","sizes":"64x64","type":"image/png"},{"src":"/images/siteicon/128.png","sizes":"128x128","type":"image/png"},{"src":"/images/siteicon/144.png","sizes":"144x144","type":"image/png"},{"src":"/images/siteicon/256.png","sizes":"256x256","type":"image/png"},{"src":"/images/siteicon/512.png","sizes":"512x512","type":"image/png","purpose":"maskable"}],"splash_pages":null}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>分类</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/clock.min.css"/>
      <url>/css/clock.min.css</url>
      
        <content type="html"><![CDATA[@font-face {    font-family: UnidreamLED;    src: url(https://cdn.cbd.int/anzhiyu-blog@1.1.6/fonts/UnidreamLED.ttf);    font-display: swap}@font-face {    font-family: RedditMono;    src: url(https://fonts.gstatic.com/s/redditmono/v1/oPWL_kRmmu4oQ88oo13o4-rLRjs.woff2);    font-display: swap}.card-clock-location,.card-clock-windDir,span.card-clock-weather {    font-family: ZhuZiAYuanJWD}span.temp {    font-family: UnidreamLED}#hexo_electric_clock {    padding: 20px}.card-clock {    padding: 0 !important}.card-background {    height: 153px;    margin: 15px;    border-radius: 8px;    box-shadow: inset 0 0 4px 2px rgb(145 148 154 / 40%);    z-index: 2}.clock-row {    font-family: UnidreamLED;    font-weight: 400;    color: #000;    display: flex;    justify-content: space-between;    flex-wrap: nowrap;    white-space: nowrap}.card-clock-clockdate,.card-clock-ip {    text-align: left}.card-clock-location,.card-clock-weather {    text-align: center}.card-clock-dackorlight,.card-clock-humidity {    text-align: right}.card-clock-time {    flex: 1;    font-family: RedditMono;    font-size: 38px;    text-align: center;    line-height: 1.5}[data-theme=dark] .card-background {    background-color: #212121}[data-theme=dark] .clock-row {    color: #fff}@font-face {    font-family: qweather-icons;    src: url(fonts/qweather-icons.woff2?5bb5b475709c49961682eda055eb3dc5) format("woff2"), url(fonts/qweather-icons.woff?5bb5b475709c49961682eda055eb3dc5) format("woff"), url(fonts/qweather-icons.ttf?5bb5b475709c49961682eda055eb3dc5) format("truetype")}[class*=" qi-"]::before,[class^=qi-]::before {    display: inline-block;    font-family: qweather-icons !important;    font-style: normal;    font-weight: 400 !important;    font-variant: normal;    text-transform: none;    line-height: 1;    vertical-align: -.125em;    -webkit-font-smoothing: antialiased;    -moz-osx-font-smoothing: grayscale}@media screen and (min-width:900px) {    .card-clock-humidity {        display: block    }}@media screen and (max-width:1086px) {    .card-clock-humidity {        display: none    }}.qi-100::before {    content: "\f101"}.qi-101::before {    content: "\f102"}.qi-102::before {    content: "\f103"}.qi-103::before {    content: "\f104"}.qi-104::before {    content: "\f105"}.qi-150::before {    content: "\f106"}.qi-151::before {    content: "\f107"}.qi-152::before {    content: "\f108"}.qi-153::before {    content: "\f109"}.qi-300::before {    content: "\f10a"}.qi-301::before {    content: "\f10b"}.qi-302::before {    content: "\f10c"}.qi-303::before {    content: "\f10d"}.qi-304::before {    content: "\f10e"}.qi-305::before {    content: "\f10f"}.qi-306::before {    content: "\f110"}.qi-307::before {    content: "\f111"}.qi-308::before {    content: "\f112"}.qi-309::before {    content: "\f113"}.qi-310::before {    content: "\f114"}.qi-311::before {    content: "\f115"}.qi-312::before {    content: "\f116"}.qi-313::before {    content: "\f117"}.qi-314::before {    content: "\f118"}.qi-315::before {    content: "\f119"}.qi-316::before {    content: "\f11a"}.qi-317::before {    content: "\f11b"}.qi-318::before {    content: "\f11c"}.qi-350::before {    content: "\f11d"}.qi-351::before {    content: "\f11e"}.qi-399::before {    content: "\f11f"}.qi-400::before {    content: "\f120"}.qi-401::before {    content: "\f121"}.qi-402::before {    content: "\f122"}.qi-403::before {    content: "\f123"}.qi-404::before {    content: "\f124"}.qi-405::before {    content: "\f125"}.qi-406::before {    content: "\f126"}.qi-407::before {    content: "\f127"}.qi-408::before {    content: "\f128"}.qi-409::before {    content: "\f129"}.qi-410::before {    content: "\f12a"}.qi-456::before {    content: "\f12b"}.qi-457::before {    content: "\f12c"}.qi-499::before {    content: "\f12d"}.qi-500::before {    content: "\f12e"}.qi-501::before {    content: "\f12f"}.qi-502::before {    content: "\f130"}.qi-503::before {    content: "\f131"}.qi-504::before {    content: "\f132"}.qi-507::before {    content: "\f133"}.qi-508::before {    content: "\f134"}.qi-509::before {    content: "\f135"}.qi-510::before {    content: "\f136"}.qi-511::before {    content: "\f137"}.qi-512::before {    content: "\f138"}.qi-513::before {    content: "\f139"}.qi-514::before {    content: "\f13a"}.qi-515::before {    content: "\f13b"}.qi-800::before {    content: "\f13c"}.qi-801::before {    content: "\f13d"}.qi-802::before {    content: "\f13e"}.qi-803::before {    content: "\f13f"}.qi-804::before {    content: "\f140"}.qi-805::before {    content: "\f141"}.qi-806::before {    content: "\f142"}.qi-807::before {    content: "\f143"}.qi-900::before {    content: "\f144"}.qi-901::before {    content: "\f145"}.qi-999::before {    content: "\f146"}.qi-1001::before {    content: "\f147"}.qi-1002::before {    content: "\f148"}.qi-1003::before {    content: "\f149"}.qi-1004::before {    content: "\f14a"}.qi-1005::before {    content: "\f14b"}.qi-1006::before {    content: "\f14c"}.qi-1007::before {    content: "\f14d"}.qi-1008::before {    content: "\f14e"}.qi-1009::before {    content: "\f14f"}.qi-1010::before {    content: "\f150"}.qi-1011::before {    content: "\f151"}.qi-1012::before {    content: "\f152"}.qi-1013::before {    content: "\f153"}.qi-1014::before {    content: "\f154"}.qi-1015::before {    content: "\f155"}.qi-1016::before {    content: "\f156"}.qi-1017::before {    content: "\f157"}.qi-1018::before {    content: "\f158"}.qi-1019::before {    content: "\f159"}.qi-1020::before {    content: "\f15a"}.qi-1021::before {    content: "\f15b"}.qi-1022::before {    content: "\f15c"}.qi-1023::before {    content: "\f15d"}.qi-1024::before {    content: "\f15e"}.qi-1025::before {    content: "\f15f"}.qi-1026::before {    content: "\f160"}.qi-1027::before {    content: "\f161"}.qi-1028::before {    content: "\f162"}.qi-1029::before {    content: "\f163"}.qi-1030::before {    content: "\f164"}.qi-1031::before {    content: "\f165"}.qi-1032::before {    content: "\f166"}.qi-1033::before {    content: "\f167"}.qi-1034::before {    content: "\f168"}.qi-1035::before {    content: "\f169"}.qi-1036::before {    content: "\f16a"}.qi-1037::before {    content: "\f16b"}.qi-1038::before {    content: "\f16c"}.qi-1039::before {    content: "\f16d"}.qi-1040::before {    content: "\f16e"}.qi-1041::before {    content: "\f16f"}.qi-1042::before {    content: "\f170"}.qi-1043::before {    content: "\f171"}.qi-1044::before {    content: "\f172"}.qi-1045::before {    content: "\f173"}.qi-1046::before {    content: "\f174"}.qi-1047::before {    content: "\f175"}.qi-1048::before {    content: "\f176"}.qi-1049::before {    content: "\f177"}.qi-1050::before {    content: "\f178"}.qi-1051::before {    content: "\f179"}.qi-1052::before {    content: "\f17a"}.qi-1053::before {    content: "\f17b"}.qi-1054::before {    content: "\f17c"}.qi-1055::before {    content: "\f17d"}.qi-1056::before {    content: "\f17e"}.qi-1057::before {    content: "\f17f"}.qi-1058::before {    content: "\f180"}.qi-1059::before {    content: "\f181"}.qi-1061::before {    content: "\f182"}.qi-1064::before {    content: "\f183"}.qi-1101::before {    content: "\f184"}.qi-1302::before {    content: "\f185"}.qi-1402::before {    content: "\f186"}.qi-1601::before {    content: "\f187"}.qi-1602::before {    content: "\f188"}.qi-1603::before {    content: "\f189"}.qi-1604::before {    content: "\f18a"}.qi-1605::before {    content: "\f18b"}.qi-1606::before {    content: "\f18c"}.qi-1607::before {    content: "\f18d"}.qi-2001::before {    content: "\f18e"}.qi-2002::before {    content: "\f18f"}.qi-2003::before {    content: "\f190"}.qi-2004::before {    content: "\f191"}.qi-2005::before {    content: "\f192"}.qi-2006::before {    content: "\f193"}.qi-2007::before {    content: "\f194"}.qi-2008::before {    content: "\f195"}.qi-2009::before {    content: "\f196"}.qi-2010::before {    content: "\f197"}.qi-2011::before {    content: "\f198"}.qi-2012::before {    content: "\f199"}.qi-2013::before {    content: "\f19a"}.qi-2014::before {    content: "\f19b"}.qi-2015::before {    content: "\f19c"}.qi-2016::before {    content: "\f19d"}.qi-2017::before {    content: "\f19e"}.qi-2018::before {    content: "\f19f"}.qi-2019::before {    content: "\f1a0"}.qi-2020::before {    content: "\f1a1"}.qi-2021::before {    content: "\f1a2"}.qi-2022::before {    content: "\f1a3"}.qi-2023::before {    content: "\f1a4"}.qi-2024::before {    content: "\f1a5"}.qi-2025::before {    content: "\f1a6"}.qi-2026::before {    content: "\f1a7"}.qi-2027::before {    content: "\f1a8"}.qi-2028::before {    content: "\f1a9"}.qi-9998::before {    content: "\f1aa"}.qi-9999::before {    content: "\f1ab"}.qi-100-fill::before {    content: "\f1ac"}.qi-101-fill::before {    content: "\f1ad"}.qi-102-fill::before {    content: "\f1ae"}.qi-103-fill::before {    content: "\f1af"}.qi-104-fill::before {    content: "\f1b0"}.qi-150-fill::before {    content: "\f1b1"}.qi-151-fill::before {    content: "\f1b2"}.qi-152-fill::before {    content: "\f1b3"}.qi-153-fill::before {    content: "\f1b4"}.qi-300-fill::before {    content: "\f1b5"}.qi-301-fill::before {    content: "\f1b6"}.qi-302-fill::before {    content: "\f1b7"}.qi-303-fill::before {    content: "\f1b8"}.qi-304-fill::before {    content: "\f1b9"}.qi-305-fill::before {    content: "\f1ba"}.qi-306-fill::before {    content: "\f1bb"}.qi-307-fill::before {    content: "\f1bc"}.qi-308-fill::before {    content: "\f1bd"}.qi-309-fill::before {    content: "\f1be"}.qi-310-fill::before {    content: "\f1bf"}.qi-311-fill::before {    content: "\f1c0"}.qi-312-fill::before {    content: "\f1c1"}.qi-313-fill::before {    content: "\f1c2"}.qi-314-fill::before {    content: "\f1c3"}.qi-315-fill::before {    content: "\f1c4"}.qi-316-fill::before {    content: "\f1c5"}.qi-317-fill::before {    content: "\f1c6"}.qi-318-fill::before {    content: "\f1c7"}.qi-350-fill::before {    content: "\f1c8"}.qi-351-fill::before {    content: "\f1c9"}.qi-399-fill::before {    content: "\f1ca"}.qi-400-fill::before {    content: "\f1cb"}.qi-401-fill::before {    content: "\f1cc"}.qi-402-fill::before {    content: "\f1cd"}.qi-403-fill::before {    content: "\f1ce"}.qi-404-fill::before {    content: "\f1cf"}.qi-405-fill::before {    content: "\f1d0"}.qi-406-fill::before {    content: "\f1d1"}.qi-407-fill::before {    content: "\f1d2"}.qi-408-fill::before {    content: "\f1d3"}.qi-409-fill::before {    content: "\f1d4"}.qi-410-fill::before {    content: "\f1d5"}.qi-456-fill::before {    content: "\f1d6"}.qi-457-fill::before {    content: "\f1d7"}.qi-499-fill::before {    content: "\f1d8"}.qi-500-fill::before {    content: "\f1d9"}.qi-501-fill::before {    content: "\f1da"}.qi-502-fill::before {    content: "\f1db"}.qi-503-fill::before {    content: "\f1dc"}.qi-504-fill::before {    content: "\f1dd"}.qi-507-fill::before {    content: "\f1de"}.qi-508-fill::before {    content: "\f1df"}.qi-509-fill::before {    content: "\f1e0"}.qi-510-fill::before {    content: "\f1e1"}.qi-511-fill::before {    content: "\f1e2"}.qi-512-fill::before {    content: "\f1e3"}.qi-513-fill::before {    content: "\f1e4"}.qi-514-fill::before {    content: "\f1e5"}.qi-515-fill::before {    content: "\f1e6"}.qi-900-fill::before {    content: "\f1e7"}.qi-901-fill::before {    content: "\f1e8"}.qi-999-fill::before {    content: "\f1e9"}.qi-sunny::before {    content: "\f101"}.qi-cloudy::before {    content: "\f102"}.qi-few-clouds::before {    content: "\f103"}.qi-partly-cloudy::before {    content: "\f104"}.qi-overcast::before {    content: "\f105"}.qi-clear-night::before {    content: "\f106"}.qi-cloudy-night::before {    content: "\f107"}.qi-few-clouds-night::before {    content: "\f108"}.qi-partly-cloudy-night::before {    content: "\f109"}.qi-shower-rain::before {    content: "\f10a"}.qi-heavy-shower-rain::before {    content: "\f10b"}.qi-thundershower::before {    content: "\f10c"}.qi-heavy-thunderstorm::before {    content: "\f10d"}.qi-thundershower-with-hail::before {    content: "\f10e"}.qi-light-rain::before {    content: "\f10f"}.qi-moderate-rain::before {    content: "\f110"}.qi-heavy-rain::before {    content: "\f111"}.qi-extreme-rain::before {    content: "\f112"}.qi-drizzle-rain::before {    content: "\f113"}.qi-storm::before {    content: "\f114"}.qi-heavy-storm::before {    content: "\f115"}.qi-severe-storm::before {    content: "\f116"}.qi-freezing-rain::before {    content: "\f117"}.qi-light-to-moderate-rain::before {    content: "\f118"}.qi-moderate-to-heavy-rain::before {    content: "\f119"}.qi-heavy-rain-to-storm::before {    content: "\f11a"}.qi-storm-to-heavy-storm::before {    content: "\f11b"}.qi-heavy-to-severe-storm::before {    content: "\f11c"}.qi-shower-rain-night::before {    content: "\f11d"}.qi-heavy-shower-rain-night::before {    content: "\f11e"}.qi-rain::before {    content: "\f11f"}.qi-light-snow::before {    content: "\f120"}.qi-moderate-snow::before {    content: "\f121"}.qi-heavy-snow::before {    content: "\f122"}.qi-snowstorm::before {    content: "\f123"}.qi-sleet::before {    content: "\f124"}.qi-rain-and-snow::before {    content: "\f125"}.qi-shower-snow::before {    content: "\f126"}.qi-snow-flurry::before {    content: "\f127"}.qi-light-to-moderate-snow::before {    content: "\f128"}.qi-moderate-to-heavy-snow::before {    content: "\f129"}.qi-heavy-snow-to-snowstorm::before {    content: "\f12a"}.qi-shower-snow-night::before {    content: "\f12b"}.qi-snow-flurry-night::before {    content: "\f12c"}.qi-snow::before {    content: "\f12d"}.qi-mist::before {    content: "\f12e"}.qi-foggy::before {    content: "\f12f"}.qi-haze::before {    content: "\f130"}.qi-sand::before {    content: "\f131"}.qi-dust::before {    content: "\f132"}.qi-duststorm::before {    content: "\f133"}.qi-sandstorm::before {    content: "\f134"}.qi-dense-fog::before {    content: "\f135"}.qi-strong-fog::before {    content: "\f136"}.qi-moderate-haze::before {    content: "\f137"}.qi-heavy-haze::before {    content: "\f138"}.qi-severe-haze::before {    content: "\f139"}.qi-heavy-fog::before {    content: "\f13a"}.qi-extra-heavy-fog::before {    content: "\f13b"}.qi-new-moon::before {    content: "\f13c"}.qi-waxing-crescent::before {    content: "\f13d"}.qi-first-quarter::before {    content: "\f13e"}.qi-waxing-gibbous::before {    content: "\f13f"}.qi-full-moon::before {    content: "\f140"}.qi-waning-gibbous::before {    content: "\f141"}.qi-last-quarter::before {    content: "\f142"}.qi-waning-crescent::before {    content: "\f143"}.qi-hot::before {    content: "\f144"}.qi-cold::before {    content: "\f145"}.qi-unknown::before {    content: "\f146"}.qi-typhoon::before {    content: "\f147"}.qi-tornado::before {    content: "\f148"}.qi-rainstorm::before {    content: "\f149"}.qi-snow-storm::before {    content: "\f14a"}.qi-cold-wave::before {    content: "\f14b"}.qi-gale::before {    content: "\f14c"}.qi-sandstorm-warning::before {    content: "\f14d"}.qi-low-temperature-freeze::before {    content: "\f14e"}.qi-high-temperature::before {    content: "\f14f"}.qi-heat-wave::before {    content: "\f150"}.qi-dry-hot-air::before {    content: "\f151"}.qi-downburst::before {    content: "\f152"}.qi-avalanche::before {    content: "\f153"}.qi-lightning::before {    content: "\f154"}.qi-hail::before {    content: "\f155"}.qi-frost::before {    content: "\f156"}.qi-heavy-fog-warning::before {    content: "\f157"}.qi-low-level-wind-shearl::before {    content: "\f158"}.qi-haze-warning::before {    content: "\f159"}.qi-thunder-gust::before {    content: "\f15a"}.qi-road-icing::before {    content: "\f15b"}.qi-drought::before {    content: "\f15c"}.qi-gale-at-sea::before {    content: "\f15d"}.qi-heat-stroke::before {    content: "\f15e"}.qi-wildfire::before {    content: "\f15f"}.qi-grassland-fire::before {    content: "\f160"}.qi-freeze::before {    content: "\f161"}.qi-space-weather::before {    content: "\f162"}.qi-heavy-air-pollution::before {    content: "\f163"}.qi-low-temperature-rain-and-snow::before {    content: "\f164"}.qi-strong-convection::before {    content: "\f165"}.qi-ozone::before {    content: "\f166"}.qi-heavy-snow-warning::before {    content: "\f167"}.qi-cold-warning::before {    content: "\f168"}.qi-continuous-rain::before {    content: "\f169"}.qi-waterlogging::before {    content: "\f16a"}.qi-geological-hazard::before {    content: "\f16b"}.qi-heavy-rainfall::before {    content: "\f16c"}.qi-severely-falling-temperature::before {    content: "\f16d"}.qi-snow-disaster::before {    content: "\f16e"}.qi-wildfire-grassland::before {    content: "\f16f"}.qi-medical-meteorology::before {    content: "\f170"}.qi-thunderstorm::before {    content: "\f171"}.qi-school-closure::before {    content: "\f172"}.qi-factory-closure::before {    content: "\f173"}.qi-maritime-risk::before {    content: "\f174"}.qi-spring-dust::before {    content: "\f175"}.qi-falling-temperature::before {    content: "\f176"}.qi-typhoon-and-rainstorm::before {    content: "\f177"}.qi-severe-cold::before {    content: "\f178"}.qi-sand-dust::before {    content: "\f179"}.qi-sea-thunderstorms::before {    content: "\f17a"}.qi-sea-fog::before {    content: "\f17b"}.qi-sea-thunder::before {    content: "\f17c"}.qi-sea-typhoon::before {    content: "\f17d"}.qi-low-temperature::before {    content: "\f17e"}.qi-road-ice-and-snow::before {    content: "\f17f"}.qi-thunderstorm-and-gale::before {    content: "\f180"}.qi-continuous-low-temperature::before {    content: "\f181"}.qi-strong-dust::before {    content: "\f182"}.qi-short-lived-heavy-shower-rain::before {    content: "\f183"}.qi-flood::before {    content: "\f184"}.qi-mudflow::before {    content: "\f185"}.qi-storm-surge::before {    content: "\f186"}.qi-very-hot-weather::before {    content: "\f187"}.qi-strong-monsoon-signal::before {    content: "\f188"}.qi-landslip::before {    content: "\f189"}.qi-tropical-cyclone::before {    content: "\f18a"}.qi-fire-danger::before {    content: "\f18b"}.qi-flooding-in-the-northern-new-territories::before {    content: "\f18c"}.qi-cold-weather::before {    content: "\f18d"}.qi-wind::before {    content: "\f18e"}.qi-snow-ice::before {    content: "\f18f"}.qi-fog::before {    content: "\f190"}.qi-coastal-event::before {    content: "\f191"}.qi-forest-fire::before {    content: "\f192"}.qi-rain-warning::before {    content: "\f193"}.qi-rain-flood::before {    content: "\f194"}.qi-freezing-rain-icing::before {    content: "\f195"}.qi-ground-frost::before {    content: "\f196"}.qi-dust-raising-winds::before {    content: "\f197"}.qi-strong-surface-winds::before {    content: "\f198"}.qi-hot-day::before {    content: "\f199"}.qi-warm-night::before {    content: "\f19a"}.qi-cold-day::before {    content: "\f19b"}.qi-thunderstorm-and-lightning::before {    content: "\f19c"}.qi-hailstorm::before {    content: "\f19d"}.qi-sea-area-warning::before {    content: "\f19e"}.qi-fishermen-warning::before {    content: "\f19f"}.qi-low-humidity::before {    content: "\f1a0"}.qi-accumulated-rain::before {    content: "\f1a1"}.qi-hazardous-surf-warning::before {    content: "\f1a2"}.qi-marine-wind-warning::before {    content: "\f1a3"}.qi-road-weather-alert::before {    content: "\f1a4"}.qi-thunder-rain::before {    content: "\f1a5"}.qi-thunder-rain-and-fog::before {    content: "\f1a6"}.qi-damaging-winds::before {    content: "\f1a7"}.qi-veld-fire-conditions::before {    content: "\f1a8"}.qi-weather-advisory::before {    content: "\f1a9"}.qi-severe-weather-warning::before {    content: "\f1aa"}.qi-warning-default::before {    content: "\f1ab"}.qi-sunny-fill::before {    content: "\f1ac"}.qi-cloudy-fill::before {    content: "\f1ad"}.qi-few-clouds-fill::before {    content: "\f1ae"}.qi-partly-cloudy-fill::before {    content: "\f1af"}.qi-overcast-fill::before {    content: "\f1b0"}.qi-clear-night-fill::before {    content: "\f1b1"}.qi-cloudy-night-fill::before {    content: "\f1b2"}.qi-few-clouds-night-fill::before {    content: "\f1b3"}.qi-partly-cloudy-night-fill::before {    content: "\f1b4"}.qi-shower-rain-fill::before {    content: "\f1b5"}.qi-heavy-shower-rain-fill::before {    content: "\f1b6"}.qi-thundershower-fill::before {    content: "\f1b7"}.qi-heavy-thunderstorm-fill::before {    content: "\f1b8"}.qi-thundershower-with-hail-fill::before {    content: "\f1b9"}.qi-light-rain-fill::before {    content: "\f1ba"}.qi-moderate-rain-fill::before {    content: "\f1bb"}.qi-heavy-rain-fill::before {    content: "\f1bc"}.qi-extreme-rain-fill::before {    content: "\f1bd"}.qi-drizzle-rain-fill::before {    content: "\f1be"}.qi-storm-fill::before {    content: "\f1bf"}.qi-heavy-storm-fill::before {    content: "\f1c0"}.qi-severe-storm-fill::before {    content: "\f1c1"}.qi-freezing-rain-fill::before {    content: "\f1c2"}.qi-light-to-moderate-rain-fill::before {    content: "\f1c3"}.qi-moderate-to-heavy-rain-fill::before {    content: "\f1c4"}.qi-heavy-rain-to-storm-fill::before {    content: "\f1c5"}.qi-storm-to-heavy-storm-fill::before {    content: "\f1c6"}.qi-heavy-to-severe-storm-fill::before {    content: "\f1c7"}.qi-shower-rain-night-fill::before {    content: "\f1c8"}.qi-heavy-shower-rain-night-fill::before {    content: "\f1c9"}.qi-rain-fill::before {    content: "\f1ca"}.qi-light-snow-fill::before {    content: "\f1cb"}.qi-moderate-snow-fill::before {    content: "\f1cc"}.qi-heavy-snow-fill::before {    content: "\f1cd"}.qi-snowstorm-fill::before {    content: "\f1ce"}.qi-sleet-fill::before {    content: "\f1cf"}.qi-rain-and-snow-fill::before {    content: "\f1d0"}.qi-shower-snow-fill::before {    content: "\f1d1"}.qi-snow-flurry-fill::before {    content: "\f1d2"}.qi-light-to-moderate-snow-fill::before {    content: "\f1d3"}.qi-moderate-to-heavy-snow-fill::before {    content: "\f1d4"}.qi-heavy-snow-to-snowstorm-fill::before {    content: "\f1d5"}.qi-shower-snow-night-fill::before {    content: "\f1d6"}.qi-snow-flurry-night-fill::before {    content: "\f1d7"}.qi-snow-fill::before {    content: "\f1d8"}.qi-mist-fill::before {    content: "\f1d9"}.qi-foggy-fill::before {    content: "\f1da"}.qi-haze-fill::before {    content: "\f1db"}.qi-sand-fill::before {    content: "\f1dc"}.qi-dust-fill::before {    content: "\f1dd"}.qi-duststorm-fill::before {    content: "\f1de"}.qi-sandstorm-fill::before {    content: "\f1df"}.qi-dense-fog-fill::before {    content: "\f1e0"}.qi-strong-fog-fill::before {    content: "\f1e1"}.qi-moderate-haze-fill::before {    content: "\f1e2"}.qi-heavy-haze-fill::before {    content: "\f1e3"}.qi-severe-haze-fill::before {    content: "\f1e4"}.qi-heavy-fog-fill::before {    content: "\f1e5"}.qi-extra-heavy-fog-fill::before {    content: "\f1e6"}.qi-hot-fill::before {    content: "\f1e7"}.qi-cold-fill::before {    content: "\f1e8"}.qi-unknown-fill::before {    content: "\f1e9"}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/custom.css"/>
      <url>/css/custom.css</url>
      
        <content type="html"><![CDATA[/* @font-face {  font-family: Candyhome;  src: url(https://npm.elemecdn.com/anzhiyu-blog@1.1.6/fonts/Candyhome.ttf);  font-display: swap;  font-weight: lighter;} */@font-face {    font-family: ZhuZiAYuanJWD;    src: url(https://npm.elemecdn.com/anzhiyu-blog@1.1.6/fonts/ZhuZiAWan.woff2);    font-display: swap;    font-weight: lighter;}div#menus {    font-family: "ZhuZiAYuanJWD";}h1#site-title {    font-family: ZhuZiAYuanJWD;    font-size: 3em !important;}a.article-title,a.blog-slider__title,a.categoryBar-list-link,h1.post-title {    font-family: ZhuZiAYuanJWD;}.iconfont {    font-family: "iconfont" !important;    font-size: 3em;    /* 可以定义图标大小 */    font-style: normal;    -webkit-font-smoothing: antialiased;    -moz-osx-font-smoothing: grayscale;}/* 时间轴生肖icon */svg.icon {    /* 这里定义svg.icon，避免和Butterfly自带的note标签冲突 */    width: 1em;    height: 1em;    /* width和height定义图标的默认宽度和高度*/    vertical-align: -0.15em;    fill: currentColor;    overflow: hidden;}.icon-zhongbiao::before {    color: #f7c768;}/* bilibli番剧插件 */#article-container .bangumi-tab.bangumi-active {    background: var(--anzhiyu-theme);    color: var(--anzhiyu-ahoverbg);    border-radius: 10px;}a.bangumi-tab:hover {    text-decoration: none !important;}.bangumi-button:hover {    background: var(--anzhiyu-theme) !important;    border-radius: 10px !important;    color: var(--anzhiyu-ahoverbg) !important;}a.bangumi-button.bangumi-nextpage:hover {    text-decoration: none !important;}.bangumi-button {    padding: 5px 10px !important;}a.bangumi-tab {    padding: 5px 10px !important;}svg.icon.faa-tada {    font-size: 1.1em;}.bangumi-info-item {    border-right: 1px solid #f2b94b;}.bangumi-info-item span {    color: #f2b94b;}.bangumi-info-item em {    color: #f2b94b;}/* 解决artitalk的图标问题 */#uploadSource>svg {    width: 1.19em;    height: 1.5em;}/*top-img黑色透明玻璃效果移除，不建议加，除非你执着于完全一图流或者背景图对比色明显 */#page-header:not(.not-top-img):before {    background-color: transparent !important;}/* 首页文章卡片 */#recent-posts>.recent-post-item {    background: rgba(255, 255, 255, 0.9);}/* 首页侧栏卡片 */#aside-content .card-widget {    background: rgba(255, 255, 255, 0.9);}/* 文章页面正文背景 */div#post {    background: rgba(255, 255, 255, 0.9);}/* 分页页面 */div#page {    background: rgba(255, 255, 255, 0.9);}/* 归档页面 */div#archive {    background: rgba(255, 255, 255, 0.9);}/* 标签页面 */div#tag {    background: rgba(255, 255, 255, 0.9);}/* 分类页面 */div#category {    background: rgba(255, 255, 255, 0.9);}/*夜间模式伪类遮罩层透明*/[data-theme="dark"] #recent-posts>.recent-post-item {    background: #121212;}[data-theme="dark"] .card-widget {    background: #121212 !important;}[data-theme="dark"] div#post {    background: #121212 !important;}[data-theme="dark"] div#tag {    background: #121212 !important;}[data-theme="dark"] div#archive {    background: #121212 !important;}[data-theme="dark"] div#page {    background: #121212 !important;}[data-theme="dark"] div#category {    background: #121212 !important;}[data-theme="dark"] div#category {    background: transparent !important;}/* 页脚透明 */#footer {    background: transparent !important;}/* 头图透明 */#page-header {    background: transparent !important;}#rightside>div>button {    border-radius: 5px;}/* 滚动条 */::-webkit-scrollbar {    width: 10px;    height: 10px;}::-webkit-scrollbar-thumb {    background-color: #3b70fc;    border-radius: 2em;}::-webkit-scrollbar-corner {    background-color: transparent;}::-moz-selection {    color: #fff;    background-color: #3b70fc;}/* 音乐播放器 *//* .aplayer .aplayer-lrc {    display: none !important;  } */.aplayer.aplayer-fixed.aplayer-narrow .aplayer-body {    left: -66px !important;    transition: all 0.3s;    /* 默认情况下缩进左侧66px，只留一点箭头部分 */}.aplayer.aplayer-fixed.aplayer-narrow .aplayer-body:hover {    left: 0 !important;    transition: all 0.3s;    /* 鼠标悬停是左侧缩进归零，完全显示按钮 */}.aplayer.aplayer-fixed {    z-index: 999999 !important;}/* 评论框  */.vwrap {    box-shadow: 2px 2px 5px #bbb;    background: rgba(255, 255, 255, 0.3);    border-radius: 8px;    padding: 30px;    margin: 30px 0px 30px 0px;}/* 设置评论框 */.vcard {    box-shadow: 2px 2px 5px #bbb;    background: rgba(255, 255, 255, 0.3);    border-radius: 8px;    padding: 30px;    margin: 30px 0px 0px 0px;}/* md网站下划线 */#article-container a:hover {    text-decoration: none !important;}#article-container #hpp_talk p img {    display: inline;}/* 404页面 */#error-wrap {    position: absolute;    top: 40%;    right: 0;    left: 0;    margin: 0 auto;    padding: 0 1rem;    max-width: 1000px;    transform: translate(0, -50%);}#error-wrap .error-content {    display: flex;    flex-direction: row;    justify-content: center;    align-items: center;    margin: 0 1rem;    height: 18rem;    border-radius: 8px;    background: var(--card-bg);    box-shadow: var(--card-box-shadow);    transition: all 0.3s;}#error-wrap .error-content .error-img {    box-flex: 1;    flex: 1;    height: 100%;    border-top-left-radius: 8px;    border-bottom-left-radius: 8px;    background-color: #3b70fc;    background-position: center;    background-size: cover;}#error-wrap .error-content .error-info {    box-flex: 1;    flex: 1;    padding: 0.5rem;    text-align: center;    font-size: 14px;    font-family: Titillium Web, "PingFang SC", "Hiragino Sans GB", "Microsoft JhengHei", "Microsoft YaHei", sans-serif;}#error-wrap .error-content .error-info .error_title {    margin-top: -4rem;    font-size: 9em;}#error-wrap .error-content .error-info .error_subtitle {    margin-top: -3.5rem;    word-break: break-word;    font-size: 1.6em;}#error-wrap .error-content .error-info a {    display: inline-block;    margin-top: 0.5rem;    padding: 0.3rem 1.5rem;    background: var(--btn-bg);    color: var(--btn-color);}#body-wrap.error .aside-list {    display: flex;    flex-direction: row;    flex-wrap: nowrap;    bottom: 0px;    position: absolute;    padding: 1rem;    width: 100%;    overflow: scroll;}#body-wrap.error .aside-list .aside-list-group {    display: flex;    flex-direction: row;    flex-wrap: nowrap;    max-width: 1200px;    margin: 0 auto;}#body-wrap.error .aside-list .aside-list-item {    padding: 0.5rem;}#body-wrap.error .aside-list .aside-list-item img {    width: 100%;    object-fit: cover;    border-radius: 12px;}#body-wrap.error .aside-list .aside-list-item .thumbnail {    overflow: hidden;    width: 230px;    height: 143px;    background: var(--anzhiyu-card-bg);    display: flex;}#body-wrap.error .aside-list .aside-list-item .content .title {    -webkit-line-clamp: 2;    overflow: hidden;    display: -webkit-box;    -webkit-box-orient: vertical;    line-height: 1.5;    justify-content: center;    align-items: flex-end;    align-content: center;    padding-top: 0.5rem;    color: white;}#body-wrap.error .aside-list .aside-list-item .content time {    display: none;}/* 代码框主题 */#article-container figure.highlight {    border-radius: 10px;}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/ali_font.js"/>
      <url>/js/ali_font.js</url>
      
        <content type="html"><![CDATA[window._iconfont_svg_string_4494647='<svg><symbol id="icon-plane" viewBox="0 0 1048 1024"><path d="M615 692.199l54.446 51.45-245.185 259.621V654.885h74.927V814.83z" fill="#333333" ></path><path d="M424.26 654.885v-29.271L968.955 61.315l53.897 52.05-534.178 553.409-12.313-11.889z" fill="#999999" ></path><path d="M1046.378 19.806L894.851 845.824 18.956 539.948 1046.353 19.806zM209.87 527.236L836.933 746.27l108.494-591.347L209.895 527.31z" fill="#333333" ></path></symbol><symbol id="icon-a-haotianqitaiyang" viewBox="0 0 1146 1024"><path d="M418.449468 418.449468m-230.528002 0a230.528002 230.528002 0 1 0 461.056005 0 230.528002 230.528002 0 1 0-461.056005 0Z" fill="#FFD500" ></path><path d="M418.449468 129.672928a19.768721 19.768721 0 0 1-19.768721-19.768721V19.768721a19.768721 19.768721 0 0 1 39.537443 0v90.130543a19.768721 19.768721 0 0 1-19.768722 19.773664zM200.276917 220.045638a19.739068 19.739068 0 0 1-13.981429-5.787293L122.561131 150.519045a19.768721 19.768721 0 0 1 27.957914-27.957914l63.734358 63.734357a19.768721 19.768721 0 0 1-13.976486 33.75015zM109.904207 438.21819H19.768721a19.768721 19.768721 0 0 1 0-39.537443h90.135486a19.768721 19.768721 0 0 1 0 39.537443zM136.542559 720.120157a19.768721 19.768721 0 0 1-13.981428-33.745208l63.734357-63.734357a19.768721 19.768721 0 0 1 27.957915 27.952972l-63.734358 63.734357a19.709415 19.709415 0 0 1-13.976486 5.792236zM418.449468 836.898936a19.768721 19.768721 0 0 1-19.768721-19.768721V726.99473a19.768721 19.768721 0 0 1 39.537443 0v90.130543a19.768721 19.768721 0 0 1-19.768722 19.773663zM700.346493 720.120157a19.729184 19.729184 0 0 1-13.976486-5.792236l-63.724473-63.734357a19.768721 19.768721 0 1 1 27.952972-27.952972l63.724473 63.734357a19.768721 19.768721 0 0 1-13.976486 33.745208zM817.125273 438.21819H726.99473a19.768721 19.768721 0 0 1 0-39.537443h90.130543a19.768721 19.768721 0 0 1 0 39.537443z" fill="#6E6E96" ></path><path d="M415.039364 184.516303c-127.315508 0-230.52306 103.207552-230.523061 230.528003s103.207552 230.532945 230.523061 230.532945 230.532945-103.212494 230.532944-230.532945-103.217437-230.528002-230.532944-230.528003z m-9.370374 421.864515c-114.609162 0-207.522153-92.917933-207.522153-207.522153s92.912991-207.522153 207.522153-207.522153 207.536979 92.917933 207.536979 207.522153-92.927817 207.522153-207.536979 207.522153z" fill="#E69900" opacity=".46" ></path><path d="M432.168961 642.251163c-116.027568 0-210.082202-94.054634-210.082203-210.087144 0-116.027568 94.059576-210.082202 210.082203-210.082203 116.022626 0 210.082202 94.054634 210.082202 210.082203 0 13.813394-1.368984 27.285778-3.919149 40.357844a230.809707 230.809707 0 0 0 7.23041-57.482499c0-127.32045-103.20261-230.532945-230.528002-230.532945-127.315508 0-230.52306 103.207552-230.523061 230.528003s103.207552 230.532945 230.523061 230.532944c19.847796 0 39.107473-2.51557 57.482499-7.23041-13.05724 2.545223-26.539508 3.914207-40.34796 3.914207z" fill="#FFE97D" ></path><path d="M636.62202 220.045638a19.768721 19.768721 0 0 1-13.976486-33.745207L686.365065 122.566073a19.768721 19.768721 0 0 1 27.962856 27.957914l-63.729415 63.734358a19.679762 19.679762 0 0 1-13.976486 5.787293zM418.449468 668.746192c-138.015328 0-250.296724-112.286338-250.296724-250.301666 0-138.010386 112.281395-250.301666 250.296724-250.301666 138.015328 0 250.301666 112.286338 250.301666 250.301666s-112.286338 250.301666-250.301666 250.301666z m0-461.056005c-116.215371 0-210.759281 94.54391-210.759281 210.764223 0 116.215371 94.54391 210.764223 210.759281 210.764224s210.764223-94.548852 210.764223-210.764224-94.548852-210.764223-210.764223-210.764223z" fill="#6E6E96" ></path><path d="M984.852989 529.480492c0.019769-1.354157 0.103786-2.703373 0.103786-4.072357 0-144.454989-117.109906-261.589606-261.589606-261.589606-124.365026 0-228.388038 86.829167-254.947315 203.143381a162.177648 162.177648 0 0 0-12.355451-0.528813c-85.924748 0-155.579837 69.664974-155.579838 155.574895 0 18.424448 3.217359 36.087801 9.093612 52.485956a208.016371 208.016371 0 0 0-38.351319 120.613911c0 113.907373 91.109095 206.464526 204.418463 208.945501v0.11367h401.898106c137.773162 0 249.461495-111.698218 249.461496-249.47138 0.004942-99.327941-58.085446-185.094539-142.151934-225.215158z" fill="#D9F8FF" ></path><path d="M997.588988 529.164192c0.948899 8.866272 1.477712 17.851155 1.477712 26.969479 0 1.309678-0.069191 2.574876-0.103786 3.874669 61.544972 29.425742 108.386957 84.738624 126.534644 151.86826-11.619066-79.055117-60.353906-146.016718-127.90857-182.712408zM724.523639 257.551845c-124.365026 0-228.383096 86.824224-254.942373 203.143381a162.286376 162.286376 0 0 0-12.355451-0.528814c-85.924748 0-155.579837 69.664974-155.579837 155.574896 0 18.419506 3.222302 36.082859 9.098554 52.481013a208.026255 208.026255 0 0 0-38.35132 120.623796c0 101.235622 72.002626 185.568988 167.579452 204.808896-69.215236-30.96276-117.470685-100.489353-117.470685-181.33354a197.919497 197.919497 0 0 1 36.354678-114.584451 147.87992 147.87992 0 0 1-8.624104-49.861658c0-81.615166 66.032472-147.776135 147.484546-147.776134 3.948802 0 7.838298 0.207572 11.712967 0.513986 25.180409-110.4775 123.776907-192.952605 241.677562-192.952605 101.991776 0 189.56227 61.727833 227.651653 149.916099-27.705863-114.747543-130.982606-200.024865-254.235642-200.024865z" fill="#FFFFFF" opacity=".63" ></path><path d="M877.543427 1023.940694H475.650264c-0.92913 0-1.838491-0.064248-2.728084-0.187803-59.192494-1.878029-114.544914-26.168845-156.088882-68.552984-42.156798-43.001911-65.37022-99.861696-65.37022-160.09699 0-44.202861 12.533369-86.755034 36.339853-123.683005a174.938358 174.938358 0 0 1-7.082145-49.416862c0-95.749802 77.137551-173.816483 172.536458-175.323848 34.708933-120.104867 143.545628-202.629394 270.114867-202.629394 152.441553 0 276.954845 121.864283 281.239715 273.287747 86.764918 46.58005 142.16676 138.395876 142.16676 237.363038 0 148.463098-120.772061 269.240101-269.235159 269.240101z m-399.698835-39.537443h399.698835c126.653256 0 229.697716-103.04446 229.697717-229.702658 0-88.030116-51.378907-169.432769-130.898589-207.37883a19.763779 19.763779 0 0 1-11.24346-18.20205l0.059306-2.026294c0.019769-0.553524 0.04448-1.126817 0.044479-1.695168 0-133.335084-108.480859-241.820885-241.820884-241.820885-113.521883 0-210.428155 77.216626-235.677755 187.773201a19.753895 19.753895 0 0 1-20.806579 15.305932 141.855403 141.855403 0 0 0-10.818433-0.474449c-74.883917 0-135.811116 60.922257-135.811116 135.806174 0 15.706249 2.67372 31.115967 7.937142 45.818954a19.768721 19.768721 0 0 1-2.476032 18.08838 187.951119 187.951119 0 0 0-34.718817 109.192533c0 102.080735 83.02863 186.947856 185.084654 189.181721 0.583177 0.034595 1.166355 0.074133 1.749532 0.133439z" fill="#6E6E96" ></path><path d="M989.612309 526.821599c0.029653-1.364042 0.103786-2.708315 0.103786-4.077299 0-119.412962-80.053437-220.065407-189.389293-251.418599 79.094654 41.761424 133.033611 124.790054 133.03361 220.445955 0 1.31462-0.084017 44.583409-0.103785 45.883202 80.068264 38.203054 135.400915 77.9283 135.400915 172.546343 0 131.239599-106.37549 237.634858-237.629916 237.634858H448.201394v-0.118613c-67.282843-1.467828-126.332014-36.29043-161.278172-88.588583 27.379679 81.32852 103.380529 140.288731 193.486361 142.25572v0.11367h401.893164c137.773162 0 249.466438-111.698218 249.466438-249.47138-0.004942-99.322999-58.100272-185.094539-142.156876-225.205274z" fill="#6E6E96" opacity=".15" ></path></symbol></svg>',function(a){var t=(t=document.getElementsByTagName("script"))[t.length-1],e=t.getAttribute("data-injectcss"),t=t.getAttribute("data-disable-injectsvg");if(!t){var n,i,c,l,o,d=function(t,e){e.parentNode.insertBefore(t,e)};if(e&&!a.__iconfont__svg__cssinject__){a.__iconfont__svg__cssinject__=!0;try{document.write("<style>.svgfont {display: inline-block;width: 1em;height: 1em;fill: currentColor;vertical-align: -0.1em;font-size:16px;}</style>")}catch(t){console&&console.log(t)}}n=function(){var t,e=document.createElement("div");e.innerHTML=a._iconfont_svg_string_4494647,(e=e.getElementsByTagName("svg")[0])&&(e.setAttribute("aria-hidden","true"),e.style.position="absolute",e.style.width=0,e.style.height=0,e.style.overflow="hidden",e=e,(t=document.body).firstChild?d(e,t.firstChild):t.appendChild(e))},document.addEventListener?~["complete","loaded","interactive"].indexOf(document.readyState)?setTimeout(n,0):(i=function(){document.removeEventListener("DOMContentLoaded",i,!1),n()},document.addEventListener("DOMContentLoaded",i,!1)):document.attachEvent&&(c=n,l=a.document,o=!1,h(),l.onreadystatechange=function(){"complete"==l.readyState&&(l.onreadystatechange=null,s())})}function s(){o||(o=!0,c())}function h(){try{l.documentElement.doScroll("left")}catch(t){return void setTimeout(h,50)}s()}}(window);]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>标签</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/runtime/runtime.min.js"/>
      <url>/js/runtime/runtime.min.js</url>
      
        <content type="html"><![CDATA[var now = new Date; function createtime() { var t = new Date("04/05/2024 00:00:00"); now.setTime(now.getTime() + 250); var e = (now - t) / 1e3 / 60 / 60 / 24, a = Math.floor(e), n = (now - t) / 1e3 / 60 / 60 - 24 * a, r = Math.floor(n); 1 == String(r).length && (r = "0" + r); var s = (now - t) / 1e3 / 60 - 1440 * a - 60 * r, i = Math.floor(s); 1 == String(i).length && (i = "0" + i); var o = (now - t) / 1e3 - 86400 * a - 3600 * r - 60 * i, l = Math.round(o); 1 == String(l).length && (l = "0" + l); let g = ""; g = r < 18 && r >= 9 ? `<img class='boardsign' src='https://img.shields.io/badge/simukiru-%E6%91%B8%E9%B1%BC%E4%B8%AD-blue?style=social&logo=Youtube%20Gaming' title='玩得舒心之后，学的才舒心~'><span class='textTip'> <br> 本站居然运行了 ${a} 天</span><span id='runtime'> ${r} 小时 ${i} 分 ${l} 秒 </span> <i class='fas fa-heartbeat' style='color:red'></i>` : `<img class='boardsign' src='https://img.shields.io/badge/simukiru-%E6%91%B8%E9%B1%BC%E4%B8%AD~-blue?style=social&logo=Youtube%20Gaming' title='养精蓄锐不失为一种选择~'><span class='textTip'> <br> 本站居然运行了 ${a} 天</span><span id='runtime'> ${r} 小时 ${i} 分 ${l} 秒 </span> <i class='fas fa-heartbeat' style='color:red'></i>`, document.getElementById("workboard") && (document.getElementById("workboard").innerHTML = g) } setInterval((() => { createtime() }), 250);]]></content>
      
    </entry>
    
    
  
</search>
